{"version":3,"sources":["../src/lib/pan-plugin.ts","../src/lib/manifest.ts","../src/lib/index.ts"],"sourcesContent":["import { BasePlugin, PluginRegistry } from '@embedpdf/core';\nimport {\n  InteractionManagerCapability,\n  InteractionManagerPlugin,\n} from '@embedpdf/plugin-interaction-manager';\n\nimport { PanCapability, PanPluginConfig } from './types';\n\nexport class PanPlugin extends BasePlugin<PanPluginConfig, PanCapability> {\n  static readonly id = 'pan' as const;\n\n  private interactionManager: InteractionManagerCapability;\n\n  constructor(id: string, registry: PluginRegistry) {\n    super(id, registry);\n\n    this.interactionManager = registry\n      .getPlugin<InteractionManagerPlugin>(InteractionManagerPlugin.id)\n      ?.provides()!;\n\n    this.interactionManager.registerMode({\n      id: 'panMode',\n      scope: 'global',\n      exclusive: false,\n      cursor: 'grab',\n    });\n  }\n\n  async initialize(_: PanPluginConfig): Promise<void> {}\n\n  protected buildCapability(): PanCapability {\n    return {\n      enablePan: () => this.interactionManager.activate('panMode'),\n      disablePan: () => this.interactionManager.activate('default'),\n      togglePan: () => {\n        if (this.interactionManager.getActiveMode() === 'panMode') {\n          this.interactionManager.activate('default');\n        } else {\n          this.interactionManager.activate('panMode');\n        }\n      },\n    };\n  }\n}\n","import { PluginManifest } from '@embedpdf/core';\nimport { PanPluginConfig } from './types';\n\nexport const PAN_PLUGIN_ID = 'pan';\n\nexport const manifest: PluginManifest<PanPluginConfig> = {\n  id: PAN_PLUGIN_ID,\n  name: 'Pan Plugin',\n  version: '1.0.0',\n  provides: ['pan'],\n  requires: ['interaction-manager'],\n  optional: [],\n  defaultConfig: {\n    enabled: true,\n  },\n};\n","import { PluginPackage } from '@embedpdf/core';\n\nimport { PanPlugin } from './pan-plugin';\nimport { manifest, PAN_PLUGIN_ID } from './manifest';\nimport { PanPluginConfig } from './types';\n\nexport const PanPluginPackage: PluginPackage<PanPlugin, PanPluginConfig> = {\n  manifest,\n  create: (registry) => new PanPlugin(PAN_PLUGIN_ID, registry),\n  reducer: () => {},\n  initialState: {},\n};\n\nexport * from './pan-plugin';\nexport * from './types';\nexport * from './manifest';\n"],"mappings":";AAAA,SAAS,kBAAkC;AAC3C;AAAA,EAEE;AAAA,OACK;AAIA,IAAM,YAAN,cAAwB,WAA2C;AAAA,EAKxE,YAAY,IAAY,UAA0B;AAChD,UAAM,IAAI,QAAQ;AAElB,SAAK,qBAAqB,SACvB,UAAoC,yBAAyB,EAAE,GAC9D,SAAS;AAEb,SAAK,mBAAmB,aAAa;AAAA,MACnC,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,WAAW;AAAA,MACX,QAAQ;AAAA,IACV,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,WAAW,GAAmC;AAAA,EAAC;AAAA,EAE3C,kBAAiC;AACzC,WAAO;AAAA,MACL,WAAW,MAAM,KAAK,mBAAmB,SAAS,SAAS;AAAA,MAC3D,YAAY,MAAM,KAAK,mBAAmB,SAAS,SAAS;AAAA,MAC5D,WAAW,MAAM;AACf,YAAI,KAAK,mBAAmB,cAAc,MAAM,WAAW;AACzD,eAAK,mBAAmB,SAAS,SAAS;AAAA,QAC5C,OAAO;AACL,eAAK,mBAAmB,SAAS,SAAS;AAAA,QAC5C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAnCa,UACK,KAAK;;;ACNhB,IAAM,gBAAgB;AAEtB,IAAM,WAA4C;AAAA,EACvD,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,SAAS;AAAA,EACT,UAAU,CAAC,KAAK;AAAA,EAChB,UAAU,CAAC,qBAAqB;AAAA,EAChC,UAAU,CAAC;AAAA,EACX,eAAe;AAAA,IACb,SAAS;AAAA,EACX;AACF;;;ACTO,IAAM,mBAA8D;AAAA,EACzE;AAAA,EACA,QAAQ,CAAC,aAAa,IAAI,UAAU,eAAe,QAAQ;AAAA,EAC3D,SAAS,MAAM;AAAA,EAAC;AAAA,EAChB,cAAc,CAAC;AACjB;","names":[]}
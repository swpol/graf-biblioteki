{"version":3,"sources":["../src/lib/manifest.ts","../src/lib/fullscreen-plugin.ts","../src/lib/actions.ts","../src/lib/reducer.ts","../src/lib/index.ts"],"sourcesContent":["import { PluginManifest } from '@embedpdf/core';\nimport { FullscreenPluginConfig } from './types';\n\nexport const FULLSCREEN_PLUGIN_ID = 'fullscreen';\n\nexport const manifest: PluginManifest<FullscreenPluginConfig> = {\n  id: FULLSCREEN_PLUGIN_ID,\n  name: 'Fullscreen Plugin',\n  version: '1.0.0',\n  provides: ['fullscreen'],\n  requires: [],\n  optional: [],\n  defaultConfig: {\n    enabled: true,\n  },\n};\n","import { BasePlugin, createBehaviorEmitter, createEmitter, PluginRegistry } from '@embedpdf/core';\nimport { FullscreenCapability, FullscreenPluginConfig, FullscreenState } from './types';\nimport { FullscreenAction, setFullscreen } from './actions';\n\nexport class FullscreenPlugin extends BasePlugin<\n  FullscreenPluginConfig,\n  FullscreenCapability,\n  FullscreenState,\n  FullscreenAction\n> {\n  static readonly id = 'fullscreen' as const;\n\n  private readonly onStateChange$ = createBehaviorEmitter<FullscreenState>();\n  private readonly fullscreenRequest$ = createEmitter<'enter' | 'exit'>();\n\n  constructor(id: string, registry: PluginRegistry) {\n    super(id, registry);\n  }\n\n  async initialize(_: FullscreenPluginConfig): Promise<void> {}\n\n  protected buildCapability(): FullscreenCapability {\n    return {\n      isFullscreen: () => this.state.isFullscreen,\n      enableFullscreen: () => this.enableFullscreen(),\n      exitFullscreen: () => this.exitFullscreen(),\n      toggleFullscreen: () => this.toggleFullscreen(),\n      onRequest: this.fullscreenRequest$.on,\n      onStateChange: this.onStateChange$.on,\n    };\n  }\n\n  private toggleFullscreen(): void {\n    if (this.state.isFullscreen) {\n      this.exitFullscreen();\n    } else {\n      this.enableFullscreen();\n    }\n  }\n\n  private enableFullscreen(): void {\n    this.fullscreenRequest$.emit('enter');\n  }\n\n  private exitFullscreen(): void {\n    this.fullscreenRequest$.emit('exit');\n  }\n\n  override onStoreUpdated(_: FullscreenState, newState: FullscreenState): void {\n    this.onStateChange$.emit(newState);\n  }\n\n  public setFullscreenState(isFullscreen: boolean): void {\n    this.dispatch(setFullscreen(isFullscreen));\n  }\n\n  async destroy(): Promise<void> {\n    this.fullscreenRequest$.clear();\n    super.destroy();\n  }\n}\n","import { Action } from '@embedpdf/core';\n\nexport const SET_FULLSCREEN = 'SET_FULLSCREEN';\n\nexport interface SetFullscreenAction extends Action {\n  type: typeof SET_FULLSCREEN;\n  payload: boolean;\n}\n\nexport type FullscreenAction = SetFullscreenAction;\n\nexport function setFullscreen(payload: boolean): SetFullscreenAction {\n  return { type: SET_FULLSCREEN, payload };\n}\n","import { Reducer } from '@embedpdf/core';\nimport { FullscreenState } from './types';\nimport { FullscreenAction, SET_FULLSCREEN } from './actions';\n\nexport const initialState: FullscreenState = {\n  isFullscreen: false,\n};\n\nexport const reducer: Reducer<FullscreenState, FullscreenAction> = (state, action) => {\n  switch (action.type) {\n    case SET_FULLSCREEN:\n      return { ...state, isFullscreen: action.payload };\n    default:\n      return state;\n  }\n};\n","import { PluginPackage } from '@embedpdf/core';\nimport { manifest, FULLSCREEN_PLUGIN_ID } from './manifest';\nimport { FullscreenPluginConfig, FullscreenState } from './types';\nimport { FullscreenPlugin } from './fullscreen-plugin';\nimport { initialState } from './reducer';\nimport { reducer } from './reducer';\nimport { FullscreenAction } from './actions';\n\nexport const FullscreenPluginPackage: PluginPackage<\n  FullscreenPlugin,\n  FullscreenPluginConfig,\n  FullscreenState,\n  FullscreenAction\n> = {\n  manifest,\n  create: (registry) => new FullscreenPlugin(FULLSCREEN_PLUGIN_ID, registry),\n  reducer,\n  initialState,\n};\n\nexport * from './fullscreen-plugin';\nexport * from './types';\nexport * from './manifest';\nexport * from './actions';\nexport { initialState };\n"],"mappings":";AAGO,IAAM,uBAAuB;AAE7B,IAAM,WAAmD;AAAA,EAC9D,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,SAAS;AAAA,EACT,UAAU,CAAC,YAAY;AAAA,EACvB,UAAU,CAAC;AAAA,EACX,UAAU,CAAC;AAAA,EACX,eAAe;AAAA,IACb,SAAS;AAAA,EACX;AACF;;;ACfA,SAAS,YAAY,uBAAuB,qBAAqC;;;ACE1E,IAAM,iBAAiB;AASvB,SAAS,cAAc,SAAuC;AACnE,SAAO,EAAE,MAAM,gBAAgB,QAAQ;AACzC;;;ADTO,IAAM,mBAAN,cAA+B,WAKpC;AAAA,EAMA,YAAY,IAAY,UAA0B;AAChD,UAAM,IAAI,QAAQ;AAJpB,SAAiB,iBAAiB,sBAAuC;AACzE,SAAiB,qBAAqB,cAAgC;AAAA,EAItE;AAAA,EAEA,MAAM,WAAW,GAA0C;AAAA,EAAC;AAAA,EAElD,kBAAwC;AAChD,WAAO;AAAA,MACL,cAAc,MAAM,KAAK,MAAM;AAAA,MAC/B,kBAAkB,MAAM,KAAK,iBAAiB;AAAA,MAC9C,gBAAgB,MAAM,KAAK,eAAe;AAAA,MAC1C,kBAAkB,MAAM,KAAK,iBAAiB;AAAA,MAC9C,WAAW,KAAK,mBAAmB;AAAA,MACnC,eAAe,KAAK,eAAe;AAAA,IACrC;AAAA,EACF;AAAA,EAEQ,mBAAyB;AAC/B,QAAI,KAAK,MAAM,cAAc;AAC3B,WAAK,eAAe;AAAA,IACtB,OAAO;AACL,WAAK,iBAAiB;AAAA,IACxB;AAAA,EACF;AAAA,EAEQ,mBAAyB;AAC/B,SAAK,mBAAmB,KAAK,OAAO;AAAA,EACtC;AAAA,EAEQ,iBAAuB;AAC7B,SAAK,mBAAmB,KAAK,MAAM;AAAA,EACrC;AAAA,EAES,eAAe,GAAoB,UAAiC;AAC3E,SAAK,eAAe,KAAK,QAAQ;AAAA,EACnC;AAAA,EAEO,mBAAmB,cAA6B;AACrD,SAAK,SAAS,cAAc,YAAY,CAAC;AAAA,EAC3C;AAAA,EAEA,MAAM,UAAyB;AAC7B,SAAK,mBAAmB,MAAM;AAC9B,UAAM,QAAQ;AAAA,EAChB;AACF;AAxDa,iBAMK,KAAK;;;AENhB,IAAM,eAAgC;AAAA,EAC3C,cAAc;AAChB;AAEO,IAAM,UAAsD,CAAC,OAAO,WAAW;AACpF,UAAQ,OAAO,MAAM;AAAA,IACnB,KAAK;AACH,aAAO,EAAE,GAAG,OAAO,cAAc,OAAO,QAAQ;AAAA,IAClD;AACE,aAAO;AAAA,EACX;AACF;;;ACPO,IAAM,0BAKT;AAAA,EACF;AAAA,EACA,QAAQ,CAAC,aAAa,IAAI,iBAAiB,sBAAsB,QAAQ;AAAA,EACzE;AAAA,EACA;AACF;","names":[]}
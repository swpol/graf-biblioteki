{"version":3,"sources":["../src/index.ts","../src/lib/manifest.ts","../../core/src/lib/utils/dependency-resolver.ts","../../core/src/lib/types/errors.ts","../../core/src/lib/store/plugin-store.ts","../../core/src/lib/store/actions.ts","../../core/src/lib/store/store.ts","../../models/dist/index.js","../../core/src/lib/store/initial-state.ts","../../core/src/lib/store/reducer.ts","../../core/src/lib/registry/plugin-registry.ts","../../core/src/lib/utils/math.ts","../../core/src/lib/store/selectors.ts","../../core/src/lib/utils/plugin-helpers.ts","../../core/src/lib/base/base-plugin.ts","../../core/src/lib/utils/event-control.ts","../../core/src/lib/utils/eventing.ts","../../core/src/lib/utils/typed-object.ts","../../models/src/geometry.ts","../../models/src/logger.ts","../../models/src/task.ts","../../models/src/pdf.ts","../../models/src/color.ts","../../models/src/date.ts","../../models/src/index.ts","../src/lib/actions.ts","../src/lib/utils.ts","../src/lib/selectors.ts","../src/lib/variant-key.ts","../src/lib/annotation-plugin.ts","../src/lib/reducer.ts","../src/lib/index.ts"],"sourcesContent":["export * from './lib';\n","import { PluginManifest } from '@embedpdf/core';\nimport { AnnotationPluginConfig } from './types';\n\nexport const ANNOTATION_PLUGIN_ID = 'annotation';\n\nexport const manifest: PluginManifest<AnnotationPluginConfig> = {\n  id: ANNOTATION_PLUGIN_ID,\n  name: 'Annotation Plugin',\n  version: '1.0.0',\n  provides: ['annotation'],\n  requires: ['interaction-manager', 'selection'],\n  optional: ['history'],\n  defaultConfig: {\n    enabled: true,\n    autoCommit: true,\n  },\n};\n","export class DependencyResolver {\n  private dependencyGraph = new Map<string, Set<string>>();\n\n  addNode(id: string, dependencies: string[] = []) {\n    this.dependencyGraph.set(id, new Set(dependencies));\n  }\n\n  private hasCircularDependencies(): boolean {\n    const visited = new Set<string>();\n    const recursionStack = new Set<string>();\n\n    const dfs = (id: string): boolean => {\n      visited.add(id);\n      recursionStack.add(id);\n\n      const dependencies = this.dependencyGraph.get(id) || new Set();\n      for (const dep of dependencies) {\n        if (!visited.has(dep)) {\n          if (dfs(dep)) return true;\n        } else if (recursionStack.has(dep)) {\n          return true; // Circular dependency found\n        }\n      }\n\n      recursionStack.delete(id);\n      return false;\n    };\n\n    for (const id of this.dependencyGraph.keys()) {\n      if (!visited.has(id)) {\n        if (dfs(id)) return true;\n      }\n    }\n\n    return false;\n  }\n\n  resolveLoadOrder(): string[] {\n    if (this.hasCircularDependencies()) {\n      throw new Error('Circular dependencies detected');\n    }\n\n    const result: string[] = [];\n    const visited = new Set<string>();\n    const temp = new Set<string>();\n\n    const visit = (id: string) => {\n      if (temp.has(id)) throw new Error('Circular dependency');\n      if (visited.has(id)) return;\n\n      temp.add(id);\n\n      const dependencies = this.dependencyGraph.get(id) || new Set();\n      for (const dep of dependencies) {\n        visit(dep);\n      }\n\n      temp.delete(id);\n      visited.add(id);\n      result.push(id);\n    };\n\n    for (const id of this.dependencyGraph.keys()) {\n      if (!visited.has(id)) {\n        visit(id);\n      }\n    }\n\n    return result;\n  }\n}\n","export class PluginRegistrationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PluginRegistrationError';\n  }\n}\n\nexport class PluginNotFoundError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PluginNotFoundError';\n  }\n}\n\nexport class CircularDependencyError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CircularDependencyError';\n  }\n}\n\nexport class CapabilityNotFoundError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CapabilityNotFoundError';\n  }\n}\n\n// You might also want to add:\nexport class CapabilityConflictError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CapabilityConflictError';\n  }\n}\n\nexport class PluginInitializationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PluginInitializationError';\n  }\n}\n\nexport class PluginConfigurationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PluginConfigurationError';\n  }\n}\n","import { Store } from './store';\nimport { Action } from './types';\n\n/**\n * A type-safe store handle for plugins, providing access to plugin-specific state and actions.\n */\nexport class PluginStore<PluginState, PluginAction extends Action> {\n  private store: Store<any, any>;\n  private pluginId: string;\n\n  /**\n   * Initializes the PluginStore with the main store and plugin ID.\n   * @param store The main store instance.\n   * @param pluginId The unique identifier for the plugin.\n   */\n  constructor(store: Store<any, any>, pluginId: string) {\n    this.store = store;\n    this.pluginId = pluginId;\n  }\n\n  /**\n   * Gets the current state of the plugin.\n   * @returns The plugin's state.\n   */\n  getState(): PluginState {\n    return this.store.getState().plugins[this.pluginId] as PluginState;\n  }\n\n  /**\n   * Dispatches an action for the plugin and returns the *new* global state.\n   * If you only need the plugin’s updated state, call `getState()` afterward.\n   * @param action The action to dispatch.\n   * @returns The updated global store state (after plugin reducer).\n   */\n  dispatch(action: PluginAction): PluginState {\n    return this.store.dispatchToPlugin(this.pluginId, action);\n  }\n\n  /**\n   * Subscribes to state changes only for this specific plugin.\n   * You now receive (action, newPluginState, oldPluginState) in the callback.\n   *\n   * @param listener The callback to invoke when plugin state changes.\n   * @returns A function to unsubscribe the listener.\n   */\n  subscribeToState(\n    listener: (action: PluginAction, newState: PluginState, oldState: PluginState) => void,\n  ) {\n    return this.store.subscribeToPlugin(this.pluginId, (action, newPluginState, oldPluginState) => {\n      listener(\n        action as PluginAction,\n        newPluginState as PluginState,\n        oldPluginState as PluginState,\n      );\n    });\n  }\n\n  /**\n   * Subscribes to a specific action type for the plugin.\n   * This still uses the main store's `onAction`, so you get the *global*\n   * old/new store states there. If you specifically want old/new plugin state,\n   * use `subscribeToState` instead.\n   *\n   * @param type The action type to listen for.\n   * @param handler The callback to invoke when the action occurs.\n   * @returns A function to unsubscribe the handler.\n   */\n  onAction<T extends PluginAction['type']>(\n    type: T,\n    handler: (\n      action: Extract<PluginAction, { type: T }>,\n      state: PluginState,\n      oldState: PluginState,\n    ) => void,\n  ) {\n    return this.store.onAction(type, (action, state, oldState) => {\n      handler(\n        action as Extract<PluginAction, { type: T }>,\n        state.plugins[this.pluginId] as PluginState,\n        oldState.plugins[this.pluginId] as PluginState,\n      );\n    });\n  }\n}\n","import { PdfDocumentObject, PdfPageObject, Rotation } from '@embedpdf/models';\n\nexport const LOAD_DOCUMENT = 'LOAD_DOCUMENT';\nexport const SET_DOCUMENT = 'SET_DOCUMENT';\nexport const SET_DOCUMENT_ERROR = 'SET_DOCUMENT_ERROR';\nexport const SET_SCALE = 'SET_SCALE';\nexport const SET_ROTATION = 'SET_ROTATION';\nexport const SET_PAGES = 'SET_PAGES';\n\nexport const CORE_ACTION_TYPES = [\n  LOAD_DOCUMENT,\n  SET_DOCUMENT,\n  SET_DOCUMENT_ERROR,\n  SET_SCALE,\n  SET_ROTATION,\n  SET_PAGES,\n] as const;\n\n// Action Type Interfaces\nexport interface LoadDocumentAction {\n  type: typeof LOAD_DOCUMENT;\n}\n\nexport interface SetDocumentAction {\n  type: typeof SET_DOCUMENT;\n  payload: PdfDocumentObject;\n}\n\nexport interface SetDocumentErrorAction {\n  type: typeof SET_DOCUMENT_ERROR;\n  payload: string;\n}\n\nexport interface SetScaleAction {\n  type: typeof SET_SCALE;\n  payload: number;\n}\n\nexport interface SetRotationAction {\n  type: typeof SET_ROTATION;\n  payload: Rotation;\n}\n\nexport interface SetPagesAction {\n  type: typeof SET_PAGES;\n  payload: PdfPageObject[][];\n}\n\nexport type DocumentAction =\n  | LoadDocumentAction\n  | SetDocumentAction\n  | SetDocumentErrorAction\n  | SetScaleAction\n  | SetRotationAction\n  | SetPagesAction;\n\n// Core actions\nexport type CoreAction = DocumentAction;\n\nexport const loadDocument = (): CoreAction => ({ type: LOAD_DOCUMENT });\nexport const setDocument = (document: PdfDocumentObject): CoreAction => ({\n  type: SET_DOCUMENT,\n  payload: document,\n});\nexport const setDocumentError = (error: string): CoreAction => ({\n  type: SET_DOCUMENT_ERROR,\n  payload: error,\n});\nexport const setScale = (scale: number): CoreAction => ({ type: SET_SCALE, payload: scale });\nexport const setRotation = (rotation: Rotation): CoreAction => ({\n  type: SET_ROTATION,\n  payload: rotation,\n});\nexport const setPages = (pages: PdfPageObject[][]): CoreAction => ({\n  type: SET_PAGES,\n  payload: pages,\n});\n","import { Reducer, Action, StoreState, StoreListener, PluginListener } from './types';\nimport { PluginStore } from './plugin-store';\nimport { CORE_ACTION_TYPES } from './actions';\n\n/**\n * A generic, type-safe store class managing core and plugin states, reducers, and subscriptions.\n * @template CoreState The type of the core state.\n * @template CoreAction The type of actions handled by core reducers (extends Action).\n */\nexport class Store<CoreState, CoreAction extends Action = Action> {\n  private state: StoreState<CoreState>;\n  private coreReducer: Reducer<CoreState, CoreAction>;\n  private pluginReducers: Record<string, Reducer<any, Action>> = {};\n\n  private listeners: StoreListener<CoreState>[] = [];\n  private pluginListeners: Record<string, PluginListener[]> = {};\n\n  /**\n   * Initializes the store with the provided core state.\n   * @param reducer          The core reducer function\n   * @param initialCoreState The initial core state\n   */\n  constructor(\n    reducer: Reducer<CoreState, CoreAction>,\n    public initialCoreState: CoreState,\n  ) {\n    this.state = { core: initialCoreState, plugins: {} };\n    this.coreReducer = reducer;\n  }\n\n  /**\n   * Adds a reducer for a plugin-specific state.\n   * @param pluginId The unique identifier for the plugin.\n   * @param reducer The reducer function for the plugin state.\n   * @param initialState The initial state for the plugin.\n   */\n  addPluginReducer<PluginState>(\n    pluginId: string,\n    reducer: Reducer<PluginState, Action>,\n    initialState: PluginState,\n  ) {\n    this.state.plugins[pluginId] = initialState;\n    this.pluginReducers[pluginId] = reducer;\n  }\n\n  /**\n   * Dispatches an action *only* to the core reducer.\n   * Notifies the global store listeners with (action, newState, oldState).\n   *\n   * @param action The action to dispatch, typed as CoreAction\n   * @returns The updated *global* store state\n   */\n  dispatchToCore(action: CoreAction): StoreState<CoreState> {\n    if (!this.coreReducer) {\n      return this.getState();\n    }\n\n    const oldState = this.getState();\n    // Update core state via its reducer\n    this.state.core = this.coreReducer(this.state.core, action);\n\n    const newState = this.getState();\n    // Notify all main-store subscribers\n    this.listeners.forEach((listener) => listener(action, newState, oldState));\n\n    return newState;\n  }\n\n  /**\n   * Dispatches an action *only* to a specific plugin.\n   * Optionally notifies global store listeners if `notifyGlobal` is true.\n   * Always notifies plugin-specific listeners with (action, newPluginState, oldPluginState).\n   *\n   * @param pluginId   The plugin identifier\n   * @param action     The plugin action to dispatch\n   * @param notifyGlobal Whether to also notify global store listeners\n   * @returns The updated *global* store state\n   */\n  dispatchToPlugin<PluginAction extends Action>(\n    pluginId: string,\n    action: PluginAction,\n    notifyGlobal: boolean = true,\n  ): any {\n    const oldGlobalState = this.getState();\n\n    const reducer = this.pluginReducers[pluginId];\n    if (!reducer) {\n      // No plugin found, just return the old state\n      return oldGlobalState;\n    }\n\n    // Grab the old plugin state\n    const oldPluginState = oldGlobalState.plugins[pluginId];\n    // Reduce to new plugin state\n    const newPluginState = reducer(oldPluginState, action);\n    // Update the store's plugin slice\n    this.state.plugins[pluginId] = newPluginState;\n\n    const newGlobalState = this.getState();\n\n    // If we are notifying the main store subscribers about plugin changes\n    if (notifyGlobal) {\n      this.listeners.forEach((listener) => listener(action, newGlobalState, oldGlobalState));\n    }\n\n    // Notify plugin-specific listeners\n    if (this.pluginListeners[pluginId]) {\n      this.pluginListeners[pluginId].forEach((listener) => {\n        listener(action, newPluginState, oldPluginState);\n      });\n    }\n\n    return newPluginState;\n  }\n\n  /**\n   * Dispatches an action to update the state using:\n   * - the core reducer (if it's a CoreAction)\n   * - *all* plugin reducers (regardless of action type), with no global notify for each plugin\n   *\n   * Returns the new *global* store state after all reducers have processed the action.\n   *\n   * @param action The action to dispatch (can be CoreAction or any Action).\n   */\n  dispatch(action: CoreAction | Action): StoreState<CoreState> {\n    // Keep old state to notify global listeners *once*, after all reducers run.\n    const oldState = this.getState();\n    // 1) Apply core reducer (only if action is a CoreAction)\n    if (this.isCoreAction(action)) {\n      this.state.core = this.coreReducer(this.state.core, action);\n    }\n\n    // 2) Apply plugin reducers (without globally notifying after each plugin)\n    for (const pluginId in this.pluginReducers) {\n      const reducer = this.pluginReducers[pluginId];\n      const oldPluginState = oldState.plugins[pluginId];\n      if (reducer) {\n        this.state.plugins[pluginId] = reducer(oldPluginState, action);\n      }\n      // We do *not* notify global listeners or plugin listeners here,\n      // as that might be undesired \"fan-out\". If you want per-plugin subscription\n      // triggered on every dispatch, you can do so here, but that’s up to you.\n    }\n\n    // 3) Notify global listeners *once* with the final new state\n    const newState = this.getState();\n    this.listeners.forEach((listener) => listener(action, newState, oldState));\n\n    // 4) Return the new global store state\n    return newState;\n  }\n\n  /**\n   * Returns a shallow copy of the current state.\n   * @returns The current store state.\n   */\n  getState(): StoreState<CoreState> {\n    return {\n      core: { ...this.state.core },\n      plugins: { ...this.state.plugins },\n    };\n  }\n\n  /**\n   * Subscribes a listener to *global* state changes.\n   * The callback signature is now (action, newState, oldState).\n   *\n   * @param listener The callback to invoke on state changes\n   * @returns A function to unsubscribe the listener\n   */\n  subscribe(listener: StoreListener<CoreState>) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter((l) => l !== listener);\n    };\n  }\n\n  /**\n   * Subscribes a listener to *plugin-specific* state changes.\n   * The callback signature is now (action, newPluginState, oldPluginState).\n   *\n   * @param pluginId The unique identifier for the plugin.\n   * @param listener The callback to invoke on plugin state changes.\n   * @returns A function to unsubscribe the listener.\n   */\n  subscribeToPlugin(pluginId: string, listener: PluginListener) {\n    if (!(pluginId in this.state.plugins)) {\n      throw new Error(\n        `Plugin state not found for plugin \"${pluginId}\". Did you forget to call addPluginReducer?`,\n      );\n    }\n\n    if (!this.pluginListeners[pluginId]) {\n      this.pluginListeners[pluginId] = [];\n    }\n    this.pluginListeners[pluginId].push(listener);\n\n    return () => {\n      this.pluginListeners[pluginId] = this.pluginListeners[pluginId].filter((l) => l !== listener);\n      if (this.pluginListeners[pluginId].length === 0) {\n        delete this.pluginListeners[pluginId];\n      }\n    };\n  }\n\n  /**\n   * Subscribes to a specific action type (only from the core's action union).\n   * The callback signature is (action, newState, oldState).\n   *\n   * @param type The action type to listen for.\n   * @param handler The callback to invoke when the action occurs.\n   * @returns A function to unsubscribe the handler.\n   */\n  onAction<T extends CoreAction['type']>(\n    type: T,\n    handler: (\n      action: Extract<CoreAction, { type: T }>,\n      state: StoreState<CoreState>,\n      oldState: StoreState<CoreState>,\n    ) => void,\n  ) {\n    return this.subscribe((action, newState, oldState) => {\n      if (action.type === type) {\n        handler(action as Extract<CoreAction, { type: T }>, newState, oldState);\n      }\n    });\n  }\n\n  /**\n   * Gets a PluginStore handle for a specific plugin.\n   * @param pluginId The unique identifier for the plugin.\n   * @returns A PluginStore instance for the plugin.\n   */\n  getPluginStore<PluginState, PluginAction extends Action>(\n    pluginId: string,\n  ): PluginStore<PluginState, PluginAction> {\n    if (!(pluginId in this.state.plugins)) {\n      throw new Error(\n        `Plugin state not found for plugin \"${pluginId}\". Did you forget to call addPluginReducer?`,\n      );\n    }\n    return new PluginStore<PluginState, PluginAction>(this, pluginId);\n  }\n\n  /**\n   * Helper method to check if an action is a CoreAction.\n   * Adjust if you have a more refined way to differentiate CoreAction vs. any other Action.\n   */\n  public isCoreAction(action: Action): action is CoreAction {\n    // In many codebases you'd do something more robust here\n    // or rely on TypeScript's narrowing logic if possible.\n    return CORE_ACTION_TYPES.includes(action.type as (typeof CORE_ACTION_TYPES)[number]);\n  }\n\n  /**\n   * Destroy the store: drop every listener and plugin reducer\n   */\n  public destroy(): void {\n    // 1. empty listener collections\n    this.listeners.length = 0;\n    for (const id in this.pluginListeners) {\n      this.pluginListeners[id]?.splice?.(0);\n    }\n    this.pluginListeners = {};\n\n    // 2. wipe plugin reducers and states\n    this.pluginReducers = {};\n    this.state.plugins = {};\n\n    // 3. reset core state to initial\n    this.state.core = { ...this.initialCoreState };\n  }\n}\n","// src/geometry.ts\nvar Rotation = /* @__PURE__ */ ((Rotation2) => {\n  Rotation2[Rotation2[\"Degree0\"] = 0] = \"Degree0\";\n  Rotation2[Rotation2[\"Degree90\"] = 1] = \"Degree90\";\n  Rotation2[Rotation2[\"Degree180\"] = 2] = \"Degree180\";\n  Rotation2[Rotation2[\"Degree270\"] = 3] = \"Degree270\";\n  return Rotation2;\n})(Rotation || {});\nfunction toIntPos(p) {\n  return { x: Math.floor(p.x), y: Math.floor(p.y) };\n}\nfunction toIntSize(s) {\n  return { width: Math.ceil(s.width), height: Math.ceil(s.height) };\n}\nfunction toIntRect(r) {\n  return {\n    origin: toIntPos(r.origin),\n    size: toIntSize(r.size)\n  };\n}\nfunction calculateDegree(rotation) {\n  switch (rotation) {\n    case 0 /* Degree0 */:\n      return 0;\n    case 1 /* Degree90 */:\n      return 90;\n    case 2 /* Degree180 */:\n      return 180;\n    case 3 /* Degree270 */:\n      return 270;\n  }\n}\nfunction calculateAngle(rotation) {\n  return calculateDegree(rotation) * Math.PI / 180;\n}\nfunction swap(size) {\n  const { width, height } = size;\n  return {\n    width: height,\n    height: width\n  };\n}\nfunction transformSize(size, rotation, scaleFactor) {\n  size = rotation % 2 === 0 ? size : swap(size);\n  return {\n    width: size.width * scaleFactor,\n    height: size.height * scaleFactor\n  };\n}\nfunction quadToRect(q) {\n  const xs = [q.p1.x, q.p2.x, q.p3.x, q.p4.x];\n  const ys = [q.p1.y, q.p2.y, q.p3.y, q.p4.y];\n  return {\n    origin: { x: Math.min(...xs), y: Math.min(...ys) },\n    size: {\n      width: Math.max(...xs) - Math.min(...xs),\n      height: Math.max(...ys) - Math.min(...ys)\n    }\n  };\n}\nfunction rectToQuad(r) {\n  return {\n    p1: { x: r.origin.x, y: r.origin.y },\n    p2: { x: r.origin.x + r.size.width, y: r.origin.y },\n    p3: { x: r.origin.x + r.size.width, y: r.origin.y + r.size.height },\n    p4: { x: r.origin.x, y: r.origin.y + r.size.height }\n  };\n}\nfunction rotatePosition(containerSize, position, rotation) {\n  let x = position.x;\n  let y = position.y;\n  switch (rotation) {\n    case 0 /* Degree0 */:\n      x = position.x;\n      y = position.y;\n      break;\n    case 1 /* Degree90 */:\n      x = containerSize.height - position.y;\n      y = position.x;\n      break;\n    case 2 /* Degree180 */:\n      x = containerSize.width - position.x;\n      y = containerSize.height - position.y;\n      break;\n    case 3 /* Degree270 */:\n      x = position.y;\n      y = containerSize.width - position.x;\n      break;\n  }\n  return {\n    x,\n    y\n  };\n}\nfunction scalePosition(position, scaleFactor) {\n  return {\n    x: position.x * scaleFactor,\n    y: position.y * scaleFactor\n  };\n}\nfunction transformPosition(containerSize, position, rotation, scaleFactor) {\n  return scalePosition(rotatePosition(containerSize, position, rotation), scaleFactor);\n}\nfunction restorePosition(containerSize, position, rotation, scaleFactor) {\n  return scalePosition(\n    rotatePosition(containerSize, position, (4 - rotation) % 4),\n    1 / scaleFactor\n  );\n}\nfunction rotateRect(containerSize, rect, rotation) {\n  let x = rect.origin.x;\n  let y = rect.origin.y;\n  let size = rect.size;\n  switch (rotation) {\n    case 0 /* Degree0 */:\n      break;\n    case 1 /* Degree90 */:\n      x = containerSize.height - rect.origin.y - rect.size.height;\n      y = rect.origin.x;\n      size = swap(rect.size);\n      break;\n    case 2 /* Degree180 */:\n      x = containerSize.width - rect.origin.x - rect.size.width;\n      y = containerSize.height - rect.origin.y - rect.size.height;\n      break;\n    case 3 /* Degree270 */:\n      x = rect.origin.y;\n      y = containerSize.width - rect.origin.x - rect.size.width;\n      size = swap(rect.size);\n      break;\n  }\n  return {\n    origin: {\n      x,\n      y\n    },\n    size: {\n      width: size.width,\n      height: size.height\n    }\n  };\n}\nfunction scaleRect(rect, scaleFactor) {\n  return {\n    origin: {\n      x: rect.origin.x * scaleFactor,\n      y: rect.origin.y * scaleFactor\n    },\n    size: {\n      width: rect.size.width * scaleFactor,\n      height: rect.size.height * scaleFactor\n    }\n  };\n}\nfunction transformRect(containerSize, rect, rotation, scaleFactor) {\n  return scaleRect(rotateRect(containerSize, rect, rotation), scaleFactor);\n}\nfunction restoreRect(containerSize, rect, rotation, scaleFactor) {\n  return scaleRect(rotateRect(containerSize, rect, (4 - rotation) % 4), 1 / scaleFactor);\n}\nfunction restoreOffset(offset, rotation, scaleFactor) {\n  let offsetX = offset.x;\n  let offsetY = offset.y;\n  switch (rotation) {\n    case 0 /* Degree0 */:\n      offsetX = offset.x / scaleFactor;\n      offsetY = offset.y / scaleFactor;\n      break;\n    case 1 /* Degree90 */:\n      offsetX = offset.y / scaleFactor;\n      offsetY = -offset.x / scaleFactor;\n      break;\n    case 2 /* Degree180 */:\n      offsetX = -offset.x / scaleFactor;\n      offsetY = -offset.y / scaleFactor;\n      break;\n    case 3 /* Degree270 */:\n      offsetX = -offset.y / scaleFactor;\n      offsetY = offset.x / scaleFactor;\n      break;\n  }\n  return {\n    x: offsetX,\n    y: offsetY\n  };\n}\nfunction boundingRect(rects) {\n  if (rects.length === 0) return null;\n  let minX = rects[0].origin.x, minY = rects[0].origin.y, maxX = rects[0].origin.x + rects[0].size.width, maxY = rects[0].origin.y + rects[0].size.height;\n  for (const r of rects) {\n    minX = Math.min(minX, r.origin.x);\n    minY = Math.min(minY, r.origin.y);\n    maxX = Math.max(maxX, r.origin.x + r.size.width);\n    maxY = Math.max(maxY, r.origin.y + r.size.height);\n  }\n  return {\n    origin: {\n      x: minX,\n      y: minY\n    },\n    size: {\n      width: maxX - minX,\n      height: maxY - minY\n    }\n  };\n}\nvar makeMatrix = (rectangle, rotation, scaleFactor) => {\n  const { width, height } = rectangle.size;\n  switch (rotation) {\n    case 0 /* Degree0 */:\n      return {\n        a: scaleFactor,\n        b: 0,\n        c: 0,\n        d: -scaleFactor,\n        e: 0,\n        f: height * scaleFactor\n      };\n    case 1 /* Degree90 */:\n      return {\n        a: 0,\n        b: scaleFactor,\n        c: scaleFactor,\n        d: 0,\n        e: 0,\n        f: 0\n      };\n    case 2 /* Degree180 */:\n      return {\n        a: -scaleFactor,\n        b: 0,\n        c: 0,\n        d: scaleFactor,\n        e: width * scaleFactor,\n        f: 0\n      };\n    case 3 /* Degree270 */:\n      return {\n        a: 0,\n        b: -scaleFactor,\n        c: -scaleFactor,\n        d: 0,\n        e: height * scaleFactor,\n        f: width * scaleFactor\n      };\n  }\n};\n\n// src/logger.ts\nvar NoopLogger = class {\n  /** {@inheritDoc Logger.debug} */\n  debug() {\n  }\n  /** {@inheritDoc Logger.info} */\n  info() {\n  }\n  /** {@inheritDoc Logger.warn} */\n  warn() {\n  }\n  /** {@inheritDoc Logger.error} */\n  error() {\n  }\n  /** {@inheritDoc Logger.perf} */\n  perf() {\n  }\n};\nvar ConsoleLogger = class {\n  /** {@inheritDoc Logger.debug} */\n  debug(source, category, ...args) {\n    console.debug(`${source}.${category}`, ...args);\n  }\n  /** {@inheritDoc Logger.info} */\n  info(source, category, ...args) {\n    console.info(`${source}.${category}`, ...args);\n  }\n  /** {@inheritDoc Logger.warn} */\n  warn(source, category, ...args) {\n    console.warn(`${source}.${category}`, ...args);\n  }\n  /** {@inheritDoc Logger.error} */\n  error(source, category, ...args) {\n    console.error(`${source}.${category}`, ...args);\n  }\n  /** {@inheritDoc Logger.perf} */\n  perf(source, category, event, phase, ...args) {\n    console.info(`${source}.${category}.${event}.${phase}`, ...args);\n  }\n};\nvar LogLevel = /* @__PURE__ */ ((LogLevel2) => {\n  LogLevel2[LogLevel2[\"Debug\"] = 0] = \"Debug\";\n  LogLevel2[LogLevel2[\"Info\"] = 1] = \"Info\";\n  LogLevel2[LogLevel2[\"Warn\"] = 2] = \"Warn\";\n  LogLevel2[LogLevel2[\"Error\"] = 3] = \"Error\";\n  return LogLevel2;\n})(LogLevel || {});\nvar LevelLogger = class {\n  /**\n   * create new LevelLogger\n   * @param logger - the original logger\n   * @param level - log level that used for filtering, all logs lower than this level will be filtered out\n   */\n  constructor(logger, level) {\n    this.logger = logger;\n    this.level = level;\n  }\n  /** {@inheritDoc Logger.debug} */\n  debug(source, category, ...args) {\n    if (this.level <= 0 /* Debug */) {\n      this.logger.debug(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.info} */\n  info(source, category, ...args) {\n    if (this.level <= 1 /* Info */) {\n      this.logger.info(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.warn} */\n  warn(source, category, ...args) {\n    if (this.level <= 2 /* Warn */) {\n      this.logger.warn(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.error} */\n  error(source, category, ...args) {\n    if (this.level <= 3 /* Error */) {\n      this.logger.error(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.perf} */\n  perf(source, category, event, phase, ...args) {\n    this.logger.perf(source, category, event, phase, ...args);\n  }\n};\nvar PerfLogger = class {\n  /**\n   * create new PerfLogger\n   */\n  constructor() {\n  }\n  /** {@inheritDoc Logger.debug} */\n  debug(source, category, ...args) {\n  }\n  /** {@inheritDoc Logger.info} */\n  info(source, category, ...args) {\n  }\n  /** {@inheritDoc Logger.warn} */\n  warn(source, category, ...args) {\n  }\n  /** {@inheritDoc Logger.error} */\n  error(source, category, ...args) {\n  }\n  /** {@inheritDoc Logger.perf} */\n  perf(source, category, event, phase, identifier, ...args) {\n    switch (phase) {\n      case \"Begin\":\n        window.performance.mark(`${source}.${category}.${event}.${phase}.${identifier}`, {\n          detail: args\n        });\n        break;\n      case \"End\":\n        window.performance.mark(`${source}.${category}.${event}.${phase}.${identifier}`, {\n          detail: args\n        });\n        window.performance.measure(\n          `${source}.${category}.${event}.Measure.${identifier}`,\n          `${source}.${category}.${event}.Begin.${identifier}`,\n          `${source}.${category}.${event}.End.${identifier}`\n        );\n        break;\n    }\n  }\n};\nvar AllLogger = class {\n  /**\n   * create new PerfLogger\n   */\n  constructor(loggers) {\n    this.loggers = loggers;\n  }\n  /** {@inheritDoc Logger.debug} */\n  debug(source, category, ...args) {\n    for (const logger of this.loggers) {\n      logger.debug(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.info} */\n  info(source, category, ...args) {\n    for (const logger of this.loggers) {\n      logger.info(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.warn} */\n  warn(source, category, ...args) {\n    for (const logger of this.loggers) {\n      logger.warn(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.error} */\n  error(source, category, ...args) {\n    for (const logger of this.loggers) {\n      logger.error(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.perf} */\n  perf(source, category, event, phase, ...args) {\n    for (const logger of this.loggers) {\n      logger.perf(source, category, event, phase, ...args);\n    }\n  }\n};\n\n// src/task.ts\nvar TaskStage = /* @__PURE__ */ ((TaskStage2) => {\n  TaskStage2[TaskStage2[\"Pending\"] = 0] = \"Pending\";\n  TaskStage2[TaskStage2[\"Resolved\"] = 1] = \"Resolved\";\n  TaskStage2[TaskStage2[\"Rejected\"] = 2] = \"Rejected\";\n  TaskStage2[TaskStage2[\"Aborted\"] = 3] = \"Aborted\";\n  return TaskStage2;\n})(TaskStage || {});\nvar TaskAbortedError = class extends Error {\n  constructor(reason) {\n    super(`Task aborted: ${JSON.stringify(reason)}`);\n    this.name = \"TaskAbortedError\";\n  }\n};\nvar TaskRejectedError = class extends Error {\n  constructor(reason) {\n    super(`Task rejected: ${JSON.stringify(reason)}`);\n    this.name = \"TaskRejectedError\";\n  }\n};\nvar Task = class _Task {\n  constructor() {\n    this.state = {\n      stage: 0 /* Pending */\n    };\n    /**\n     * callbacks that will be executed when task is resolved\n     */\n    this.resolvedCallbacks = [];\n    /**\n     * callbacks that will be executed when task is rejected\n     */\n    this.rejectedCallbacks = [];\n    /**\n     * Promise that will be resolved when task is settled\n     */\n    this._promise = null;\n  }\n  /**\n   * Convert task to promise\n   * @returns promise that will be resolved when task is settled\n   */\n  toPromise() {\n    if (!this._promise) {\n      this._promise = new Promise((resolve, reject) => {\n        this.wait(\n          (result) => resolve(result),\n          (error) => {\n            if (error.type === \"abort\") {\n              reject(new TaskAbortedError(error.reason));\n            } else {\n              reject(new TaskRejectedError(error.reason));\n            }\n          }\n        );\n      });\n    }\n    return this._promise;\n  }\n  /**\n   * wait for task to be settled\n   * @param resolvedCallback - callback for resolved value\n   * @param rejectedCallback - callback for rejected value\n   */\n  wait(resolvedCallback, rejectedCallback) {\n    switch (this.state.stage) {\n      case 0 /* Pending */:\n        this.resolvedCallbacks.push(resolvedCallback);\n        this.rejectedCallbacks.push(rejectedCallback);\n        break;\n      case 1 /* Resolved */:\n        resolvedCallback(this.state.result);\n        break;\n      case 2 /* Rejected */:\n        rejectedCallback({\n          type: \"reject\",\n          reason: this.state.reason\n        });\n        break;\n      case 3 /* Aborted */:\n        rejectedCallback({\n          type: \"abort\",\n          reason: this.state.reason\n        });\n        break;\n    }\n  }\n  /**\n   * resolve task with specific result\n   * @param result - result value\n   */\n  resolve(result) {\n    if (this.state.stage === 0 /* Pending */) {\n      this.state = {\n        stage: 1 /* Resolved */,\n        result\n      };\n      for (const resolvedCallback of this.resolvedCallbacks) {\n        try {\n          resolvedCallback(result);\n        } catch (e) {\n        }\n      }\n      this.resolvedCallbacks = [];\n      this.rejectedCallbacks = [];\n    }\n  }\n  /**\n   * reject task with specific reason\n   * @param reason - abort reason\n   *\n   */\n  reject(reason) {\n    if (this.state.stage === 0 /* Pending */) {\n      this.state = {\n        stage: 2 /* Rejected */,\n        reason\n      };\n      for (const rejectedCallback of this.rejectedCallbacks) {\n        try {\n          rejectedCallback({\n            type: \"reject\",\n            reason\n          });\n        } catch (e) {\n        }\n      }\n      this.resolvedCallbacks = [];\n      this.rejectedCallbacks = [];\n    }\n  }\n  /**\n   * abort task with specific reason\n   * @param reason - abort reason\n   */\n  abort(reason) {\n    if (this.state.stage === 0 /* Pending */) {\n      this.state = {\n        stage: 3 /* Aborted */,\n        reason\n      };\n      for (const rejectedCallback of this.rejectedCallbacks) {\n        try {\n          rejectedCallback({\n            type: \"abort\",\n            reason\n          });\n        } catch (e) {\n        }\n      }\n      this.resolvedCallbacks = [];\n      this.rejectedCallbacks = [];\n    }\n  }\n  /**\n   * fail task with a TaskError from another task\n   * This is a convenience method for error propagation between tasks\n   * @param error - TaskError from another task\n   */\n  fail(error) {\n    if (error.type === \"abort\") {\n      this.abort(error.reason);\n    } else {\n      this.reject(error.reason);\n    }\n  }\n  /**\n   * Static method to wait for all tasks to resolve\n   * Returns a new task that resolves with an array of all results\n   * Rejects immediately if any task fails\n   *\n   * @param tasks - array of tasks to wait for\n   * @returns new task that resolves when all input tasks resolve\n   * @public\n   */\n  static all(tasks) {\n    const combinedTask = new _Task();\n    if (tasks.length === 0) {\n      combinedTask.resolve([]);\n      return combinedTask;\n    }\n    const results = new Array(tasks.length);\n    let resolvedCount = 0;\n    let isSettled = false;\n    tasks.forEach((task, index) => {\n      task.wait(\n        (result) => {\n          if (isSettled) return;\n          results[index] = result;\n          resolvedCount++;\n          if (resolvedCount === tasks.length) {\n            isSettled = true;\n            combinedTask.resolve(results);\n          }\n        },\n        (error) => {\n          if (isSettled) return;\n          isSettled = true;\n          if (error.type === \"abort\") {\n            combinedTask.abort(error.reason);\n          } else {\n            combinedTask.reject(error.reason);\n          }\n        }\n      );\n    });\n    return combinedTask;\n  }\n  /**\n   * Static method to wait for all tasks to settle (resolve, reject, or abort)\n   * Always resolves with an array of settlement results\n   *\n   * @param tasks - array of tasks to wait for\n   * @returns new task that resolves when all input tasks settle\n   * @public\n   */\n  static allSettled(tasks) {\n    const combinedTask = new _Task();\n    if (tasks.length === 0) {\n      combinedTask.resolve([]);\n      return combinedTask;\n    }\n    const results = new Array(tasks.length);\n    let settledCount = 0;\n    tasks.forEach((task, index) => {\n      task.wait(\n        (result) => {\n          results[index] = { status: \"resolved\", value: result };\n          settledCount++;\n          if (settledCount === tasks.length) {\n            combinedTask.resolve(results);\n          }\n        },\n        (error) => {\n          results[index] = {\n            status: error.type === \"abort\" ? \"aborted\" : \"rejected\",\n            reason: error.reason\n          };\n          settledCount++;\n          if (settledCount === tasks.length) {\n            combinedTask.resolve(results);\n          }\n        }\n      );\n    });\n    return combinedTask;\n  }\n  /**\n   * Static method that resolves/rejects with the first task that settles\n   *\n   * @param tasks - array of tasks to race\n   * @returns new task that settles with the first input task that settles\n   * @public\n   */\n  static race(tasks) {\n    const combinedTask = new _Task();\n    if (tasks.length === 0) {\n      combinedTask.reject(\"No tasks provided\");\n      return combinedTask;\n    }\n    let isSettled = false;\n    tasks.forEach((task) => {\n      task.wait(\n        (result) => {\n          if (isSettled) return;\n          isSettled = true;\n          combinedTask.resolve(result);\n        },\n        (error) => {\n          if (isSettled) return;\n          isSettled = true;\n          if (error.type === \"abort\") {\n            combinedTask.abort(error.reason);\n          } else {\n            combinedTask.reject(error.reason);\n          }\n        }\n      );\n    });\n    return combinedTask;\n  }\n  /**\n   * Utility to track progress of multiple tasks\n   *\n   * @param tasks - array of tasks to track\n   * @param onProgress - callback called when any task completes\n   * @returns new task that resolves when all input tasks resolve\n   * @public\n   */\n  static withProgress(tasks, onProgress) {\n    const combinedTask = _Task.all(tasks);\n    if (onProgress) {\n      let completedCount = 0;\n      tasks.forEach((task) => {\n        task.wait(\n          () => {\n            completedCount++;\n            onProgress(completedCount, tasks.length);\n          },\n          () => {\n            completedCount++;\n            onProgress(completedCount, tasks.length);\n          }\n        );\n      });\n    }\n    return combinedTask;\n  }\n};\n\n// src/pdf.ts\nvar PdfSoftHyphenMarker = \"\\xAD\";\nvar PdfZeroWidthSpace = \"\\u200B\";\nvar PdfWordJoiner = \"\\u2060\";\nvar PdfBomOrZwnbsp = \"\\uFEFF\";\nvar PdfNonCharacterFFFE = \"\\uFFFE\";\nvar PdfNonCharacterFFFF = \"\\uFFFF\";\nvar PdfUnwantedTextMarkers = Object.freeze([\n  PdfSoftHyphenMarker,\n  PdfZeroWidthSpace,\n  PdfWordJoiner,\n  PdfBomOrZwnbsp,\n  PdfNonCharacterFFFE,\n  PdfNonCharacterFFFF\n]);\nvar PdfUnwantedTextRegex = new RegExp(`[${PdfUnwantedTextMarkers.join(\"\")}]`, \"g\");\nfunction stripPdfUnwantedMarkers(text) {\n  return text.replace(PdfUnwantedTextRegex, \"\");\n}\nvar PdfZoomMode = /* @__PURE__ */ ((PdfZoomMode2) => {\n  PdfZoomMode2[PdfZoomMode2[\"Unknown\"] = 0] = \"Unknown\";\n  PdfZoomMode2[PdfZoomMode2[\"XYZ\"] = 1] = \"XYZ\";\n  PdfZoomMode2[PdfZoomMode2[\"FitPage\"] = 2] = \"FitPage\";\n  PdfZoomMode2[PdfZoomMode2[\"FitHorizontal\"] = 3] = \"FitHorizontal\";\n  PdfZoomMode2[PdfZoomMode2[\"FitVertical\"] = 4] = \"FitVertical\";\n  PdfZoomMode2[PdfZoomMode2[\"FitRectangle\"] = 5] = \"FitRectangle\";\n  return PdfZoomMode2;\n})(PdfZoomMode || {});\nvar PdfBlendMode = /* @__PURE__ */ ((PdfBlendMode2) => {\n  PdfBlendMode2[PdfBlendMode2[\"Normal\"] = 0] = \"Normal\";\n  PdfBlendMode2[PdfBlendMode2[\"Multiply\"] = 1] = \"Multiply\";\n  PdfBlendMode2[PdfBlendMode2[\"Screen\"] = 2] = \"Screen\";\n  PdfBlendMode2[PdfBlendMode2[\"Overlay\"] = 3] = \"Overlay\";\n  PdfBlendMode2[PdfBlendMode2[\"Darken\"] = 4] = \"Darken\";\n  PdfBlendMode2[PdfBlendMode2[\"Lighten\"] = 5] = \"Lighten\";\n  PdfBlendMode2[PdfBlendMode2[\"ColorDodge\"] = 6] = \"ColorDodge\";\n  PdfBlendMode2[PdfBlendMode2[\"ColorBurn\"] = 7] = \"ColorBurn\";\n  PdfBlendMode2[PdfBlendMode2[\"HardLight\"] = 8] = \"HardLight\";\n  PdfBlendMode2[PdfBlendMode2[\"SoftLight\"] = 9] = \"SoftLight\";\n  PdfBlendMode2[PdfBlendMode2[\"Difference\"] = 10] = \"Difference\";\n  PdfBlendMode2[PdfBlendMode2[\"Exclusion\"] = 11] = \"Exclusion\";\n  PdfBlendMode2[PdfBlendMode2[\"Hue\"] = 12] = \"Hue\";\n  PdfBlendMode2[PdfBlendMode2[\"Saturation\"] = 13] = \"Saturation\";\n  PdfBlendMode2[PdfBlendMode2[\"Color\"] = 14] = \"Color\";\n  PdfBlendMode2[PdfBlendMode2[\"Luminosity\"] = 15] = \"Luminosity\";\n  return PdfBlendMode2;\n})(PdfBlendMode || {});\nvar MixedBlendMode = Symbol(\"mixed\");\nvar BLEND_MODE_INFOS = Object.freeze([\n  { id: 0 /* Normal */, label: \"Normal\", css: \"normal\" },\n  { id: 1 /* Multiply */, label: \"Multiply\", css: \"multiply\" },\n  { id: 2 /* Screen */, label: \"Screen\", css: \"screen\" },\n  { id: 3 /* Overlay */, label: \"Overlay\", css: \"overlay\" },\n  { id: 4 /* Darken */, label: \"Darken\", css: \"darken\" },\n  { id: 5 /* Lighten */, label: \"Lighten\", css: \"lighten\" },\n  { id: 6 /* ColorDodge */, label: \"Color Dodge\", css: \"color-dodge\" },\n  { id: 7 /* ColorBurn */, label: \"Color Burn\", css: \"color-burn\" },\n  { id: 8 /* HardLight */, label: \"Hard Light\", css: \"hard-light\" },\n  { id: 9 /* SoftLight */, label: \"Soft Light\", css: \"soft-light\" },\n  { id: 10 /* Difference */, label: \"Difference\", css: \"difference\" },\n  { id: 11 /* Exclusion */, label: \"Exclusion\", css: \"exclusion\" },\n  { id: 12 /* Hue */, label: \"Hue\", css: \"hue\" },\n  { id: 13 /* Saturation */, label: \"Saturation\", css: \"saturation\" },\n  { id: 14 /* Color */, label: \"Color\", css: \"color\" },\n  { id: 15 /* Luminosity */, label: \"Luminosity\", css: \"luminosity\" }\n]);\nvar enumToInfo = BLEND_MODE_INFOS.reduce(\n  (m, info) => {\n    m[info.id] = info;\n    return m;\n  },\n  {}\n);\nvar cssToEnum = BLEND_MODE_INFOS.reduce((m, info) => {\n  m[info.css] = info.id;\n  return m;\n}, {});\nfunction getBlendModeInfo(mode) {\n  return enumToInfo[mode] ?? enumToInfo[0 /* Normal */];\n}\nfunction blendModeToCss(mode) {\n  return getBlendModeInfo(mode).css;\n}\nfunction cssToBlendMode(value) {\n  return cssToEnum[value];\n}\nfunction blendModeLabel(mode) {\n  return getBlendModeInfo(mode).label;\n}\nfunction reduceBlendModes(modes) {\n  if (!modes.length) return 0 /* Normal */;\n  const first = modes[0];\n  return modes.every((m) => m === first) ? first : MixedBlendMode;\n}\nvar blendModeSelectOptions = BLEND_MODE_INFOS.map((info) => ({\n  value: info.id,\n  label: info.label\n}));\nfunction uiBlendModeDisplay(value) {\n  return value === MixedBlendMode ? \"(mixed)\" : blendModeLabel(value);\n}\nvar PdfActionType = /* @__PURE__ */ ((PdfActionType2) => {\n  PdfActionType2[PdfActionType2[\"Unsupported\"] = 0] = \"Unsupported\";\n  PdfActionType2[PdfActionType2[\"Goto\"] = 1] = \"Goto\";\n  PdfActionType2[PdfActionType2[\"RemoteGoto\"] = 2] = \"RemoteGoto\";\n  PdfActionType2[PdfActionType2[\"URI\"] = 3] = \"URI\";\n  PdfActionType2[PdfActionType2[\"LaunchAppOrOpenFile\"] = 4] = \"LaunchAppOrOpenFile\";\n  return PdfActionType2;\n})(PdfActionType || {});\nvar PdfAnnotationSubtype = /* @__PURE__ */ ((PdfAnnotationSubtype2) => {\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"TEXT\"] = 1] = \"TEXT\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"LINK\"] = 2] = \"LINK\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"FREETEXT\"] = 3] = \"FREETEXT\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"LINE\"] = 4] = \"LINE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"SQUARE\"] = 5] = \"SQUARE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"CIRCLE\"] = 6] = \"CIRCLE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"POLYGON\"] = 7] = \"POLYGON\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"POLYLINE\"] = 8] = \"POLYLINE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"HIGHLIGHT\"] = 9] = \"HIGHLIGHT\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"UNDERLINE\"] = 10] = \"UNDERLINE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"SQUIGGLY\"] = 11] = \"SQUIGGLY\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"STRIKEOUT\"] = 12] = \"STRIKEOUT\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"STAMP\"] = 13] = \"STAMP\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"CARET\"] = 14] = \"CARET\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"INK\"] = 15] = \"INK\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"POPUP\"] = 16] = \"POPUP\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"FILEATTACHMENT\"] = 17] = \"FILEATTACHMENT\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"SOUND\"] = 18] = \"SOUND\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"MOVIE\"] = 19] = \"MOVIE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"WIDGET\"] = 20] = \"WIDGET\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"SCREEN\"] = 21] = \"SCREEN\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"PRINTERMARK\"] = 22] = \"PRINTERMARK\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"TRAPNET\"] = 23] = \"TRAPNET\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"WATERMARK\"] = 24] = \"WATERMARK\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"THREED\"] = 25] = \"THREED\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"RICHMEDIA\"] = 26] = \"RICHMEDIA\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"XFAWIDGET\"] = 27] = \"XFAWIDGET\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"REDACT\"] = 28] = \"REDACT\";\n  return PdfAnnotationSubtype2;\n})(PdfAnnotationSubtype || {});\nvar PdfAnnotationSubtypeName = {\n  [0 /* UNKNOWN */]: \"unknow\",\n  [1 /* TEXT */]: \"text\",\n  [2 /* LINK */]: \"link\",\n  [3 /* FREETEXT */]: \"freetext\",\n  [4 /* LINE */]: \"line\",\n  [5 /* SQUARE */]: \"square\",\n  [6 /* CIRCLE */]: \"circle\",\n  [7 /* POLYGON */]: \"polygon\",\n  [8 /* POLYLINE */]: \"polyline\",\n  [9 /* HIGHLIGHT */]: \"highlight\",\n  [10 /* UNDERLINE */]: \"underline\",\n  [11 /* SQUIGGLY */]: \"squiggly\",\n  [12 /* STRIKEOUT */]: \"strikeout\",\n  [13 /* STAMP */]: \"stamp\",\n  [14 /* CARET */]: \"caret\",\n  [15 /* INK */]: \"ink\",\n  [16 /* POPUP */]: \"popup\",\n  [17 /* FILEATTACHMENT */]: \"fileattachment\",\n  [18 /* SOUND */]: \"sound\",\n  [19 /* MOVIE */]: \"movie\",\n  [20 /* WIDGET */]: \"widget\",\n  [21 /* SCREEN */]: \"screen\",\n  [22 /* PRINTERMARK */]: \"printermark\",\n  [23 /* TRAPNET */]: \"trapnet\",\n  [24 /* WATERMARK */]: \"watermark\",\n  [25 /* THREED */]: \"threed\",\n  [26 /* RICHMEDIA */]: \"richmedia\",\n  [27 /* XFAWIDGET */]: \"xfawidget\",\n  [28 /* REDACT */]: \"redact\"\n};\nvar PdfAnnotationObjectStatus = /* @__PURE__ */ ((PdfAnnotationObjectStatus2) => {\n  PdfAnnotationObjectStatus2[PdfAnnotationObjectStatus2[\"Created\"] = 0] = \"Created\";\n  PdfAnnotationObjectStatus2[PdfAnnotationObjectStatus2[\"Committed\"] = 1] = \"Committed\";\n  return PdfAnnotationObjectStatus2;\n})(PdfAnnotationObjectStatus || {});\nvar AppearanceMode = /* @__PURE__ */ ((AppearanceMode2) => {\n  AppearanceMode2[AppearanceMode2[\"Normal\"] = 0] = \"Normal\";\n  AppearanceMode2[AppearanceMode2[\"Rollover\"] = 1] = \"Rollover\";\n  AppearanceMode2[AppearanceMode2[\"Down\"] = 2] = \"Down\";\n  return AppearanceMode2;\n})(AppearanceMode || {});\nvar PdfAnnotationState = /* @__PURE__ */ ((PdfAnnotationState2) => {\n  PdfAnnotationState2[\"Marked\"] = \"Marked\";\n  PdfAnnotationState2[\"Unmarked\"] = \"Unmarked\";\n  PdfAnnotationState2[\"Accepted\"] = \"Accepted\";\n  PdfAnnotationState2[\"Rejected\"] = \"Rejected\";\n  PdfAnnotationState2[\"Complete\"] = \"Complete\";\n  PdfAnnotationState2[\"Cancelled\"] = \"Cancelled\";\n  PdfAnnotationState2[\"None\"] = \"None\";\n  return PdfAnnotationState2;\n})(PdfAnnotationState || {});\nvar PdfAnnotationStateModel = /* @__PURE__ */ ((PdfAnnotationStateModel2) => {\n  PdfAnnotationStateModel2[\"Marked\"] = \"Marked\";\n  PdfAnnotationStateModel2[\"Reviewed\"] = \"Reviewed\";\n  return PdfAnnotationStateModel2;\n})(PdfAnnotationStateModel || {});\nvar PDF_FORM_FIELD_TYPE = /* @__PURE__ */ ((PDF_FORM_FIELD_TYPE2) => {\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"PUSHBUTTON\"] = 1] = \"PUSHBUTTON\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"CHECKBOX\"] = 2] = \"CHECKBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"RADIOBUTTON\"] = 3] = \"RADIOBUTTON\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"COMBOBOX\"] = 4] = \"COMBOBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"LISTBOX\"] = 5] = \"LISTBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"TEXTFIELD\"] = 6] = \"TEXTFIELD\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"SIGNATURE\"] = 7] = \"SIGNATURE\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA\"] = 8] = \"XFA\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_CHECKBOX\"] = 9] = \"XFA_CHECKBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_COMBOBOX\"] = 10] = \"XFA_COMBOBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_IMAGEFIELD\"] = 11] = \"XFA_IMAGEFIELD\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_LISTBOX\"] = 12] = \"XFA_LISTBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_PUSHBUTTON\"] = 13] = \"XFA_PUSHBUTTON\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_SIGNATURE\"] = 14] = \"XFA_SIGNATURE\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_TEXTFIELD\"] = 15] = \"XFA_TEXTFIELD\";\n  return PDF_FORM_FIELD_TYPE2;\n})(PDF_FORM_FIELD_TYPE || {});\nvar PdfAnnotationColorType = /* @__PURE__ */ ((PdfAnnotationColorType2) => {\n  PdfAnnotationColorType2[PdfAnnotationColorType2[\"Color\"] = 0] = \"Color\";\n  PdfAnnotationColorType2[PdfAnnotationColorType2[\"InteriorColor\"] = 1] = \"InteriorColor\";\n  return PdfAnnotationColorType2;\n})(PdfAnnotationColorType || {});\nvar PdfAnnotationBorderStyle = /* @__PURE__ */ ((PdfAnnotationBorderStyle2) => {\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"SOLID\"] = 1] = \"SOLID\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"DASHED\"] = 2] = \"DASHED\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"BEVELED\"] = 3] = \"BEVELED\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"INSET\"] = 4] = \"INSET\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"UNDERLINE\"] = 5] = \"UNDERLINE\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"CLOUDY\"] = 6] = \"CLOUDY\";\n  return PdfAnnotationBorderStyle2;\n})(PdfAnnotationBorderStyle || {});\nvar PdfAnnotationFlags = /* @__PURE__ */ ((PdfAnnotationFlags2) => {\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"NONE\"] = 0] = \"NONE\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"INVISIBLE\"] = 1] = \"INVISIBLE\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"HIDDEN\"] = 2] = \"HIDDEN\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"PRINT\"] = 4] = \"PRINT\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"NO_ZOOM\"] = 8] = \"NO_ZOOM\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"NO_ROTATE\"] = 16] = \"NO_ROTATE\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"NO_VIEW\"] = 32] = \"NO_VIEW\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"READ_ONLY\"] = 64] = \"READ_ONLY\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"LOCKED\"] = 128] = \"LOCKED\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"TOGGLE_NOVIEW\"] = 256] = \"TOGGLE_NOVIEW\";\n  return PdfAnnotationFlags2;\n})(PdfAnnotationFlags || {});\nvar PDF_FORM_FIELD_FLAG = /* @__PURE__ */ ((PDF_FORM_FIELD_FLAG2) => {\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"NONE\"] = 0] = \"NONE\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"READONLY\"] = 1] = \"READONLY\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"REQUIRED\"] = 2] = \"REQUIRED\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"NOEXPORT\"] = 4] = \"NOEXPORT\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"TEXT_MULTIPLINE\"] = 4096] = \"TEXT_MULTIPLINE\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"TEXT_PASSWORD\"] = 8192] = \"TEXT_PASSWORD\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"CHOICE_COMBO\"] = 131072] = \"CHOICE_COMBO\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"CHOICE_EDIT\"] = 262144] = \"CHOICE_EDIT\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"CHOICE_MULTL_SELECT\"] = 2097152] = \"CHOICE_MULTL_SELECT\";\n  return PDF_FORM_FIELD_FLAG2;\n})(PDF_FORM_FIELD_FLAG || {});\nvar PdfPageObjectType = /* @__PURE__ */ ((PdfPageObjectType2) => {\n  PdfPageObjectType2[PdfPageObjectType2[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  PdfPageObjectType2[PdfPageObjectType2[\"TEXT\"] = 1] = \"TEXT\";\n  PdfPageObjectType2[PdfPageObjectType2[\"PATH\"] = 2] = \"PATH\";\n  PdfPageObjectType2[PdfPageObjectType2[\"IMAGE\"] = 3] = \"IMAGE\";\n  PdfPageObjectType2[PdfPageObjectType2[\"SHADING\"] = 4] = \"SHADING\";\n  PdfPageObjectType2[PdfPageObjectType2[\"FORM\"] = 5] = \"FORM\";\n  return PdfPageObjectType2;\n})(PdfPageObjectType || {});\nvar PdfAnnotationFlagName = Object.freeze({\n  [1 /* INVISIBLE */]: \"invisible\",\n  [2 /* HIDDEN */]: \"hidden\",\n  [4 /* PRINT */]: \"print\",\n  [8 /* NO_ZOOM */]: \"noZoom\",\n  [16 /* NO_ROTATE */]: \"noRotate\",\n  [32 /* NO_VIEW */]: \"noView\",\n  [64 /* READ_ONLY */]: \"readOnly\",\n  [128 /* LOCKED */]: \"locked\",\n  [256 /* TOGGLE_NOVIEW */]: \"toggleNoView\"\n});\nvar PdfAnnotationFlagValue = Object.entries(\n  PdfAnnotationFlagName\n).reduce(\n  (acc, [bit, name]) => {\n    acc[name] = Number(bit);\n    return acc;\n  },\n  {}\n);\nfunction flagsToNames(raw) {\n  return Object.keys(PdfAnnotationFlagName).filter((flag) => (raw & flag) !== 0).map((flag) => PdfAnnotationFlagName[flag]);\n}\nfunction namesToFlags(names) {\n  return names.reduce(\n    (mask, name) => mask | PdfAnnotationFlagValue[name],\n    0 /* NONE */\n  );\n}\nvar PdfSegmentObjectType = /* @__PURE__ */ ((PdfSegmentObjectType2) => {\n  PdfSegmentObjectType2[PdfSegmentObjectType2[\"UNKNOWN\"] = -1] = \"UNKNOWN\";\n  PdfSegmentObjectType2[PdfSegmentObjectType2[\"LINETO\"] = 0] = \"LINETO\";\n  PdfSegmentObjectType2[PdfSegmentObjectType2[\"BEZIERTO\"] = 1] = \"BEZIERTO\";\n  PdfSegmentObjectType2[PdfSegmentObjectType2[\"MOVETO\"] = 2] = \"MOVETO\";\n  return PdfSegmentObjectType2;\n})(PdfSegmentObjectType || {});\nvar PdfEngineFeature = /* @__PURE__ */ ((PdfEngineFeature2) => {\n  PdfEngineFeature2[PdfEngineFeature2[\"RenderPage\"] = 0] = \"RenderPage\";\n  PdfEngineFeature2[PdfEngineFeature2[\"RenderPageRect\"] = 1] = \"RenderPageRect\";\n  PdfEngineFeature2[PdfEngineFeature2[\"Thumbnails\"] = 2] = \"Thumbnails\";\n  PdfEngineFeature2[PdfEngineFeature2[\"Bookmarks\"] = 3] = \"Bookmarks\";\n  PdfEngineFeature2[PdfEngineFeature2[\"Annotations\"] = 4] = \"Annotations\";\n  return PdfEngineFeature2;\n})(PdfEngineFeature || {});\nvar PdfEngineOperation = /* @__PURE__ */ ((PdfEngineOperation2) => {\n  PdfEngineOperation2[PdfEngineOperation2[\"Create\"] = 0] = \"Create\";\n  PdfEngineOperation2[PdfEngineOperation2[\"Read\"] = 1] = \"Read\";\n  PdfEngineOperation2[PdfEngineOperation2[\"Update\"] = 2] = \"Update\";\n  PdfEngineOperation2[PdfEngineOperation2[\"Delete\"] = 3] = \"Delete\";\n  return PdfEngineOperation2;\n})(PdfEngineOperation || {});\nvar MatchFlag = /* @__PURE__ */ ((MatchFlag2) => {\n  MatchFlag2[MatchFlag2[\"None\"] = 0] = \"None\";\n  MatchFlag2[MatchFlag2[\"MatchCase\"] = 1] = \"MatchCase\";\n  MatchFlag2[MatchFlag2[\"MatchWholeWord\"] = 2] = \"MatchWholeWord\";\n  MatchFlag2[MatchFlag2[\"MatchConsecutive\"] = 4] = \"MatchConsecutive\";\n  return MatchFlag2;\n})(MatchFlag || {});\nfunction unionFlags(flags) {\n  return flags.reduce((flag, currFlag) => {\n    return flag | currFlag;\n  }, 0 /* None */);\n}\nfunction compareSearchTarget(targetA, targetB) {\n  const flagA = unionFlags(targetA.flags);\n  const flagB = unionFlags(targetB.flags);\n  return flagA === flagB && targetA.keyword === targetB.keyword;\n}\nvar PdfPermission = /* @__PURE__ */ ((PdfPermission2) => {\n  PdfPermission2[PdfPermission2[\"PrintDocument\"] = 8] = \"PrintDocument\";\n  PdfPermission2[PdfPermission2[\"ModifyContent\"] = 16] = \"ModifyContent\";\n  PdfPermission2[PdfPermission2[\"CopyOrExtract\"] = 32] = \"CopyOrExtract\";\n  PdfPermission2[PdfPermission2[\"AddOrModifyTextAnnot\"] = 64] = \"AddOrModifyTextAnnot\";\n  PdfPermission2[PdfPermission2[\"FillInExistingForm\"] = 512] = \"FillInExistingForm\";\n  PdfPermission2[PdfPermission2[\"ExtractTextOrGraphics\"] = 1024] = \"ExtractTextOrGraphics\";\n  PdfPermission2[PdfPermission2[\"AssembleDocument\"] = 2048] = \"AssembleDocument\";\n  PdfPermission2[PdfPermission2[\"PrintHighQuality\"] = 4096] = \"PrintHighQuality\";\n  return PdfPermission2;\n})(PdfPermission || {});\nvar PdfPageFlattenFlag = /* @__PURE__ */ ((PdfPageFlattenFlag2) => {\n  PdfPageFlattenFlag2[PdfPageFlattenFlag2[\"Display\"] = 0] = \"Display\";\n  PdfPageFlattenFlag2[PdfPageFlattenFlag2[\"Print\"] = 1] = \"Print\";\n  return PdfPageFlattenFlag2;\n})(PdfPageFlattenFlag || {});\nvar PdfPageFlattenResult = /* @__PURE__ */ ((PdfPageFlattenResult2) => {\n  PdfPageFlattenResult2[PdfPageFlattenResult2[\"Fail\"] = 0] = \"Fail\";\n  PdfPageFlattenResult2[PdfPageFlattenResult2[\"Success\"] = 1] = \"Success\";\n  PdfPageFlattenResult2[PdfPageFlattenResult2[\"NothingToDo\"] = 2] = \"NothingToDo\";\n  return PdfPageFlattenResult2;\n})(PdfPageFlattenResult || {});\nvar PdfErrorCode = /* @__PURE__ */ ((PdfErrorCode2) => {\n  PdfErrorCode2[PdfErrorCode2[\"Ok\"] = 0] = \"Ok\";\n  PdfErrorCode2[PdfErrorCode2[\"Unknown\"] = 1] = \"Unknown\";\n  PdfErrorCode2[PdfErrorCode2[\"NotFound\"] = 2] = \"NotFound\";\n  PdfErrorCode2[PdfErrorCode2[\"WrongFormat\"] = 3] = \"WrongFormat\";\n  PdfErrorCode2[PdfErrorCode2[\"Password\"] = 4] = \"Password\";\n  PdfErrorCode2[PdfErrorCode2[\"Security\"] = 5] = \"Security\";\n  PdfErrorCode2[PdfErrorCode2[\"PageError\"] = 6] = \"PageError\";\n  PdfErrorCode2[PdfErrorCode2[\"XFALoad\"] = 7] = \"XFALoad\";\n  PdfErrorCode2[PdfErrorCode2[\"XFALayout\"] = 8] = \"XFALayout\";\n  PdfErrorCode2[PdfErrorCode2[\"Cancelled\"] = 9] = \"Cancelled\";\n  PdfErrorCode2[PdfErrorCode2[\"Initialization\"] = 10] = \"Initialization\";\n  PdfErrorCode2[PdfErrorCode2[\"NotReady\"] = 11] = \"NotReady\";\n  PdfErrorCode2[PdfErrorCode2[\"NotSupport\"] = 12] = \"NotSupport\";\n  PdfErrorCode2[PdfErrorCode2[\"LoadDoc\"] = 13] = \"LoadDoc\";\n  PdfErrorCode2[PdfErrorCode2[\"DocNotOpen\"] = 14] = \"DocNotOpen\";\n  PdfErrorCode2[PdfErrorCode2[\"CantCloseDoc\"] = 15] = \"CantCloseDoc\";\n  PdfErrorCode2[PdfErrorCode2[\"CantCreateNewDoc\"] = 16] = \"CantCreateNewDoc\";\n  PdfErrorCode2[PdfErrorCode2[\"CantImportPages\"] = 17] = \"CantImportPages\";\n  PdfErrorCode2[PdfErrorCode2[\"CantCreateAnnot\"] = 18] = \"CantCreateAnnot\";\n  PdfErrorCode2[PdfErrorCode2[\"CantSetAnnotRect\"] = 19] = \"CantSetAnnotRect\";\n  PdfErrorCode2[PdfErrorCode2[\"CantSetAnnotContent\"] = 20] = \"CantSetAnnotContent\";\n  PdfErrorCode2[PdfErrorCode2[\"CantRemoveInkList\"] = 21] = \"CantRemoveInkList\";\n  PdfErrorCode2[PdfErrorCode2[\"CantAddInkStoke\"] = 22] = \"CantAddInkStoke\";\n  PdfErrorCode2[PdfErrorCode2[\"CantReadAttachmentSize\"] = 23] = \"CantReadAttachmentSize\";\n  PdfErrorCode2[PdfErrorCode2[\"CantReadAttachmentContent\"] = 24] = \"CantReadAttachmentContent\";\n  PdfErrorCode2[PdfErrorCode2[\"CantFocusAnnot\"] = 25] = \"CantFocusAnnot\";\n  PdfErrorCode2[PdfErrorCode2[\"CantSelectText\"] = 26] = \"CantSelectText\";\n  PdfErrorCode2[PdfErrorCode2[\"CantSelectOption\"] = 27] = \"CantSelectOption\";\n  PdfErrorCode2[PdfErrorCode2[\"CantCheckField\"] = 28] = \"CantCheckField\";\n  return PdfErrorCode2;\n})(PdfErrorCode || {});\nvar PdfTaskHelper = class {\n  /**\n   * Create a task\n   * @returns new task\n   */\n  static create() {\n    return new Task();\n  }\n  /**\n   * Create a task that has been resolved with value\n   * @param result - resolved value\n   * @returns resolved task\n   */\n  static resolve(result) {\n    const task = new Task();\n    task.resolve(result);\n    return task;\n  }\n  /**\n   * Create a task that has been rejected with error\n   * @param reason - rejected error\n   * @returns rejected task\n   */\n  static reject(reason) {\n    const task = new Task();\n    task.reject(reason);\n    return task;\n  }\n  /**\n   * Create a task that has been aborted with error\n   * @param reason - aborted error\n   * @returns aborted task\n   */\n  static abort(reason) {\n    const task = new Task();\n    task.reject(reason);\n    return task;\n  }\n};\n\n// src/color.ts\nfunction pdfAlphaColorToWebAlphaColor(c) {\n  const clamp = (n) => Math.max(0, Math.min(255, n));\n  const toHex = (n) => clamp(n).toString(16).padStart(2, \"0\");\n  const color = `#${toHex(c.red)}${toHex(c.green)}${toHex(c.blue)}`;\n  const opacity = clamp(c.alpha) / 255;\n  return { color, opacity };\n}\nfunction webAlphaColorToPdfAlphaColor({ color, opacity }) {\n  if (/^#?[0-9a-f]{3}$/i.test(color)) {\n    color = color.replace(/^#?([0-9a-f])([0-9a-f])([0-9a-f])$/i, \"#$1$1$2$2$3$3\").toLowerCase();\n  }\n  const [, r, g, b] = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(color) ?? (() => {\n    throw new Error(`Invalid hex colour: \\u201C${color}\\u201D`);\n  })();\n  const clamp = (n, hi = 255) => Math.max(0, Math.min(hi, n));\n  return {\n    red: parseInt(r, 16),\n    green: parseInt(g, 16),\n    blue: parseInt(b, 16),\n    alpha: clamp(Math.round(opacity * 255))\n  };\n}\n\n// src/date.ts\nfunction pdfDateToDate(pdf) {\n  if (!pdf?.startsWith(\"D:\") || pdf.length < 16) return;\n  const y = +pdf.slice(2, 6);\n  const mo = +pdf.slice(6, 8) - 1;\n  const d = +pdf.slice(8, 10);\n  const H = +pdf.slice(10, 12);\n  const M = +pdf.slice(12, 14);\n  const S = +pdf.slice(14, 16);\n  return new Date(Date.UTC(y, mo, d, H, M, S));\n}\nfunction dateToPdfDate(date = /* @__PURE__ */ new Date()) {\n  const z = (n, len = 2) => n.toString().padStart(len, \"0\");\n  const YYYY = date.getUTCFullYear();\n  const MM = z(date.getUTCMonth() + 1);\n  const DD = z(date.getUTCDate());\n  const HH = z(date.getUTCHours());\n  const mm = z(date.getUTCMinutes());\n  const SS = z(date.getUTCSeconds());\n  return `D:${YYYY}${MM}${DD}${HH}${mm}${SS}`;\n}\n\n// src/index.ts\nfunction ignore() {\n}\nexport {\n  AllLogger,\n  AppearanceMode,\n  ConsoleLogger,\n  LevelLogger,\n  LogLevel,\n  MatchFlag,\n  MixedBlendMode,\n  NoopLogger,\n  PDF_FORM_FIELD_FLAG,\n  PDF_FORM_FIELD_TYPE,\n  PdfActionType,\n  PdfAnnotationBorderStyle,\n  PdfAnnotationColorType,\n  PdfAnnotationFlagName,\n  PdfAnnotationFlags,\n  PdfAnnotationObjectStatus,\n  PdfAnnotationState,\n  PdfAnnotationStateModel,\n  PdfAnnotationSubtype,\n  PdfAnnotationSubtypeName,\n  PdfBlendMode,\n  PdfBomOrZwnbsp,\n  PdfEngineFeature,\n  PdfEngineOperation,\n  PdfErrorCode,\n  PdfNonCharacterFFFE,\n  PdfNonCharacterFFFF,\n  PdfPageFlattenFlag,\n  PdfPageFlattenResult,\n  PdfPageObjectType,\n  PdfPermission,\n  PdfSegmentObjectType,\n  PdfSoftHyphenMarker,\n  PdfTaskHelper,\n  PdfUnwantedTextMarkers,\n  PdfUnwantedTextRegex,\n  PdfWordJoiner,\n  PdfZeroWidthSpace,\n  PdfZoomMode,\n  PerfLogger,\n  Rotation,\n  Task,\n  TaskAbortedError,\n  TaskRejectedError,\n  TaskStage,\n  blendModeLabel,\n  blendModeSelectOptions,\n  blendModeToCss,\n  boundingRect,\n  calculateAngle,\n  calculateDegree,\n  compareSearchTarget,\n  cssToBlendMode,\n  dateToPdfDate,\n  flagsToNames,\n  getBlendModeInfo,\n  ignore,\n  makeMatrix,\n  namesToFlags,\n  pdfAlphaColorToWebAlphaColor,\n  pdfDateToDate,\n  quadToRect,\n  rectToQuad,\n  reduceBlendModes,\n  restoreOffset,\n  restorePosition,\n  restoreRect,\n  rotatePosition,\n  rotateRect,\n  scalePosition,\n  scaleRect,\n  stripPdfUnwantedMarkers,\n  swap,\n  toIntPos,\n  toIntRect,\n  toIntSize,\n  transformPosition,\n  transformRect,\n  transformSize,\n  uiBlendModeDisplay,\n  unionFlags,\n  webAlphaColorToPdfAlphaColor\n};\n//# sourceMappingURL=index.js.map","import { PdfDocumentObject, PdfPageObject, Rotation } from '@embedpdf/models';\nimport { PluginRegistryConfig } from '../types/plugin';\n\nexport interface CoreState {\n  scale: number;\n  rotation: Rotation;\n  document: PdfDocumentObject | null;\n  pages: PdfPageObject[][];\n  loading: boolean;\n  error: string | null;\n}\n\nexport const initialCoreState: (config?: PluginRegistryConfig) => CoreState = (config) => ({\n  scale: config?.scale ?? 1,\n  rotation: config?.rotation ?? Rotation.Degree0,\n  document: null,\n  pages: [],\n  loading: false,\n  error: null,\n});\n","import { Reducer } from './types';\nimport { CoreState } from './initial-state';\nimport {\n  CoreAction,\n  LOAD_DOCUMENT,\n  SET_DOCUMENT,\n  SET_DOCUMENT_ERROR,\n  SET_PAGES,\n  SET_ROTATION,\n  SET_SCALE,\n} from './actions';\n\nexport const coreReducer: Reducer<CoreState, CoreAction> = (state, action): CoreState => {\n  switch (action.type) {\n    case LOAD_DOCUMENT:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n\n    case SET_DOCUMENT:\n      return {\n        ...state,\n        document: action.payload,\n        pages: action.payload.pages.map((page) => [page]),\n        loading: false,\n        error: null,\n      };\n\n    case SET_ROTATION:\n      return {\n        ...state,\n        rotation: action.payload,\n      };\n\n    case SET_PAGES:\n      return {\n        ...state,\n        pages: action.payload,\n      };\n\n    case SET_DOCUMENT_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n\n    case SET_SCALE:\n      return {\n        ...state,\n        scale: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { DependencyResolver } from '../utils/dependency-resolver';\nimport {\n  IPlugin,\n  PluginBatchRegistration,\n  PluginManifest,\n  PluginStatus,\n  PluginPackage,\n  PluginRegistryConfig,\n} from '../types/plugin';\nimport {\n  PluginRegistrationError,\n  PluginNotFoundError,\n  CircularDependencyError,\n  CapabilityNotFoundError,\n  PluginConfigurationError,\n} from '../types/errors';\nimport { ignore, PdfEngine, Rotation } from '@embedpdf/models';\nimport { Action, CoreState, Store, initialCoreState, Reducer } from '../store';\nimport { CoreAction } from '../store/actions';\nimport { coreReducer } from '../store/reducer';\n\n// Define a more flexible generic type for plugin registrations\ninterface PluginRegistration {\n  // Use existential types for the plugin package to allow accepting any plugin type\n  package: PluginPackage<any, any, any, any>;\n  config?: any;\n}\n\nexport class PluginRegistry {\n  private plugins: Map<string, IPlugin> = new Map();\n  private manifests: Map<string, PluginManifest> = new Map();\n  private capabilities: Map<string, string> = new Map(); // capability -> pluginId\n  private status: Map<string, PluginStatus> = new Map();\n  private resolver: DependencyResolver;\n  private configurations: Map<string, unknown> = new Map();\n  private engine: PdfEngine;\n  private engineInitialized = false;\n  private store: Store<CoreState, CoreAction>;\n  private initPromise: Promise<void> | null = null;\n\n  private pendingRegistrations: PluginRegistration[] = [];\n  private processingRegistrations: PluginRegistration[] = [];\n  private initialized = false;\n  private isInitializing = false;\n  private initialCoreState: CoreState;\n  private pluginsReadyPromise: Promise<void> | null = null;\n  private destroyed = false;\n\n  constructor(engine: PdfEngine, config?: PluginRegistryConfig) {\n    this.resolver = new DependencyResolver();\n    this.engine = engine;\n    this.initialCoreState = initialCoreState(config);\n    this.store = new Store<CoreState, CoreAction>(coreReducer, this.initialCoreState);\n  }\n\n  /**\n   * Ensure engine is initialized before proceeding\n   */\n  private async ensureEngineInitialized(): Promise<void> {\n    if (this.engineInitialized) {\n      return;\n    }\n\n    if (this.engine.initialize) {\n      const task = this.engine.initialize();\n      await task.toPromise();\n      this.engineInitialized = true;\n    } else {\n      this.engineInitialized = true;\n    }\n  }\n\n  /**\n   * Register a plugin without initializing it\n   */\n  registerPlugin<\n    TPlugin extends IPlugin<TConfig>,\n    TConfig = unknown,\n    TState = unknown,\n    TAction extends Action = Action,\n  >(\n    pluginPackage: PluginPackage<TPlugin, TConfig, TState, TAction>,\n    config?: Partial<TConfig>,\n  ): void {\n    if (this.initialized && !this.isInitializing) {\n      throw new PluginRegistrationError('Cannot register plugins after initialization');\n    }\n\n    this.validateManifest(pluginPackage.manifest);\n\n    // Use appropriate typing for store methods\n    this.store.addPluginReducer(\n      pluginPackage.manifest.id,\n      // We need one type assertion here since we can't fully reconcile TAction with Action\n      // due to TypeScript's type system limitations with generic variance\n      pluginPackage.reducer as Reducer<TState, Action>,\n      'function' === typeof pluginPackage.initialState\n        ? (pluginPackage.initialState as (coreState: CoreState, config: TConfig) => TState)(\n            this.initialCoreState,\n            {\n              ...pluginPackage.manifest.defaultConfig,\n              ...config,\n            },\n          )\n        : pluginPackage.initialState,\n    );\n\n    this.pendingRegistrations.push({\n      package: pluginPackage,\n      config,\n    });\n  }\n\n  /**\n   * Get the central store instance\n   */\n  getStore(): Store<CoreState, CoreAction> {\n    return this.store;\n  }\n\n  /**\n   * Get the engine instance\n   */\n  getEngine(): PdfEngine {\n    return this.engine;\n  }\n\n  /**\n   * Get a promise that resolves when all plugins are ready\n   */\n  public pluginsReady(): Promise<void> {\n    // Re-use the same promise every time it’s asked for\n    if (this.pluginsReadyPromise) {\n      return this.pluginsReadyPromise;\n    }\n\n    // Build the promise the *first* time it’s requested\n    this.pluginsReadyPromise = (async () => {\n      // 1. Wait until the registry itself has finished initialising\n      if (!this.initialized) {\n        await this.initialize();\n      }\n\n      // 2. Wait for every plugin’s ready() promise (if it has one)\n      const readyPromises = Array.from(this.plugins.values()).map((p) =>\n        typeof p.ready === 'function' ? p.ready() : Promise.resolve(),\n      );\n\n      await Promise.all(readyPromises); // resolves when the slowest is done\n    })();\n\n    return this.pluginsReadyPromise;\n  }\n\n  /**\n   * INITIALISE THE REGISTRY – runs once no-matter-how-many calls   *\n   */\n  async initialize(): Promise<void> {\n    if (this.destroyed) {\n      throw new PluginRegistrationError('Registry has been destroyed');\n    }\n\n    // If an initialisation is already in-flight (or finished)\n    // return the very same promise so callers can await it.\n    if (this.initPromise) {\n      return this.initPromise;\n    }\n\n    // Wrap your existing body in a single promise and cache it\n    this.initPromise = (async () => {\n      if (this.initialized) {\n        throw new PluginRegistrationError('Registry is already initialized');\n      }\n\n      this.isInitializing = true;\n\n      try {\n        /* ---------------- original body starts ------------------ */\n        await this.ensureEngineInitialized();\n        // Check if destroyed after engine initialization\n        if (this.destroyed) {\n          return;\n        }\n\n        while (this.pendingRegistrations.length > 0) {\n          // Check if destroyed before processing each batch\n          if (this.destroyed) {\n            return;\n          }\n          this.processingRegistrations = [...this.pendingRegistrations];\n          this.pendingRegistrations = [];\n\n          for (const reg of this.processingRegistrations) {\n            const dependsOn = new Set<string>();\n            const allDeps = [...reg.package.manifest.requires, ...reg.package.manifest.optional];\n            for (const cap of allDeps) {\n              const provider = this.processingRegistrations.find((r) =>\n                r.package.manifest.provides.includes(cap),\n              );\n              if (provider) dependsOn.add(provider.package.manifest.id);\n            }\n            this.resolver.addNode(reg.package.manifest.id, [...dependsOn]);\n          }\n\n          const loadOrder = this.resolver.resolveLoadOrder();\n          for (const id of loadOrder) {\n            const reg = this.processingRegistrations.find((r) => r.package.manifest.id === id)!;\n            await this.initializePlugin(reg.package.manifest, reg.package.create, reg.config);\n          }\n\n          this.processingRegistrations = [];\n          this.resolver = new DependencyResolver();\n        }\n\n        for (const plugin of this.plugins.values()) {\n          await plugin.postInitialize?.().catch((e) => {\n            console.error(`Error in postInitialize for plugin ${plugin.id}`, e);\n            this.status.set(plugin.id, 'error');\n          });\n        }\n\n        this.initialized = true;\n        /* ----------------- original body ends ------------------- */\n      } catch (err) {\n        if (err instanceof Error) {\n          throw new CircularDependencyError(\n            `Failed to resolve plugin dependencies: ${err.message}`,\n          );\n        }\n        throw err;\n      } finally {\n        this.isInitializing = false;\n      }\n    })();\n\n    return this.initPromise;\n  }\n\n  /**\n   * Initialize a single plugin with all necessary checks\n   */\n  private async initializePlugin<TConfig>(\n    manifest: PluginManifest<TConfig>,\n    packageCreator: (\n      registry: PluginRegistry,\n      engine: PdfEngine,\n      config?: TConfig,\n    ) => IPlugin<TConfig>,\n    config?: Partial<TConfig>,\n  ): Promise<void> {\n    const finalConfig = {\n      ...manifest.defaultConfig,\n      ...config,\n    };\n\n    this.validateConfig(manifest.id, finalConfig, manifest.defaultConfig);\n\n    // Create plugin instance during initialization\n    const plugin = packageCreator(this, this.engine, finalConfig);\n    this.validatePlugin(plugin);\n\n    // Verify all required capabilities are available\n    for (const capability of manifest.requires) {\n      if (!this.capabilities.has(capability)) {\n        throw new PluginRegistrationError(\n          `Missing required capability: ${capability} for plugin ${manifest.id}`,\n        );\n      }\n    }\n\n    // Optional capabilities can be null, so we don't throw errors for them\n    for (const capability of manifest.optional) {\n      if (this.capabilities.has(capability)) {\n        // Optional capability is available, but we don't require it\n        console.debug(`Optional capability ${capability} is available for plugin ${manifest.id}`);\n      }\n    }\n\n    console.log('initializePlugin', manifest.id, manifest.provides);\n\n    // Register provided capabilities\n    for (const capability of manifest.provides) {\n      if (this.capabilities.has(capability)) {\n        throw new PluginRegistrationError(\n          `Capability ${capability} is already provided by plugin ${this.capabilities.get(capability)}`,\n        );\n      }\n      this.capabilities.set(capability, manifest.id);\n    }\n\n    // Store plugin and manifest\n    this.plugins.set(manifest.id, plugin);\n    this.manifests.set(manifest.id, manifest);\n    this.status.set(manifest.id, 'registered');\n    this.configurations.set(manifest.id, finalConfig);\n\n    try {\n      if (plugin.initialize) {\n        await plugin.initialize(finalConfig);\n      }\n      this.status.set(manifest.id, 'active');\n    } catch (error) {\n      // Cleanup on initialization failure\n      this.plugins.delete(manifest.id);\n      this.manifests.delete(manifest.id);\n      console.log('initializePlugin failed', manifest.id, manifest.provides);\n      manifest.provides.forEach((cap) => this.capabilities.delete(cap));\n      throw error;\n    }\n  }\n\n  getPluginConfig<TConfig>(pluginId: string): TConfig {\n    const config = this.configurations.get(pluginId);\n    if (!config) {\n      throw new PluginNotFoundError(`Configuration for plugin ${pluginId} not found`);\n    }\n    return config as TConfig;\n  }\n\n  private validateConfig(pluginId: string, config: unknown, defaultConfig: unknown): void {\n    // Check all required fields exist\n    const requiredKeys = Object.keys(defaultConfig as object);\n    const missingKeys = requiredKeys.filter((key) => !(config as object).hasOwnProperty(key));\n\n    if (missingKeys.length > 0) {\n      throw new PluginConfigurationError(\n        `Missing required configuration keys for plugin ${pluginId}: ${missingKeys.join(', ')}`,\n      );\n    }\n\n    // You could add more validation here:\n    // - Type checking\n    // - Value range validation\n    // - Format validation\n    // etc.\n  }\n\n  async updatePluginConfig<TConfig>(pluginId: string, config: Partial<TConfig>): Promise<void> {\n    const plugin = this.getPlugin(pluginId);\n\n    if (!plugin) {\n      throw new PluginNotFoundError(`Plugin ${pluginId} not found`);\n    }\n\n    const manifest = this.manifests.get(pluginId);\n    const currentConfig = this.configurations.get(pluginId);\n\n    if (!manifest || !currentConfig) {\n      throw new PluginNotFoundError(`Plugin ${pluginId} not found`);\n    }\n\n    // Merge new config with current\n    const newConfig = {\n      ...currentConfig,\n      ...config,\n    };\n\n    // Validate new configuration\n    this.validateConfig(pluginId, newConfig, manifest.defaultConfig);\n\n    // Store new configuration\n    this.configurations.set(pluginId, newConfig);\n\n    // Reinitialize plugin if needed\n    if (plugin.initialize) {\n      await plugin.initialize(newConfig);\n    }\n  }\n\n  /**\n   * Register multiple plugins at once\n   */\n  registerPluginBatch(registrations: PluginBatchRegistration<IPlugin<any>, any, any, any>[]): void {\n    for (const reg of registrations) {\n      this.registerPlugin(reg.package, reg.config);\n    }\n  }\n\n  /**\n   * Unregister a plugin\n   */\n  async unregisterPlugin(pluginId: string): Promise<void> {\n    const plugin = this.plugins.get(pluginId);\n    if (!plugin) {\n      throw new PluginNotFoundError(`Plugin ${pluginId} is not registered`);\n    }\n\n    const manifest = this.manifests.get(pluginId);\n    if (!manifest) {\n      throw new PluginNotFoundError(`Manifest for plugin ${pluginId} not found`);\n    }\n\n    // Check if any other plugins depend on this one\n    for (const [otherId, otherManifest] of this.manifests.entries()) {\n      if (otherId === pluginId) continue;\n\n      const dependsOnThis = [...otherManifest.requires, ...otherManifest.optional].some((cap) =>\n        manifest.provides.includes(cap),\n      );\n\n      if (dependsOnThis) {\n        throw new PluginRegistrationError(\n          `Cannot unregister plugin ${pluginId}: plugin ${otherId} depends on it`,\n        );\n      }\n    }\n\n    // Cleanup plugin\n    try {\n      if (plugin.destroy) {\n        await plugin.destroy();\n      }\n\n      // Remove capabilities\n      for (const capability of manifest.provides) {\n        this.capabilities.delete(capability);\n      }\n\n      // Remove plugin and manifest\n      this.plugins.delete(pluginId);\n      this.manifests.delete(pluginId);\n      this.status.delete(pluginId);\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Failed to unregister plugin ${pluginId}: ${error.message}`);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Get a plugin instance\n   * @param pluginId The ID of the plugin to get\n   * @returns The plugin instance or null if not found\n   */\n  getPlugin<T extends IPlugin>(pluginId: string): T | null {\n    const plugin = this.plugins.get(pluginId);\n    if (!plugin) {\n      return null;\n    }\n    return plugin as T;\n  }\n\n  /**\n   * Get a plugin that provides a specific capability\n   * @param capability The capability to get a provider for\n   * @returns The plugin providing the capability or null if not found\n   */\n  getCapabilityProvider(capability: string): IPlugin | null {\n    const pluginId = this.capabilities.get(capability);\n    if (!pluginId) {\n      return null;\n    }\n    return this.getPlugin(pluginId);\n  }\n\n  /**\n   * Check if a capability is available\n   */\n  hasCapability(capability: string): boolean {\n    return this.capabilities.has(capability);\n  }\n\n  /**\n   * Get all registered plugins\n   */\n  getAllPlugins(): IPlugin[] {\n    return Array.from(this.plugins.values());\n  }\n\n  /**\n   * Get plugin status\n   */\n  getPluginStatus(pluginId: string): PluginStatus {\n    const status = this.status.get(pluginId);\n    if (!status) {\n      throw new PluginNotFoundError(`Plugin ${pluginId} not found`);\n    }\n    return status;\n  }\n\n  /**\n   * Validate plugin object\n   */\n  private validatePlugin(plugin: IPlugin): void {\n    if (!plugin.id) {\n      throw new PluginRegistrationError('Plugin must have an id');\n    }\n  }\n\n  /**\n   * Validate plugin manifest\n   */\n  private validateManifest(manifest: PluginManifest): void {\n    if (!manifest.id) {\n      throw new PluginRegistrationError('Manifest must have an id');\n    }\n    if (!manifest.name) {\n      throw new PluginRegistrationError('Manifest must have a name');\n    }\n    if (!manifest.version) {\n      throw new PluginRegistrationError('Manifest must have a version');\n    }\n    if (!Array.isArray(manifest.provides)) {\n      throw new PluginRegistrationError('Manifest must have a provides array');\n    }\n    if (!Array.isArray(manifest.requires)) {\n      throw new PluginRegistrationError('Manifest must have a requires array');\n    }\n    if (!Array.isArray(manifest.optional)) {\n      throw new PluginRegistrationError('Manifest must have an optional array');\n    }\n  }\n\n  isDestroyed(): boolean {\n    return this.destroyed;\n  }\n\n  /**\n   * DESTROY EVERYTHING – waits for any ongoing initialise(), once  *\n   */\n  async destroy(): Promise<void> {\n    if (this.destroyed) throw new PluginRegistrationError('Registry has already been destroyed');\n    this.destroyed = true;\n\n    // If initialisation is still underway, wait (success OR failure)\n    try {\n      await this.initPromise;\n    } catch {\n      /* ignore – still need to clean up */\n    }\n\n    /* ------- original teardown, unchanged except the guard ------ */\n    for (const plugin of Array.from(this.plugins.values()).reverse()) {\n      await plugin.destroy?.();\n    }\n\n    this.store.destroy();\n\n    this.plugins.clear();\n    this.manifests.clear();\n    this.capabilities.clear();\n    this.status.clear();\n    this.pendingRegistrations.length = 0;\n    this.processingRegistrations.length = 0;\n  }\n}\n","/**\n * Restrict a numeric value to the inclusive range [min, max].\n *\n * @example\n *   clamp( 5, 0, 10)  // 5\n *   clamp(-3, 0, 10)  // 0\n *   clamp(17, 0, 10)  // 10\n */\nexport function clamp(value: number, min: number, max: number): number {\n  return value < min ? min : value > max ? max : value;\n}\n\n/**\n * Deeply compares two values (objects, arrays, primitives)\n * with the following rules:\n *  - Objects are compared ignoring property order.\n *  - Arrays are compared ignoring element order (multiset comparison).\n *  - Primitives are compared by strict equality.\n *  - null/undefined are treated as normal primitives.\n *\n * @param a First value\n * @param b Second value\n * @param visited Used internally to detect cycles\n */\nexport function arePropsEqual(a: any, b: any, visited?: Set<any>): boolean {\n  // Quick path for reference equality or same primitive\n  if (a === b) {\n    return true;\n  }\n\n  // Handle null/undefined mismatch\n  if (a == null || b == null) {\n    // If one is null/undefined and the other isn't, no match\n    return a === b;\n  }\n\n  // Check types\n  const aType = typeof a;\n  const bType = typeof b;\n  if (aType !== bType) return false;\n\n  // If they are both objects or arrays, handle recursively\n  if (aType === 'object') {\n    // Optionally handle cyclical references\n    if (!visited) visited = new Set();\n    const pairId = getPairId(a, b);\n    if (visited.has(pairId)) {\n      // Already compared these two objects => assume true to avoid infinite recursion\n      // or return false if you want to treat cycles as inequality\n      return true;\n    }\n    visited.add(pairId);\n\n    const aIsArray = Array.isArray(a);\n    const bIsArray = Array.isArray(b);\n    if (aIsArray && bIsArray) {\n      // Compare as arrays ignoring order\n      return arraysEqualUnordered(a, b, visited);\n    } else if (!aIsArray && !bIsArray) {\n      // Compare as plain objects (order of properties doesn't matter)\n      return objectsEqual(a, b, visited);\n    } else {\n      // One is array, the other is object => not equal\n      return false;\n    }\n  }\n\n  // If both are function, symbol, etc. - typically we might say false\n  // But you can decide your own logic for function or symbol equality\n  return false;\n}\n\nfunction getPairId(a: any, b: any) {\n  // Could do something more advanced. This is a cheap approach:\n  // e.g. use the memory reference or an object identity approach\n  return `${objectId(a)}__${objectId(b)}`;\n}\n\n/**\n * If you want stable object IDs, you'd need a WeakMap to store them.\n * This simplistic approach just calls toString on the object.\n */\nlet objectIdCounter = 0;\nconst objectIds = new WeakMap<object, number>();\n\nfunction objectId(obj: object): number {\n  if (!objectIds.has(obj)) {\n    objectIds.set(obj, ++objectIdCounter);\n  }\n  return objectIds.get(obj)!;\n}\n\nfunction arraysEqualUnordered(a: any[], b: any[], visited?: Set<any>): boolean {\n  if (a.length !== b.length) return false;\n\n  const used = new Array<boolean>(b.length).fill(false);\n\n  // For each element in a, find an unused matching element in b\n  outer: for (let i = 0; i < a.length; i++) {\n    const elemA = a[i];\n    for (let j = 0; j < b.length; j++) {\n      if (used[j]) continue; // already used that slot\n      if (arePropsEqual(elemA, b[j], visited)) {\n        used[j] = true;\n        continue outer; // found match for a[i], proceed\n      }\n    }\n    // If we never found a match\n    return false;\n  }\n\n  return true;\n}\n\nfunction objectsEqual(a: object, b: object, visited?: Set<any>): boolean {\n  // Get all prop keys\n  const aKeys = Object.keys(a).sort();\n  const bKeys = Object.keys(b).sort();\n  if (aKeys.length !== bKeys.length) return false;\n\n  // Compare each property name\n  for (let i = 0; i < aKeys.length; i++) {\n    if (aKeys[i] !== bKeys[i]) return false;\n  }\n\n  // Compare each property value\n  for (const key of aKeys) {\n    // @ts-ignore\n    const valA = a[key];\n    // @ts-ignore\n    const valB = b[key];\n    if (!arePropsEqual(valA, valB, visited)) {\n      return false;\n    }\n  }\n  return true;\n}\n","import { CoreState } from './initial-state';\nimport { transformSize, PdfPageObjectWithRotatedSize } from '@embedpdf/models';\n\nexport const getPagesWithRotatedSize = (state: CoreState): PdfPageObjectWithRotatedSize[][] => {\n  return state.pages.map((page) =>\n    page.map((p) => ({\n      ...p,\n      rotatedSize: transformSize(p.size, state.rotation, 1),\n    })),\n  );\n};\n","import { Action } from '../store';\nimport { IPlugin, PluginBatchRegistration, PluginPackage } from '../types/plugin';\n\n/**\n * Helper function to create a properly typed plugin registration\n */\nexport function createPluginRegistration<\n  T extends IPlugin<TConfig>,\n  TConfig,\n  TState,\n  TAction extends Action,\n>(\n  pluginPackage: PluginPackage<T, TConfig, TState, TAction>,\n  config?: Partial<TConfig>,\n): PluginBatchRegistration<T, TConfig, any, any> {\n  return {\n    package: pluginPackage,\n    config,\n  };\n}\n","import { IPlugin } from '../types/plugin';\nimport { PluginRegistry } from '../registry/plugin-registry';\nimport { Action, CoreAction, CoreState, PluginStore, Store, StoreState } from '../store';\n\nexport interface StateChangeHandler<TState> {\n  (state: TState): void;\n}\n\nexport abstract class BasePlugin<\n  TConfig = unknown,\n  TCapability = unknown,\n  TState = unknown,\n  TAction extends Action = Action,\n> implements IPlugin<TConfig>\n{\n  static readonly id: string;\n\n  protected pluginStore: PluginStore<TState, TAction>;\n  protected coreStore: Store<CoreState, CoreAction>;\n  // Track debounced actions\n  private debouncedActions: Record<string, number> = {};\n  private unsubscribeFromState: (() => void) | null = null;\n  private unsubscribeFromCoreStore: (() => void) | null = null;\n\n  private _capability?: Readonly<TCapability>;\n\n  private readyPromise: Promise<void>;\n  private readyResolve!: () => void;\n\n  constructor(\n    public readonly id: string,\n    protected registry: PluginRegistry,\n  ) {\n    if (id !== (this.constructor as typeof BasePlugin).id) {\n      throw new Error(\n        `Plugin ID mismatch: ${id} !== ${(this.constructor as typeof BasePlugin).id}`,\n      );\n    }\n    this.coreStore = this.registry.getStore();\n    this.pluginStore = this.coreStore.getPluginStore<TState, TAction>(this.id);\n    this.unsubscribeFromState = this.pluginStore.subscribeToState((action, newState, oldState) => {\n      this.onStoreUpdated(oldState, newState);\n    });\n    this.unsubscribeFromCoreStore = this.coreStore.subscribe((action, newState, oldState) => {\n      this.onCoreStoreUpdated(oldState, newState);\n    });\n\n    // Initialize ready state\n    this.readyPromise = new Promise((resolve) => {\n      this.readyResolve = resolve;\n    });\n    // By default, plugins are ready immediately\n    this.readyResolve();\n  }\n\n  /** Construct the public capability (called once & cached). */\n  protected abstract buildCapability(): TCapability;\n\n  public provides(): Readonly<TCapability> {\n    if (!this._capability) {\n      const cap = this.buildCapability();\n\n      this._capability = Object.freeze(cap);\n    }\n    return this._capability;\n  }\n\n  /**\n   * Initialize plugin with config\n   */\n  abstract initialize(config: TConfig): Promise<void>;\n\n  /**\n   *  Get a copy of the current state\n   */\n  protected get state(): Readonly<TState> {\n    return this.pluginStore.getState();\n  }\n\n  /**\n   *  Get a copy of the current core state\n   */\n  protected get coreState(): Readonly<StoreState<CoreState>> {\n    return this.coreStore.getState();\n  }\n\n  /**\n   * @deprecated  use `this.state` Get a copy of the current state\n   */\n  protected getState(): TState {\n    return this.pluginStore.getState();\n  }\n\n  /**\n   * @deprecated  use `this.coreState` Get a copy of the current core state\n   */\n  protected getCoreState(): StoreState<CoreState> {\n    return this.coreStore.getState();\n  }\n\n  /**\n   * Core Dispatch\n   */\n  protected dispatchCoreAction(action: CoreAction): StoreState<CoreState> {\n    return this.coreStore.dispatchToCore(action);\n  }\n\n  /**\n   * Dispatch an action to all plugins\n   */\n  protected dispatchToAllPlugins(action: TAction): StoreState<CoreState> {\n    return this.coreStore.dispatch(action);\n  }\n\n  /**\n   * Dispatch an action\n   */\n  protected dispatch(action: TAction): TState {\n    return this.pluginStore.dispatch(action);\n  }\n\n  /**\n   * Dispatch an action with debouncing to prevent rapid repeated calls\n   * @param action The action to dispatch\n   * @param debounceTime Time in ms to debounce (default: 100ms)\n   * @returns boolean indicating whether the action was dispatched or debounced\n   */\n  protected debouncedDispatch(action: TAction, debounceTime: number = 100): boolean {\n    const now = Date.now();\n    const lastActionTime = this.debouncedActions[action.type] || 0;\n\n    if (now - lastActionTime >= debounceTime) {\n      this.debouncedActions[action.type] = now;\n      this.dispatch(action);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Subscribe to state changes\n   */\n  protected subscribe(listener: (action: TAction, state: TState) => void): () => void {\n    return this.pluginStore.subscribeToState(listener);\n  }\n\n  /**\n   * Subscribe to core store changes\n   */\n  protected subscribeToCoreStore(\n    listener: (action: Action, state: StoreState<CoreState>) => void,\n  ): () => void {\n    return this.coreStore.subscribe(listener);\n  }\n\n  /**\n   * Called when the plugin store state is updated\n   * @param oldState Previous state\n   * @param newState New state\n   */\n  protected onStoreUpdated(oldState: TState, newState: TState): void {\n    // Default implementation does nothing - can be overridden by plugins\n  }\n\n  /**\n   * Called when the core store state is updated\n   * @param oldState Previous state\n   * @param newState New state\n   */\n  protected onCoreStoreUpdated(\n    oldState: StoreState<CoreState>,\n    newState: StoreState<CoreState>,\n  ): void {\n    // Default implementation does nothing - can be overridden by plugins\n  }\n\n  /**\n   * Cleanup method to be called when plugin is being destroyed\n   */\n  public destroy(): void {\n    if (this.unsubscribeFromState) {\n      this.unsubscribeFromState();\n      this.unsubscribeFromState = null;\n    }\n    if (this.unsubscribeFromCoreStore) {\n      this.unsubscribeFromCoreStore();\n      this.unsubscribeFromCoreStore = null;\n    }\n  }\n\n  /**\n   * Returns a promise that resolves when the plugin is ready\n   */\n  public ready(): Promise<void> {\n    return this.readyPromise;\n  }\n\n  /**\n   * Mark the plugin as ready\n   */\n  protected markReady(): void {\n    this.readyResolve();\n  }\n\n  /**\n   * Reset the ready state (useful for plugins that need to reinitialize)\n   */\n  protected resetReady(): void {\n    this.readyPromise = new Promise((resolve) => {\n      this.readyResolve = resolve;\n    });\n  }\n}\n","export type EventHandler<T> = (data: T) => void;\n\nexport interface BaseEventControlOptions {\n  wait: number;\n}\n\nexport interface DebounceOptions extends BaseEventControlOptions {\n  mode: 'debounce';\n}\n\nexport interface ThrottleOptions extends BaseEventControlOptions {\n  mode: 'throttle';\n  throttleMode?: 'leading-trailing' | 'trailing';\n}\n\nexport type EventControlOptions = DebounceOptions | ThrottleOptions;\n\nexport class EventControl<T> {\n  private timeoutId?: number;\n  private lastRun: number = 0;\n\n  constructor(\n    private handler: EventHandler<T>,\n    private options: EventControlOptions,\n  ) {}\n\n  handle = (data: T): void => {\n    if (this.options.mode === 'debounce') {\n      this.debounce(data);\n    } else {\n      this.throttle(data);\n    }\n  };\n\n  private debounce(data: T): void {\n    if (this.timeoutId) {\n      window.clearTimeout(this.timeoutId);\n    }\n\n    this.timeoutId = window.setTimeout(() => {\n      this.handler(data);\n      this.timeoutId = undefined;\n    }, this.options.wait);\n  }\n\n  private throttle(data: T): void {\n    if (this.options.mode === 'debounce') return;\n\n    const now = Date.now();\n    const throttleMode = this.options.throttleMode || 'leading-trailing';\n\n    if (now - this.lastRun >= this.options.wait) {\n      if (throttleMode === 'leading-trailing') {\n        this.handler(data);\n      }\n      this.lastRun = now;\n    }\n\n    // Always schedule the trailing execution\n    if (this.timeoutId) {\n      window.clearTimeout(this.timeoutId);\n    }\n\n    this.timeoutId = window.setTimeout(\n      () => {\n        this.handler(data);\n        this.lastRun = Date.now();\n        this.timeoutId = undefined;\n      },\n      this.options.wait - (now - this.lastRun),\n    );\n  }\n\n  destroy(): void {\n    if (this.timeoutId) {\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n}\n","import { EventControl, EventControlOptions } from './event-control';\nimport { arePropsEqual } from './math';\n\n/* ------------------------------------------------------------------ */\n/* basic types                                                        */\n/* ------------------------------------------------------------------ */\nexport type Listener<T = any> = (value: T) => void;\nexport type Unsubscribe = () => void;\n\n/* ------------------------------------------------------------------ */\n/* EventListener                                                      */\n/* ------------------------------------------------------------------ */\nexport type EventListener<T> =\n  | ((listener: Listener<T>) => Unsubscribe)\n  | ((listener: Listener<T>, options?: EventControlOptions) => Unsubscribe);\n\n/* ------------------------------------------------------------ */\n/* helpers for typing `.on()` with an optional second argument  */\n/* ------------------------------------------------------------ */\nexport type EventHook<T = any> = EventListener<T>;\n/* ------------------------------------------------------------------ */\n/* minimal “dumb” emitter (no value cache, no equality)               */\n/* ------------------------------------------------------------------ */\nexport interface Emitter<T = any> {\n  emit(value?: T): void;\n  on(listener: Listener<T>): Unsubscribe;\n  off(listener: Listener<T>): void;\n  clear(): void;\n}\n\nexport function createEmitter<T = any>(): Emitter<T> {\n  const listeners = new Set<Listener<T>>();\n\n  const on: EventHook<T> = (l: Listener<T>) => {\n    listeners.add(l);\n    return () => listeners.delete(l);\n  };\n\n  return {\n    emit: (v = undefined as T) => listeners.forEach((l) => l(v)),\n    on,\n    off: (l) => listeners.delete(l),\n    clear: () => listeners.clear(),\n  };\n}\n\n/* ------------------------------------------------------------ */\n/* public interface                                              */\n/* ------------------------------------------------------------ */\nexport interface BehaviorEmitter<T = any> extends Omit<Emitter<T>, 'on' | 'off'> {\n  readonly value?: T;\n  on: EventHook<T>;\n  off(listener: Listener<T>): void;\n  select<U>(selector: (v: T) => U, equality?: (a: U, b: U) => boolean): EventHook<U>;\n}\n\n/* ------------------------------------------------------------ */\n/* implementation                                               */\n/* ------------------------------------------------------------ */\nexport function createBehaviorEmitter<T = any>(\n  initial?: T,\n  equality: (a: T, b: T) => boolean = arePropsEqual,\n): BehaviorEmitter<T> {\n  const listeners = new Set<Listener<T>>();\n  const proxyMap = new Map<Listener<T>, { wrapped: Listener<T>; destroy: () => void }>();\n  let _value = initial; // cached value\n\n  /* -------------- helpers ----------------------------------- */\n  const notify = (v: T) => listeners.forEach((l) => l(v));\n\n  const baseOn: EventHook<T> = (listener: Listener<T>, options?: EventControlOptions) => {\n    /* wrap & remember if we have control options ------------------ */\n    let realListener = listener;\n    let destroy = () => {};\n\n    if (options) {\n      const ctl = new EventControl(listener, options);\n      realListener = ctl.handle as Listener<T>;\n      destroy = () => ctl.destroy();\n      proxyMap.set(listener, { wrapped: realListener, destroy });\n    }\n\n    /* immediate replay of last value ------------------------------ */\n    if (_value !== undefined) realListener(_value);\n\n    listeners.add(realListener);\n\n    return () => {\n      listeners.delete(realListener);\n      destroy();\n      proxyMap.delete(listener);\n    };\n  };\n\n  /* -------------- public object ------------------------------ */\n  return {\n    /* emitter behaviour ---------------------------------------- */\n    get value() {\n      return _value;\n    },\n\n    emit(v = undefined as T) {\n      if (_value === undefined || !equality(_value, v)) {\n        _value = v;\n        notify(v);\n      }\n    },\n\n    on: baseOn,\n    off(listener: Listener<T>) {\n      /* did we wrap this listener? */\n      const proxy = proxyMap.get(listener);\n      if (proxy) {\n        listeners.delete(proxy.wrapped);\n        proxy.destroy();\n        proxyMap.delete(listener);\n      } else {\n        listeners.delete(listener);\n      }\n    },\n\n    clear() {\n      listeners.clear();\n      proxyMap.forEach((p) => p.destroy());\n      proxyMap.clear();\n    },\n\n    /* derived hook --------------------------------------------- */\n    select<U>(selector: (v: T) => U, eq: (a: U, b: U) => boolean = arePropsEqual): EventHook<U> {\n      return (listener: Listener<U>, options?: EventControlOptions) => {\n        let prev: U | undefined;\n\n        /* replay */\n        if (_value !== undefined) {\n          const mapped = selector(_value);\n          prev = mapped;\n          listener(mapped);\n        }\n\n        /* subscribe to parent */\n        return baseOn(\n          (next) => {\n            const mapped = selector(next);\n            if (prev === undefined || !eq(prev, mapped)) {\n              prev = mapped;\n              listener(mapped);\n            }\n          },\n          options as EventControlOptions | undefined,\n        ); // pass control opts straight through\n      };\n    },\n  };\n}\n","/* ------------------------------------------------------------------ */\n/*  enumEntries – iterate over enum-keyed Records with strong typing  */\n/* ------------------------------------------------------------------ */\n\ntype EnumKey = string | number;\n\n/**\n * Iterate over a Record whose keys are enum members (numeric or string),\n * getting back a fully-typed `[key, value]` tuple array.\n *\n * Usage:\n *   for (const [subtype, defaults] of enumEntries(this.state.toolDefaults)) {\n *     // subtype is inferred as keyof ToolDefaultsBySubtype\n *   }\n */\nexport function enumEntries<E extends EnumKey, V>(record: Record<E, V>): Array<[E, V]> {\n  // Tell TS the values are V (not unknown) *before* we map.\n  return (Object.entries(record) as [string, V][]).map(([k, v]) => {\n    // Numeric enums come out of Object.entries as \"0\", \"1\", …  → convert.\n    const maybeNum = Number(k);\n    const typedKey: E =\n      Number.isFinite(maybeNum) && k.trim() !== '' // looks like a number?\n        ? (maybeNum as unknown as E) // numeric enum key\n        : (k as unknown as E); // string enum key\n\n    return [typedKey, v]; // v is already typed as V\n  });\n}\n","/**\n * Clockwise direction\n * @public\n */\nexport enum Rotation {\n  Degree0 = 0,\n  Degree90 = 1,\n  Degree180 = 2,\n  Degree270 = 3,\n}\n\n/** Clamp a Position to device-pixel integers (floor) */\nexport function toIntPos(p: Position): Position {\n  return { x: Math.floor(p.x), y: Math.floor(p.y) };\n}\n\n/** Clamp a Size so it never truncates right / bottom (ceil) */\nexport function toIntSize(s: Size): Size {\n  return { width: Math.ceil(s.width), height: Math.ceil(s.height) };\n}\n\n/** Apply both rules to a Rect */\nexport function toIntRect(r: Rect): Rect {\n  return {\n    origin: toIntPos(r.origin),\n    size: toIntSize(r.size),\n  };\n}\n\n/**\n * Calculate degree that match the rotation type\n * @param rotation - type of rotation\n * @returns rotated degree\n *\n * @public\n */\nexport function calculateDegree(rotation: Rotation) {\n  switch (rotation) {\n    case Rotation.Degree0:\n      return 0;\n    case Rotation.Degree90:\n      return 90;\n    case Rotation.Degree180:\n      return 180;\n    case Rotation.Degree270:\n      return 270;\n  }\n}\n\n/**\n * Calculate angle that match the rotation type\n * @param rotation - type of rotation\n * @returns rotated angle\n *\n * @public\n */\nexport function calculateAngle(rotation: Rotation) {\n  return (calculateDegree(rotation) * Math.PI) / 180;\n}\n\n/**\n * Represent the size of object\n *\n * @public\n */\nexport interface Size {\n  /**\n   * width of the object\n   */\n  width: number;\n\n  /**\n   * height of the object\n   */\n  height: number;\n}\n\n/**\n * Represents a rectangle defined by its left, top, right, and bottom edges\n *\n * @public\n */\nexport interface Box {\n  /**\n   * The x-coordinate of the left edge\n   */\n  left: number;\n\n  /**\n   * The y-coordinate of the top edge\n   */\n  top: number;\n\n  /**\n   * The x-coordinate of the right edge\n   */\n  right: number;\n\n  /**\n   * The y-coordinate of the bottom edge\n   */\n  bottom: number;\n}\n\n/**\n * Swap the width and height of the size object\n * @param size - the original size\n * @returns swapped size\n *\n * @public\n */\nexport function swap(size: Size): Size {\n  const { width, height } = size;\n\n  return {\n    width: height,\n    height: width,\n  };\n}\n\n/**\n * Transform size with specified rotation angle and scale factor\n * @param size - orignal size of rect\n * @param rotation - rotation angle\n * @param scaleFactor - - scale factor\n * @returns size that has been transformed\n *\n * @public\n */\nexport function transformSize(size: Size, rotation: Rotation, scaleFactor: number): Size {\n  size = rotation % 2 === 0 ? size : swap(size);\n\n  return {\n    width: size.width * scaleFactor,\n    height: size.height * scaleFactor,\n  };\n}\n\n/**\n * position of point\n *\n * @public\n */\nexport interface Position {\n  /**\n   * x coordinate\n   */\n  x: number;\n\n  /**\n   * y coordinate\n   */\n  y: number;\n}\n\n/**\n * Quadrilateral\n *\n * @public\n */\nexport interface Quad {\n  p1: Position;\n  p2: Position;\n  p3: Position;\n  p4: Position;\n}\n\n/**\n * Convert quadrilateral to rectangle\n * @param q - quadrilateral\n * @returns rectangle\n *\n * @public\n */\nexport function quadToRect(q: Quad): Rect {\n  const xs = [q.p1.x, q.p2.x, q.p3.x, q.p4.x];\n  const ys = [q.p1.y, q.p2.y, q.p3.y, q.p4.y];\n\n  return {\n    origin: { x: Math.min(...xs), y: Math.min(...ys) },\n    size: {\n      width: Math.max(...xs) - Math.min(...xs),\n      height: Math.max(...ys) - Math.min(...ys),\n    },\n  };\n}\n\n/**\n * Convert rectangle to quadrilateral\n * @param r - rectangle\n * @returns quadrilateral\n *\n * @public\n */\nexport function rectToQuad(r: Rect): Quad {\n  return {\n    p1: { x: r.origin.x, y: r.origin.y },\n    p2: { x: r.origin.x + r.size.width, y: r.origin.y },\n    p3: { x: r.origin.x + r.size.width, y: r.origin.y + r.size.height },\n    p4: { x: r.origin.x, y: r.origin.y + r.size.height },\n  };\n}\n\n/**\n * Rotate the container and calculate the new position for a point\n * in specified position\n * @param containerSize - size of the container\n * @param position - position of the point\n * @param rotation - rotated angle\n * @returns new position of the point\n *\n * @public\n */\nexport function rotatePosition(\n  containerSize: Size,\n  position: Position,\n  rotation: Rotation,\n): Position {\n  let x = position.x;\n  let y = position.y;\n\n  switch (rotation) {\n    case Rotation.Degree0:\n      x = position.x;\n      y = position.y;\n      break;\n    case Rotation.Degree90:\n      x = containerSize.height - position.y;\n      y = position.x;\n      break;\n    case Rotation.Degree180:\n      x = containerSize.width - position.x;\n      y = containerSize.height - position.y;\n      break;\n    case Rotation.Degree270:\n      x = position.y;\n      y = containerSize.width - position.x;\n      break;\n  }\n\n  return {\n    x,\n    y,\n  };\n}\n\n/**\n * Calculate the position of point by scaling the container\n * @param position - position of the point\n * @param scaleFactor - factor of scaling\n * @returns new position of point\n *\n * @public\n */\nexport function scalePosition(position: Position, scaleFactor: number): Position {\n  return {\n    x: position.x * scaleFactor,\n    y: position.y * scaleFactor,\n  };\n}\n\n/**\n * Calculate the position of the point by applying the specified transformation\n * @param containerSize - size of container\n * @param position - position of the point\n * @param rotation - rotated angle\n * @param scaleFactor - factor of scaling\n * @returns new position of point\n *\n * @public\n */\nexport function transformPosition(\n  containerSize: Size,\n  position: Position,\n  rotation: Rotation,\n  scaleFactor: number,\n): Position {\n  return scalePosition(rotatePosition(containerSize, position, rotation), scaleFactor);\n}\n\n/**\n * Restore the position in a transformed cotainer\n * @param containerSize - size of the container\n * @param position - position of the point\n * @param rotation - rotated angle\n * @param scaleFactor - factor of scaling\n * @returns the original position of the point\n *\n * @public\n */\nexport function restorePosition(\n  containerSize: Size,\n  position: Position,\n  rotation: Rotation,\n  scaleFactor: number,\n): Position {\n  return scalePosition(\n    rotatePosition(containerSize, position, (4 - rotation) % 4),\n    1 / scaleFactor,\n  );\n}\n\n/**\n * representation of rectangle\n *\n * @public\n */\nexport interface Rect {\n  /**\n   * origin of the rectangle\n   */\n  origin: Position;\n\n  /**\n   * size of the rectangle\n   */\n  size: Size;\n}\n\n/**\n * Calculate the rect after rotated the container\n * @param containerSize - size of container\n * @param rect - target rect\n * @param rotation - rotation angle\n * @returns rotated rect\n *\n * @public\n */\nexport function rotateRect(containerSize: Size, rect: Rect, rotation: Rotation): Rect {\n  let x = rect.origin.x;\n  let y = rect.origin.y;\n  let size = rect.size;\n\n  switch (rotation) {\n    case Rotation.Degree0:\n      break;\n    case Rotation.Degree90:\n      x = containerSize.height - rect.origin.y - rect.size.height;\n      y = rect.origin.x;\n      size = swap(rect.size);\n      break;\n    case Rotation.Degree180:\n      x = containerSize.width - rect.origin.x - rect.size.width;\n      y = containerSize.height - rect.origin.y - rect.size.height;\n      break;\n    case Rotation.Degree270:\n      x = rect.origin.y;\n      y = containerSize.width - rect.origin.x - rect.size.width;\n      size = swap(rect.size);\n      break;\n  }\n\n  return {\n    origin: {\n      x,\n      y,\n    },\n    size: {\n      width: size.width,\n      height: size.height,\n    },\n  };\n}\n\n/**\n * Scale the rectangle\n * @param rect - rectangle\n * @param scaleFactor - factor of scaling\n * @returns new rectangle\n *\n * @public\n */\nexport function scaleRect(rect: Rect, scaleFactor: number): Rect {\n  return {\n    origin: {\n      x: rect.origin.x * scaleFactor,\n      y: rect.origin.y * scaleFactor,\n    },\n    size: {\n      width: rect.size.width * scaleFactor,\n      height: rect.size.height * scaleFactor,\n    },\n  };\n}\n\n/**\n * Calculate new rectangle after transforming the container\n * @param containerSize - size of the container\n * @param rect - the target rectangle\n * @param rotation - rotated angle\n * @param scaleFactor - factor of scaling\n * @returns new rectangle after transformation\n *\n * @public\n */\nexport function transformRect(\n  containerSize: Size,\n  rect: Rect,\n  rotation: Rotation,\n  scaleFactor: number,\n): Rect {\n  return scaleRect(rotateRect(containerSize, rect, rotation), scaleFactor);\n}\n\n/**\n * Calculate new rectangle before transforming the container\n * @param containerSize - size of the container\n * @param rect - the target rectangle\n * @param rotation - rotated angle\n * @param scaleFactor - factor of scaling\n * @returns original rectangle before transformation\n *\n * @public\n */\nexport function restoreRect(\n  containerSize: Size,\n  rect: Rect,\n  rotation: Rotation,\n  scaleFactor: number,\n): Rect {\n  return scaleRect(rotateRect(containerSize, rect, (4 - rotation) % 4), 1 / scaleFactor);\n}\n\n/**\n * Calculate the original offset in a transformed container\n * @param offset - position of the point\n * @param rotation - rotated angle\n * @param scaleFactor - factor of scaling\n * @returns original position of the point\n *\n * @public\n */\nexport function restoreOffset(offset: Position, rotation: Rotation, scaleFactor: number): Position {\n  let offsetX = offset.x;\n  let offsetY = offset.y;\n  switch (rotation) {\n    case Rotation.Degree0:\n      offsetX = offset.x / scaleFactor;\n      offsetY = offset.y / scaleFactor;\n      break;\n    case Rotation.Degree90:\n      offsetX = offset.y / scaleFactor;\n      offsetY = -offset.x / scaleFactor;\n      break;\n    case Rotation.Degree180:\n      offsetX = -offset.x / scaleFactor;\n      offsetY = -offset.y / scaleFactor;\n      break;\n    case Rotation.Degree270:\n      offsetX = -offset.y / scaleFactor;\n      offsetY = offset.x / scaleFactor;\n      break;\n  }\n\n  return {\n    x: offsetX,\n    y: offsetY,\n  };\n}\n\n/**\n * Return the smallest rectangle that encloses *all* `rects`.\n * If the array is empty, returns `null`.\n *\n * @param rects - array of rectangles\n * @returns smallest rectangle that encloses all the rectangles\n *\n * @public\n */\nexport function boundingRect(rects: Rect[]): Rect | null {\n  if (rects.length === 0) return null;\n\n  let minX = rects[0].origin.x,\n    minY = rects[0].origin.y,\n    maxX = rects[0].origin.x + rects[0].size.width,\n    maxY = rects[0].origin.y + rects[0].size.height;\n\n  for (const r of rects) {\n    minX = Math.min(minX, r.origin.x);\n    minY = Math.min(minY, r.origin.y);\n    maxX = Math.max(maxX, r.origin.x + r.size.width);\n    maxY = Math.max(maxY, r.origin.y + r.size.height);\n  }\n\n  return {\n    origin: {\n      x: minX,\n      y: minY,\n    },\n    size: {\n      width: maxX - minX,\n      height: maxY - minY,\n    },\n  };\n}\n\nexport interface Matrix {\n  a: number;\n  b: number;\n  c: number;\n  d: number;\n  e: number;\n  f: number;\n}\n\n/**\n * Build a CTM that maps *PDF-space* inside the annotation\n * → *device-space* inside the bitmap, honouring\n * zoom (scaleFactor × dpr) **and** page-rotation.\n */\n/** build the CTM for any page-rotation */\nexport const makeMatrix = (rectangle: Rect, rotation: Rotation, scaleFactor: number): Matrix => {\n  const { width, height } = rectangle.size;\n\n  switch (rotation) {\n    case Rotation.Degree0: // normal\n      return {\n        a: scaleFactor,\n        b: 0,\n        c: 0,\n        d: -scaleFactor,\n        e: 0,\n        f: height * scaleFactor,\n      };\n\n    case Rotation.Degree90: // +90° CW\n      //  matrix =   [ 0  s ]   after flip-Y → no extra translation needed\n      //              [ s  0 ]\n      return {\n        a: 0,\n        b: scaleFactor,\n        c: scaleFactor,\n        d: 0,\n        e: 0,\n        f: 0,\n      };\n\n    case Rotation.Degree180: // +180°\n      return {\n        a: -scaleFactor,\n        b: 0,\n        c: 0,\n        d: scaleFactor,\n        e: width * scaleFactor,\n        f: 0,\n      };\n\n    case Rotation.Degree270: // +270° CW  (= 90° CCW)\n      //  flips the other way, so we nudge it back inside the bitmap\n      return {\n        a: 0,\n        b: -scaleFactor,\n        c: -scaleFactor,\n        d: 0,\n        e: height * scaleFactor,\n        f: width * scaleFactor,\n      };\n  }\n};\n","/**\n * logger for logging\n *\n * @public\n */\nexport interface Logger {\n  /**\n   * Log debug message\n   * @param source - source of log\n   * @param category - category of log\n   * @param args - parameters of log\n   * @returns\n   *\n   * @public\n   */\n  debug: (source: string, category: string, ...args: any) => void;\n\n  /**\n   * Log infor message\n   * @param source - source of log\n   * @param category - category of log\n   * @param args - parameters of log\n   * @returns\n   *\n   * @public\n   */\n  info: (source: string, category: string, ...args: any) => void;\n\n  /**\n   * Log warning message\n   * @param source - source of log\n   * @param category - category of log\n   * @param args - parameters of log\n   * @returns\n   *\n   * @public\n   */\n  warn: (source: string, category: string, ...args: any) => void;\n  /**\n   * Log error message\n   * @param source - source of log\n   * @param category - category of log\n   * @param args - parameters of log\n   * @returns\n   *\n   * @public\n   */\n  error: (source: string, category: string, ...args: any) => void;\n\n  /**\n   * Log performance log\n   * @param source - source of log\n   * @param category - category of log\n   * @param event - event of log\n   * @param phase - event phase of log\n   * @param args - parameters of log\n   * @returns\n   *\n   * @public\n   */\n  perf: (\n    source: string,\n    category: string,\n    event: string,\n    phase: 'Begin' | 'End',\n    ...args: any\n  ) => void;\n}\n\n/**\n * Logger that log nothing, it will ignore all the logs\n *\n * @public\n */\nexport class NoopLogger implements Logger {\n  /** {@inheritDoc Logger.debug} */\n  debug() {}\n  /** {@inheritDoc Logger.info} */\n  info() {}\n  /** {@inheritDoc Logger.warn} */\n  warn() {}\n  /** {@inheritDoc Logger.error} */\n  error() {}\n  /** {@inheritDoc Logger.perf} */\n  perf() {}\n}\n\n/**\n * Logger that use console as the output\n *\n * @public\n */\nexport class ConsoleLogger implements Logger {\n  /** {@inheritDoc Logger.debug} */\n  debug(source: string, category: string, ...args: any) {\n    console.debug(`${source}.${category}`, ...args);\n  }\n\n  /** {@inheritDoc Logger.info} */\n  info(source: string, category: string, ...args: any) {\n    console.info(`${source}.${category}`, ...args);\n  }\n\n  /** {@inheritDoc Logger.warn} */\n  warn(source: string, category: string, ...args: any) {\n    console.warn(`${source}.${category}`, ...args);\n  }\n\n  /** {@inheritDoc Logger.error} */\n  error(source: string, category: string, ...args: any) {\n    console.error(`${source}.${category}`, ...args);\n  }\n\n  /** {@inheritDoc Logger.perf} */\n  perf(source: string, category: string, event: string, phase: 'Begin' | 'End', ...args: any) {\n    console.info(`${source}.${category}.${event}.${phase}`, ...args);\n  }\n}\n\n/**\n * Level of log\n *\n * @public\n */\nexport enum LogLevel {\n  Debug = 0,\n  Info,\n  Warn,\n  Error,\n}\n\n/**\n * Logger that support filtering by log level\n *\n * @public\n */\nexport class LevelLogger implements Logger {\n  /**\n   * create new LevelLogger\n   * @param logger - the original logger\n   * @param level - log level that used for filtering, all logs lower than this level will be filtered out\n   */\n  constructor(\n    private logger: Logger,\n    private level: LogLevel,\n  ) {}\n\n  /** {@inheritDoc Logger.debug} */\n  debug(source: string, category: string, ...args: any) {\n    if (this.level <= LogLevel.Debug) {\n      this.logger.debug(source, category, ...args);\n    }\n  }\n\n  /** {@inheritDoc Logger.info} */\n  info(source: string, category: string, ...args: any) {\n    if (this.level <= LogLevel.Info) {\n      this.logger.info(source, category, ...args);\n    }\n  }\n\n  /** {@inheritDoc Logger.warn} */\n  warn(source: string, category: string, ...args: any) {\n    if (this.level <= LogLevel.Warn) {\n      this.logger.warn(source, category, ...args);\n    }\n  }\n\n  /** {@inheritDoc Logger.error} */\n  error(source: string, category: string, ...args: any) {\n    if (this.level <= LogLevel.Error) {\n      this.logger.error(source, category, ...args);\n    }\n  }\n\n  /** {@inheritDoc Logger.perf} */\n  perf(source: string, category: string, event: string, phase: 'Begin' | 'End', ...args: any) {\n    this.logger.perf(source, category, event, phase, ...args);\n  }\n}\n\n/**\n * Logger for performance tracking\n *\n * @public\n */\nexport class PerfLogger implements Logger {\n  /**\n   * create new PerfLogger\n   */\n  constructor() {}\n\n  /** {@inheritDoc Logger.debug} */\n  debug(source: string, category: string, ...args: any) {}\n\n  /** {@inheritDoc Logger.info} */\n  info(source: string, category: string, ...args: any) {}\n\n  /** {@inheritDoc Logger.warn} */\n  warn(source: string, category: string, ...args: any) {}\n\n  /** {@inheritDoc Logger.error} */\n  error(source: string, category: string, ...args: any) {}\n\n  /** {@inheritDoc Logger.perf} */\n  perf(\n    source: string,\n    category: string,\n    event: string,\n    phase: 'Begin' | 'End',\n    identifier: string,\n    ...args: any\n  ) {\n    switch (phase) {\n      case 'Begin':\n        window.performance.mark(`${source}.${category}.${event}.${phase}.${identifier}`, {\n          detail: args,\n        });\n        break;\n      case 'End':\n        window.performance.mark(`${source}.${category}.${event}.${phase}.${identifier}`, {\n          detail: args,\n        });\n        window.performance.measure(\n          `${source}.${category}.${event}.Measure.${identifier}`,\n          `${source}.${category}.${event}.Begin.${identifier}`,\n          `${source}.${category}.${event}.End.${identifier}`,\n        );\n        break;\n    }\n  }\n}\n\n/**\n * Logger that will track and call child loggers\n *\n * @public\n */\nexport class AllLogger implements Logger {\n  /**\n   * create new PerfLogger\n   */\n  constructor(private loggers: Logger[]) {}\n\n  /** {@inheritDoc Logger.debug} */\n  debug(source: string, category: string, ...args: any) {\n    for (const logger of this.loggers) {\n      logger.debug(source, category, ...args);\n    }\n  }\n\n  /** {@inheritDoc Logger.info} */\n  info(source: string, category: string, ...args: any) {\n    for (const logger of this.loggers) {\n      logger.info(source, category, ...args);\n    }\n  }\n\n  /** {@inheritDoc Logger.warn} */\n  warn(source: string, category: string, ...args: any) {\n    for (const logger of this.loggers) {\n      logger.warn(source, category, ...args);\n    }\n  }\n\n  /** {@inheritDoc Logger.error} */\n  error(source: string, category: string, ...args: any) {\n    for (const logger of this.loggers) {\n      logger.error(source, category, ...args);\n    }\n  }\n\n  /** {@inheritDoc Logger.perf} */\n  perf(source: string, category: string, event: string, phase: 'Begin' | 'End', ...args: any) {\n    for (const logger of this.loggers) {\n      logger.perf(source, category, event, phase, ...args);\n    }\n  }\n}\n","/**\n * Stage of task\n *\n * @public\n */\nexport enum TaskStage {\n  /**\n   * Task is pending, means it just start executing\n   */\n  Pending = 0,\n  /**\n   * Task is succeed\n   */\n  Resolved = 1,\n  /**\n   * Task is failed\n   */\n  Rejected = 2,\n  /**\n   * Task is aborted\n   */\n  Aborted = 3,\n}\n\nexport interface TaskError<D> {\n  /**\n   * task error type\n   */\n  type: 'reject' | 'abort';\n  /**\n   * task error\n   */\n  reason: D;\n}\n\n/**\n * callback that will be called when task is resolved\n *\n * @public\n */\nexport type ResolvedCallback<R> = (r: R) => void;\n\n/**\n * callback that will be called when task is rejected\n *\n * @public\n */\nexport type RejectedCallback<D> = (e: TaskError<D>) => void;\n\n/**\n * Task state in different stage\n *\n * @public\n */\nexport type TaskState<R, D> =\n  | {\n      stage: TaskStage.Pending;\n    }\n  | {\n      stage: TaskStage.Resolved;\n      result: R;\n    }\n  | {\n      stage: TaskStage.Rejected;\n      reason: D;\n    }\n  | {\n      stage: TaskStage.Aborted;\n      reason: D;\n    };\n\n/**\n * Result type for allSettled\n *\n * @public\n */\nexport type TaskSettledResult<R, D> =\n  | { status: 'resolved'; value: R }\n  | { status: 'rejected'; reason: D }\n  | { status: 'aborted'; reason: D };\n\nexport class TaskAbortedError<D> extends Error {\n  constructor(reason: D) {\n    super(`Task aborted: ${JSON.stringify(reason)}`);\n    this.name = 'TaskAbortedError';\n  }\n}\n\nexport class TaskRejectedError<D> extends Error {\n  constructor(reason: D) {\n    super(`Task rejected: ${JSON.stringify(reason)}`);\n    this.name = 'TaskRejectedError';\n  }\n}\n\n/**\n * Base class of task\n *\n * @public\n */\nexport class Task<R, D> {\n  state: TaskState<R, D> = {\n    stage: TaskStage.Pending,\n  };\n  /**\n   * callbacks that will be executed when task is resolved\n   */\n  resolvedCallbacks: ResolvedCallback<R>[] = [];\n  /**\n   * callbacks that will be executed when task is rejected\n   */\n  rejectedCallbacks: RejectedCallback<D>[] = [];\n\n  /**\n   * Promise that will be resolved when task is settled\n   */\n  private _promise: Promise<R> | null = null;\n\n  /**\n   * Convert task to promise\n   * @returns promise that will be resolved when task is settled\n   */\n  toPromise(): Promise<R> {\n    if (!this._promise) {\n      this._promise = new Promise((resolve, reject) => {\n        this.wait(\n          (result) => resolve(result),\n          (error) => {\n            if (error.type === 'abort') {\n              reject(new TaskAbortedError(error.reason));\n            } else {\n              reject(new TaskRejectedError(error.reason));\n            }\n          },\n        );\n      });\n    }\n    return this._promise;\n  }\n\n  /**\n   * wait for task to be settled\n   * @param resolvedCallback - callback for resolved value\n   * @param rejectedCallback - callback for rejected value\n   */\n  wait(resolvedCallback: ResolvedCallback<R>, rejectedCallback: RejectedCallback<D>) {\n    switch (this.state.stage) {\n      case TaskStage.Pending:\n        this.resolvedCallbacks.push(resolvedCallback);\n        this.rejectedCallbacks.push(rejectedCallback);\n        break;\n      case TaskStage.Resolved:\n        resolvedCallback(this.state.result);\n        break;\n      case TaskStage.Rejected:\n        rejectedCallback({\n          type: 'reject',\n          reason: this.state.reason,\n        });\n        break;\n      case TaskStage.Aborted:\n        rejectedCallback({\n          type: 'abort',\n          reason: this.state.reason,\n        });\n        break;\n    }\n  }\n\n  /**\n   * resolve task with specific result\n   * @param result - result value\n   */\n  resolve(result: R) {\n    if (this.state.stage === TaskStage.Pending) {\n      this.state = {\n        stage: TaskStage.Resolved,\n        result,\n      };\n      for (const resolvedCallback of this.resolvedCallbacks) {\n        try {\n          resolvedCallback(result);\n        } catch (e) {\n          /* ignore */\n        }\n      }\n      this.resolvedCallbacks = [];\n      this.rejectedCallbacks = [];\n    }\n  }\n\n  /**\n   * reject task with specific reason\n   * @param reason - abort reason\n   *\n   */\n  reject(reason: D) {\n    if (this.state.stage === TaskStage.Pending) {\n      this.state = {\n        stage: TaskStage.Rejected,\n        reason,\n      };\n      for (const rejectedCallback of this.rejectedCallbacks) {\n        try {\n          rejectedCallback({\n            type: 'reject',\n            reason,\n          });\n        } catch (e) {\n          /*ignore */\n        }\n      }\n      this.resolvedCallbacks = [];\n      this.rejectedCallbacks = [];\n    }\n  }\n\n  /**\n   * abort task with specific reason\n   * @param reason - abort reason\n   */\n  abort(reason: D) {\n    if (this.state.stage === TaskStage.Pending) {\n      this.state = {\n        stage: TaskStage.Aborted,\n        reason,\n      };\n      for (const rejectedCallback of this.rejectedCallbacks) {\n        try {\n          rejectedCallback({\n            type: 'abort',\n            reason,\n          });\n        } catch (e) {\n          /* ignore */\n        }\n      }\n      this.resolvedCallbacks = [];\n      this.rejectedCallbacks = [];\n    }\n  }\n\n  /**\n   * fail task with a TaskError from another task\n   * This is a convenience method for error propagation between tasks\n   * @param error - TaskError from another task\n   */\n  fail(error: TaskError<D>) {\n    if (error.type === 'abort') {\n      this.abort(error.reason);\n    } else {\n      this.reject(error.reason);\n    }\n  }\n\n  /**\n   * Static method to wait for all tasks to resolve\n   * Returns a new task that resolves with an array of all results\n   * Rejects immediately if any task fails\n   *\n   * @param tasks - array of tasks to wait for\n   * @returns new task that resolves when all input tasks resolve\n   * @public\n   */\n  static all<R extends readonly Task<any, any>[]>(\n    tasks: R,\n  ): Task<{ [K in keyof R]: R[K] extends Task<infer U, any> ? U : never }, any> {\n    type ResultType = { [K in keyof R]: R[K] extends Task<infer U, any> ? U : never };\n\n    const combinedTask = new Task<ResultType, any>();\n\n    if (tasks.length === 0) {\n      combinedTask.resolve([] as any);\n      return combinedTask;\n    }\n\n    const results: any[] = new Array(tasks.length);\n    let resolvedCount = 0;\n    let isSettled = false;\n\n    tasks.forEach((task, index) => {\n      task.wait(\n        (result) => {\n          if (isSettled) return;\n\n          results[index] = result;\n          resolvedCount++;\n\n          if (resolvedCount === tasks.length) {\n            isSettled = true;\n            combinedTask.resolve(results as ResultType);\n          }\n        },\n        (error) => {\n          if (isSettled) return;\n\n          isSettled = true;\n          if (error.type === 'abort') {\n            combinedTask.abort(error.reason);\n          } else {\n            combinedTask.reject(error.reason);\n          }\n        },\n      );\n    });\n\n    return combinedTask;\n  }\n\n  /**\n   * Static method to wait for all tasks to settle (resolve, reject, or abort)\n   * Always resolves with an array of settlement results\n   *\n   * @param tasks - array of tasks to wait for\n   * @returns new task that resolves when all input tasks settle\n   * @public\n   */\n  static allSettled<R extends readonly Task<any, any>[]>(\n    tasks: R,\n  ): Task<\n    { [K in keyof R]: R[K] extends Task<infer U, infer E> ? TaskSettledResult<U, E> : never },\n    never\n  > {\n    type ResultType = {\n      [K in keyof R]: R[K] extends Task<infer U, infer E> ? TaskSettledResult<U, E> : never;\n    };\n\n    const combinedTask = new Task<ResultType, never>();\n\n    if (tasks.length === 0) {\n      combinedTask.resolve([] as any);\n      return combinedTask;\n    }\n\n    const results: any[] = new Array(tasks.length);\n    let settledCount = 0;\n\n    tasks.forEach((task, index) => {\n      task.wait(\n        (result) => {\n          results[index] = { status: 'resolved', value: result };\n          settledCount++;\n\n          if (settledCount === tasks.length) {\n            combinedTask.resolve(results as ResultType);\n          }\n        },\n        (error) => {\n          results[index] = {\n            status: error.type === 'abort' ? 'aborted' : 'rejected',\n            reason: error.reason,\n          };\n          settledCount++;\n\n          if (settledCount === tasks.length) {\n            combinedTask.resolve(results as ResultType);\n          }\n        },\n      );\n    });\n\n    return combinedTask;\n  }\n\n  /**\n   * Static method that resolves/rejects with the first task that settles\n   *\n   * @param tasks - array of tasks to race\n   * @returns new task that settles with the first input task that settles\n   * @public\n   */\n  static race<R extends readonly Task<any, any>[]>(\n    tasks: R,\n  ): Task<\n    R[number] extends Task<infer U, any> ? U : never,\n    R[number] extends Task<any, infer E> ? E : never\n  > {\n    type ResultType = R[number] extends Task<infer U, any> ? U : never;\n    type ErrorType = R[number] extends Task<any, infer E> ? E : never;\n\n    const combinedTask = new Task<ResultType, ErrorType>();\n\n    if (tasks.length === 0) {\n      combinedTask.reject('No tasks provided' as ErrorType);\n      return combinedTask;\n    }\n\n    let isSettled = false;\n\n    tasks.forEach((task) => {\n      task.wait(\n        (result) => {\n          if (isSettled) return;\n          isSettled = true;\n          combinedTask.resolve(result);\n        },\n        (error) => {\n          if (isSettled) return;\n          isSettled = true;\n          if (error.type === 'abort') {\n            combinedTask.abort(error.reason);\n          } else {\n            combinedTask.reject(error.reason);\n          }\n        },\n      );\n    });\n\n    return combinedTask;\n  }\n\n  /**\n   * Utility to track progress of multiple tasks\n   *\n   * @param tasks - array of tasks to track\n   * @param onProgress - callback called when any task completes\n   * @returns new task that resolves when all input tasks resolve\n   * @public\n   */\n  static withProgress<R extends readonly Task<any, any>[]>(\n    tasks: R,\n    onProgress?: (completed: number, total: number) => void,\n  ): Task<{ [K in keyof R]: R[K] extends Task<infer U, any> ? U : never }, any> {\n    const combinedTask = Task.all(tasks);\n\n    if (onProgress) {\n      let completedCount = 0;\n      tasks.forEach((task) => {\n        task.wait(\n          () => {\n            completedCount++;\n            onProgress(completedCount, tasks.length);\n          },\n          () => {\n            completedCount++;\n            onProgress(completedCount, tasks.length);\n          },\n        );\n      });\n    }\n\n    return combinedTask;\n  }\n}\n\n/**\n * Type that represent the result of executing task\n */\nexport type TaskReturn<T extends Task<any, any>> =\n  T extends Task<infer R, infer E>\n    ? { type: 'result'; value: R } | { type: 'error'; value: TaskError<E> }\n    : never;\n","import { WebAlphaColor } from './color';\nimport { Size, Rect, Position, Rotation, Quad } from './geometry';\nimport { Task, TaskError } from './task';\n\n/**\n * Representation of pdf page\n *\n * @public\n */\nexport interface PdfPageObject {\n  /**\n   * Index of this page, starts from 0\n   */\n  index: number;\n\n  /**\n   * Orignal size of this page\n   */\n  size: Size;\n}\n\n/**\n * Representation of pdf page with rotated size\n *\n * @public\n */\nexport interface PdfPageObjectWithRotatedSize extends PdfPageObject {\n  /**\n   * Rotated size of this page\n   */\n  rotatedSize: Size;\n}\n\n/**\n * Representation of pdf document\n *\n * @public\n */\nexport interface PdfDocumentObject {\n  /**\n   * Identity of document\n   */\n  id: string;\n\n  /**\n   * Count of pages in this document\n   */\n  pageCount: number;\n\n  /**\n   * Pages in this document\n   */\n  pages: PdfPageObject[];\n}\n\n/**\n * metadata of pdf document\n *\n * @public\n */\nexport interface PdfMetadataObject {\n  /**\n   * title of the document\n   */\n  title: string;\n  /**\n   * author of the document\n   */\n  author: string;\n  /**\n   * subject of the document\n   */\n  subject: string;\n  /**\n   * keywords of the document\n   */\n  keywords: string;\n  /**\n   * producer of the document\n   */\n  producer: string;\n  /**\n   * creator of the document\n   */\n  creator: string;\n  /**\n   * creation date of the document\n   */\n  creationDate: string;\n  /**\n   * modification date of the document\n   */\n  modificationDate: string;\n}\n\n/**\n * Unicode **soft-hyphen** marker (`U+00AD`).\n * Often embedded by PDF generators as discretionary hyphens.\n *\n * @public\n */\nexport const PdfSoftHyphenMarker = '\\u00AD';\n\n/**\n * Unicode **zero-width space** (`U+200B`).\n *\n * @public\n */\nexport const PdfZeroWidthSpace = '\\u200B';\n\n/**\n * Unicode **word-joiner** (`U+2060`) – zero-width no-break.\n *\n * @public\n */\nexport const PdfWordJoiner = '\\u2060';\n\n/**\n * Unicode **byte-order mark / zero-width&nbsp;no-break space** (`U+FEFF`).\n *\n * @public\n */\nexport const PdfBomOrZwnbsp = '\\uFEFF';\n\n/**\n * Unicode non-character `U+FFFE`.\n *\n * @public\n */\nexport const PdfNonCharacterFFFE = '\\uFFFE';\n\n/**\n * Unicode non-character `U+FFFF`.\n *\n * @public\n */\nexport const PdfNonCharacterFFFF = '\\uFFFF';\n\n/**\n * **Frozen list** of all unwanted markers in canonical order.\n *\n * @public\n */\nexport const PdfUnwantedTextMarkers = Object.freeze([\n  PdfSoftHyphenMarker,\n  PdfZeroWidthSpace,\n  PdfWordJoiner,\n  PdfBomOrZwnbsp,\n  PdfNonCharacterFFFE,\n  PdfNonCharacterFFFF,\n] as const);\n\n/**\n * Compiled regular expression that matches any unwanted marker.\n *\n * @public\n */\nexport const PdfUnwantedTextRegex = new RegExp(`[${PdfUnwantedTextMarkers.join('')}]`, 'g');\n\n/**\n * Remove all {@link PdfUnwantedTextMarkers | unwanted markers} from *text*.\n *\n * @param text - raw text extracted from PDF\n * @returns cleaned text\n *\n * @public\n */\nexport function stripPdfUnwantedMarkers(text: string): string {\n  return text.replace(PdfUnwantedTextRegex, '');\n}\n\n/**\n * zoom mode\n *\n * @public\n */\nexport enum PdfZoomMode {\n  Unknown = 0,\n  /**\n   * Zoom level with specified offset.\n   */\n  XYZ = 1,\n  /**\n   * Fit both the width and height of the page (whichever smaller).\n   */\n  FitPage = 2,\n  /**\n   * Fit the page width.\n   */\n  FitHorizontal = 3,\n  /**\n   * Fit the page height.\n   */\n  FitVertical = 4,\n  /**\n   * Fit a specific rectangle area within the window.\n   */\n  FitRectangle = 5,\n}\n\n/**\n * Blend mode\n *\n * @public\n */\nexport enum PdfBlendMode {\n  Normal = 0,\n  Multiply = 1,\n  Screen = 2,\n  Overlay = 3,\n  Darken = 4,\n  Lighten = 5,\n  ColorDodge = 6,\n  ColorBurn = 7,\n  HardLight = 8,\n  SoftLight = 9,\n  Difference = 10,\n  Exclusion = 11,\n  Hue = 12,\n  Saturation = 13,\n  Color = 14,\n  Luminosity = 15,\n}\n\n/** Extra UI sentinel for “multiple different values selected”. */\nexport const MixedBlendMode = Symbol('mixed');\nexport type UiBlendModeValue = PdfBlendMode | typeof MixedBlendMode;\n\ninterface BlendModeInfo {\n  /** Pdf enum value */\n  id: PdfBlendMode;\n  /** Human label for UI */\n  label: string;\n  /** CSS mix-blend-mode token */\n  css: string;\n}\n\n/** Canonical ordered descriptor list (matches enum numeric order). */\nconst BLEND_MODE_INFOS: readonly BlendModeInfo[] = Object.freeze([\n  { id: PdfBlendMode.Normal, label: 'Normal', css: 'normal' },\n  { id: PdfBlendMode.Multiply, label: 'Multiply', css: 'multiply' },\n  { id: PdfBlendMode.Screen, label: 'Screen', css: 'screen' },\n  { id: PdfBlendMode.Overlay, label: 'Overlay', css: 'overlay' },\n  { id: PdfBlendMode.Darken, label: 'Darken', css: 'darken' },\n  { id: PdfBlendMode.Lighten, label: 'Lighten', css: 'lighten' },\n  { id: PdfBlendMode.ColorDodge, label: 'Color Dodge', css: 'color-dodge' },\n  { id: PdfBlendMode.ColorBurn, label: 'Color Burn', css: 'color-burn' },\n  { id: PdfBlendMode.HardLight, label: 'Hard Light', css: 'hard-light' },\n  { id: PdfBlendMode.SoftLight, label: 'Soft Light', css: 'soft-light' },\n  { id: PdfBlendMode.Difference, label: 'Difference', css: 'difference' },\n  { id: PdfBlendMode.Exclusion, label: 'Exclusion', css: 'exclusion' },\n  { id: PdfBlendMode.Hue, label: 'Hue', css: 'hue' },\n  { id: PdfBlendMode.Saturation, label: 'Saturation', css: 'saturation' },\n  { id: PdfBlendMode.Color, label: 'Color', css: 'color' },\n  { id: PdfBlendMode.Luminosity, label: 'Luminosity', css: 'luminosity' },\n]);\n\n/* Build O(1) maps once */\nconst enumToInfo: Record<PdfBlendMode, BlendModeInfo> = BLEND_MODE_INFOS.reduce(\n  (m, info) => {\n    m[info.id] = info;\n    return m;\n  },\n  {} as Record<PdfBlendMode, BlendModeInfo>,\n);\n\nconst cssToEnum = BLEND_MODE_INFOS.reduce<Record<string, PdfBlendMode>>((m, info) => {\n  m[info.css] = info.id;\n  return m;\n}, {});\n\n/** Get descriptor (falls back to Normal if unknown number sneaks in).\n *\n * @public\n */\nexport function getBlendModeInfo(mode: PdfBlendMode): BlendModeInfo {\n  return enumToInfo[mode] ?? enumToInfo[PdfBlendMode.Normal];\n}\n\n/** Convert enum → CSS value for `mix-blend-mode`.\n *\n * @public\n */\nexport function blendModeToCss(mode: PdfBlendMode): string {\n  return getBlendModeInfo(mode).css;\n}\n\n/** Convert CSS token → enum (returns undefined if not recognized).\n *\n * @public\n */\nexport function cssToBlendMode(value: string): PdfBlendMode | undefined {\n  return cssToEnum[value as keyof typeof cssToEnum];\n}\n\n/** Enum → UI label.\n *\n * @public\n */\nexport function blendModeLabel(mode: PdfBlendMode): string {\n  return getBlendModeInfo(mode).label;\n}\n\n/**\n * For a selection of annotations: returns the common enum value, or Mixed sentinel.\n *\n * @public\n */\nexport function reduceBlendModes(modes: readonly PdfBlendMode[]): UiBlendModeValue {\n  if (!modes.length) return PdfBlendMode.Normal;\n  const first = modes[0];\n  return modes.every((m) => m === first) ? first : MixedBlendMode;\n}\n\n/** Options for a <select>.\n *\n * @public\n */\nexport const blendModeSelectOptions = BLEND_MODE_INFOS.map((info) => ({\n  value: info.id,\n  label: info.label,\n}));\n\n/** Provide a label when Mixed sentinel used (UI convenience).\n *\n * @public\n */\nexport function uiBlendModeDisplay(value: UiBlendModeValue): string {\n  return value === MixedBlendMode ? '(mixed)' : blendModeLabel(value);\n}\n\n/**\n * Representation of the linked destination\n *\n * @public\n */\nexport interface PdfDestinationObject {\n  /**\n   * Index of target page\n   */\n  pageIndex: number;\n  /**\n   * zoom config for target destination\n   */\n  zoom:\n    | {\n        mode: PdfZoomMode.Unknown;\n      }\n    | { mode: PdfZoomMode.XYZ; params: { x: number; y: number; zoom: number } }\n    | {\n        mode: PdfZoomMode.FitPage;\n      }\n    | {\n        mode: PdfZoomMode.FitHorizontal;\n      }\n    | {\n        mode: PdfZoomMode.FitVertical;\n      }\n    | {\n        mode: PdfZoomMode.FitRectangle;\n      };\n  view: number[];\n}\n\n/**\n * Type of pdf action\n *\n * @public\n */\nexport enum PdfActionType {\n  Unsupported = 0,\n  /**\n   * Goto specified position in this document\n   */\n  Goto = 1,\n  /**\n   * Goto specified position in another document\n   */\n  RemoteGoto = 2,\n  /**\n   * Goto specified URI\n   */\n  URI = 3,\n  /**\n   * Launch specifed application\n   */\n  LaunchAppOrOpenFile = 4,\n}\n\nexport type PdfImage = {\n  data: Uint8ClampedArray;\n  width: number;\n  height: number;\n};\n\n/**\n * Representation of pdf action\n *\n * @public\n */\nexport type PdfActionObject =\n  | {\n      type: PdfActionType.Unsupported;\n    }\n  | {\n      type: PdfActionType.Goto;\n      destination: PdfDestinationObject;\n    }\n  | {\n      type: PdfActionType.RemoteGoto;\n      destination: PdfDestinationObject;\n    }\n  | {\n      type: PdfActionType.URI;\n      uri: string;\n    }\n  | {\n      type: PdfActionType.LaunchAppOrOpenFile;\n      path: string;\n    };\n\n/**\n * target of pdf link\n *\n * @public\n */\nexport type PdfLinkTarget =\n  | {\n      type: 'action';\n      action: PdfActionObject;\n    }\n  | {\n      type: 'destination';\n      destination: PdfDestinationObject;\n    };\n\n/**\n * PDF bookmark\n *\n * @public\n */\nexport interface PdfBookmarkObject {\n  /**\n   * title of bookmark\n   */\n  title: string;\n\n  /**\n   * target of bookmark\n   */\n  target?: PdfLinkTarget | undefined;\n\n  /**\n   * bookmarks in the next level\n   */\n  children?: PdfBookmarkObject[];\n}\n\n/**\n * Pdf Signature\n *\n * @public\n */\nexport interface PdfSignatureObject {\n  /**\n   * contents of signature\n   */\n  contents: ArrayBuffer;\n\n  /**\n   * byte range of signature\n   */\n  byteRange: ArrayBuffer;\n\n  /**\n   * sub filters of signature\n   */\n  subFilter: ArrayBuffer;\n\n  /**\n   * reason of signature\n   */\n  reason: string;\n\n  /**\n   * creation time of signature\n   */\n  time: string;\n\n  /**\n   * MDP\n   */\n  docMDP: number;\n}\n\n/**\n * Bookmark tree of pdf\n *\n * @public\n */\nexport interface PdfBookmarksObject {\n  bookmarks: PdfBookmarkObject[];\n}\n\n/**\n * Text rectangle in pdf page\n *\n * @public\n */\nexport interface PdfTextRectObject {\n  /**\n   * Font of the text\n   */\n  font: {\n    /**\n     * font family\n     */\n    family: string;\n\n    /**\n     * font size\n     */\n    size: number;\n  };\n\n  /**\n   * content in this rectangle area\n   */\n  content: string;\n\n  /**\n   * rectangle of the text\n   */\n  rect: Rect;\n}\n\n/**\n * Color\n *\n * @public\n */\nexport interface PdfAlphaColor {\n  /**\n   * red\n   */\n  red: number;\n  /**\n   * green\n   */\n  green: number;\n  /**\n   * blue\n   */\n  blue: number;\n  /**\n   * alpha\n   */\n  alpha: number;\n}\n\n/**\n * Annotation type\n *\n * @public\n */\nexport enum PdfAnnotationSubtype {\n  UNKNOWN = 0,\n  TEXT,\n  LINK,\n  FREETEXT,\n  LINE,\n  SQUARE,\n  CIRCLE,\n  POLYGON,\n  POLYLINE,\n  HIGHLIGHT,\n  UNDERLINE,\n  SQUIGGLY,\n  STRIKEOUT,\n  STAMP,\n  CARET,\n  INK,\n  POPUP,\n  FILEATTACHMENT,\n  SOUND,\n  MOVIE,\n  WIDGET,\n  SCREEN,\n  PRINTERMARK,\n  TRAPNET,\n  WATERMARK,\n  THREED,\n  RICHMEDIA,\n  XFAWIDGET,\n  REDACT,\n}\n\n/**\n * Name of annotation type\n *\n * @public\n */\nexport const PdfAnnotationSubtypeName: Record<PdfAnnotationSubtype, string> = {\n  [PdfAnnotationSubtype.UNKNOWN]: 'unknow',\n  [PdfAnnotationSubtype.TEXT]: 'text',\n  [PdfAnnotationSubtype.LINK]: 'link',\n  [PdfAnnotationSubtype.FREETEXT]: 'freetext',\n  [PdfAnnotationSubtype.LINE]: 'line',\n  [PdfAnnotationSubtype.SQUARE]: 'square',\n  [PdfAnnotationSubtype.CIRCLE]: 'circle',\n  [PdfAnnotationSubtype.POLYGON]: 'polygon',\n  [PdfAnnotationSubtype.POLYLINE]: 'polyline',\n  [PdfAnnotationSubtype.HIGHLIGHT]: 'highlight',\n  [PdfAnnotationSubtype.UNDERLINE]: 'underline',\n  [PdfAnnotationSubtype.SQUIGGLY]: 'squiggly',\n  [PdfAnnotationSubtype.STRIKEOUT]: 'strikeout',\n  [PdfAnnotationSubtype.STAMP]: 'stamp',\n  [PdfAnnotationSubtype.CARET]: 'caret',\n  [PdfAnnotationSubtype.INK]: 'ink',\n  [PdfAnnotationSubtype.POPUP]: 'popup',\n  [PdfAnnotationSubtype.FILEATTACHMENT]: 'fileattachment',\n  [PdfAnnotationSubtype.SOUND]: 'sound',\n  [PdfAnnotationSubtype.MOVIE]: 'movie',\n  [PdfAnnotationSubtype.WIDGET]: 'widget',\n  [PdfAnnotationSubtype.SCREEN]: 'screen',\n  [PdfAnnotationSubtype.PRINTERMARK]: 'printermark',\n  [PdfAnnotationSubtype.TRAPNET]: 'trapnet',\n  [PdfAnnotationSubtype.WATERMARK]: 'watermark',\n  [PdfAnnotationSubtype.THREED]: 'threed',\n  [PdfAnnotationSubtype.RICHMEDIA]: 'richmedia',\n  [PdfAnnotationSubtype.XFAWIDGET]: 'xfawidget',\n  [PdfAnnotationSubtype.REDACT]: 'redact',\n};\n\n/**\n * Status of pdf annotation\n *\n * @public\n */\nexport enum PdfAnnotationObjectStatus {\n  /**\n   * Annotation is created\n   */\n  Created,\n  /**\n   * Annotation is committed to PDF file\n   */\n  Committed,\n}\n\n/**\n * Appearance mode\n *\n * @public\n */\nexport enum AppearanceMode {\n  Normal = 0,\n  Rollover = 1,\n  Down = 2,\n}\n\n/**\n * State of pdf annotation\n *\n * @public\n */\nexport enum PdfAnnotationState {\n  /**\n   * Annotation is active\n   */\n  Marked = 'Marked',\n  /**\n   * Annotation is unmarked\n   */\n  Unmarked = 'Unmarked',\n  /**\n   * Annotation is ink\n   */\n  Accepted = 'Accepted',\n  /**\n   * Annotation is rejected\n   */\n  Rejected = 'Rejected',\n  /**\n   * Annotation is complete\n   */\n  Complete = 'Complete',\n  /**\n   * Annotation is cancelled\n   */\n  Cancelled = 'Cancelled',\n  /**\n   * Annotation is none\n   */\n  None = 'None',\n}\n\n/**\n * State model of pdf annotation\n *\n * @public\n */\nexport enum PdfAnnotationStateModel {\n  /**\n   * Annotation is marked\n   */\n  Marked = 'Marked',\n  /**\n   * Annotation is reviewed\n   */\n  Reviewed = 'Reviewed',\n}\n\n/**\n * Basic information of pdf annotation\n *\n * @public\n */\nexport interface PdfAnnotationObjectBase {\n  /**\n   * Author of the annotation\n   */\n  author?: string;\n\n  /**\n   * Modified date of the annotation\n   */\n  modified?: Date;\n\n  /**\n   * blend mode of annotation\n   */\n  blendMode?: PdfBlendMode;\n\n  /**\n   * intent of annotation\n   */\n  intent?: string;\n\n  /**\n   * Sub type of annotation\n   */\n  type: PdfAnnotationSubtype;\n\n  /**\n   * The index of page that this annotation belong to\n   */\n  pageIndex: number;\n\n  /**\n   * id of the annotation\n   */\n  id: number;\n\n  /**\n   * Rectangle of the annotation\n   */\n  rect: Rect;\n}\n\n/**\n * Popup annotation\n *\n * @public\n */\nexport interface PdfPopupAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.POPUP;\n  /**\n   * Contents of the popup\n   */\n  contents: string;\n\n  /**\n   * Whether the popup is opened or not\n   */\n  open: boolean;\n\n  /**\n   * In reply to id\n   */\n  inReplyToId?: number;\n}\n\n/**\n * Pdf Link annotation\n *\n * @public\n */\nexport interface PdfLinkAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.LINK;\n  /**\n   * Text of the link\n   */\n  text: string;\n  /**\n   * target of the link\n   */\n  target: PdfLinkTarget | undefined;\n}\n\n/**\n * Pdf Text annotation\n *\n * @public\n */\nexport interface PdfTextAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.TEXT;\n  /**\n   * Text contents of the annotation\n   */\n  contents: string;\n\n  /**\n   * color of text annotation\n   */\n  color?: string;\n\n  /**\n   * opacity of text annotation\n   */\n  opacity?: number;\n\n  /**\n   * In reply to id\n   */\n  inReplyToId?: number;\n\n  /**\n   * State of the text annotation\n   */\n  state?: PdfAnnotationState;\n\n  /**\n   * State model of the text annotation\n   */\n  stateModel?: PdfAnnotationStateModel;\n}\n\n/**\n * Type of form field\n *\n * @public\n */\nexport enum PDF_FORM_FIELD_TYPE {\n  /**\n   * Unknow\n   */\n  UNKNOWN = 0,\n  /**\n   * push button type\n   */\n  PUSHBUTTON = 1,\n  /**\n   * check box type.\n   */\n  CHECKBOX = 2,\n  /**\n   * radio button type.\n   */\n  RADIOBUTTON = 3,\n  /**\n   * combo box type.\n   */\n  COMBOBOX = 4,\n  /**\n   * list box type.\n   */\n  LISTBOX = 5,\n  /**\n   *  text field type\n   */\n  TEXTFIELD = 6,\n  /**\n   * signature field type.\n   */\n  SIGNATURE = 7,\n  /**\n   * Generic XFA type.\n   */\n  XFA = 8,\n  /**\n   * XFA check box type.\n   */\n  XFA_CHECKBOX = 9,\n  /**\n   * XFA combo box type.\n   */\n  XFA_COMBOBOX = 10,\n  /**\n   * XFA image field type.\n   */\n  XFA_IMAGEFIELD = 11,\n  /**\n   * XFA list box type.\n   */\n  XFA_LISTBOX = 12,\n  /**\n   * XFA push button type.\n   */\n  XFA_PUSHBUTTON = 13,\n  /**\n   * XFA signture field type.\n   */\n  XFA_SIGNATURE = 14,\n  /**\n   * XFA text field type.\n   */\n  XFA_TEXTFIELD = 15,\n}\n\nexport enum PdfAnnotationColorType {\n  Color = 0,\n  InteriorColor = 1,\n}\n\n/**\n * Border style of pdf annotation\n *\n * @public\n */\nexport enum PdfAnnotationBorderStyle {\n  UNKNOWN = 0,\n  SOLID = 1,\n  DASHED = 2,\n  BEVELED = 3,\n  INSET = 4,\n  UNDERLINE = 5,\n  CLOUDY = 6,\n}\n\n/**\n * Flag of pdf annotation\n *\n * @public\n */\nexport enum PdfAnnotationFlags {\n  NONE = 0,\n  INVISIBLE = 1 << 0,\n  HIDDEN = 1 << 1,\n  PRINT = 1 << 2,\n  NO_ZOOM = 1 << 3,\n  NO_ROTATE = 1 << 4,\n  NO_VIEW = 1 << 5,\n  READ_ONLY = 1 << 6,\n  LOCKED = 1 << 7,\n  TOGGLE_NOVIEW = 1 << 8,\n}\n\n/**\n * Flag of form field\n *\n * @public\n */\nexport enum PDF_FORM_FIELD_FLAG {\n  NONE = 0,\n  READONLY = 1 << 0,\n  REQUIRED = 1 << 1,\n  NOEXPORT = 1 << 2,\n  TEXT_MULTIPLINE = 1 << 12,\n  TEXT_PASSWORD = 1 << 13,\n  CHOICE_COMBO = 1 << 17,\n  CHOICE_EDIT = 1 << 18,\n  CHOICE_MULTL_SELECT = 1 << 21,\n}\n\n/**\n * Type of pdf object\n *\n * @public\n */\nexport enum PdfPageObjectType {\n  UNKNOWN = 0,\n  TEXT = 1,\n  PATH = 2,\n  IMAGE = 3,\n  SHADING = 4,\n  FORM = 5,\n}\n\n/**\n * Options of pdf widget annotation\n *\n * @public\n */\nexport interface PdfWidgetAnnoOption {\n  label: string;\n  isSelected: boolean;\n}\n\nexport type PdfAnnotationFlagName =\n  | 'invisible'\n  | 'hidden'\n  | 'print'\n  | 'noZoom'\n  | 'noRotate'\n  | 'noView'\n  | 'readOnly'\n  | 'locked'\n  | 'toggleNoView';\n\ntype FlagMap = Partial<\n  Record<Exclude<PdfAnnotationFlags, PdfAnnotationFlags.NONE>, PdfAnnotationFlagName>\n>;\n\nexport const PdfAnnotationFlagName: Readonly<FlagMap> = Object.freeze({\n  [PdfAnnotationFlags.INVISIBLE]: 'invisible',\n  [PdfAnnotationFlags.HIDDEN]: 'hidden',\n  [PdfAnnotationFlags.PRINT]: 'print',\n  [PdfAnnotationFlags.NO_ZOOM]: 'noZoom',\n  [PdfAnnotationFlags.NO_ROTATE]: 'noRotate',\n  [PdfAnnotationFlags.NO_VIEW]: 'noView',\n  [PdfAnnotationFlags.READ_ONLY]: 'readOnly',\n  [PdfAnnotationFlags.LOCKED]: 'locked',\n  [PdfAnnotationFlags.TOGGLE_NOVIEW]: 'toggleNoView',\n} as const);\n\n/** Build a reverse map once so look-ups are O(1)                      */\nconst PdfAnnotationFlagValue: Record<PdfAnnotationFlagName, PdfAnnotationFlags> = Object.entries(\n  PdfAnnotationFlagName,\n).reduce(\n  (acc, [bit, name]) => {\n    acc[name as PdfAnnotationFlagName] = Number(bit) as PdfAnnotationFlags;\n    return acc;\n  },\n  {} as Record<PdfAnnotationFlagName, PdfAnnotationFlags>,\n);\n\n/**\n * Convert the raw bit-mask coming from `FPDFAnnot_GetFlags()` into\n * an array of human-readable flag names (“invisible”, “print”…).\n */\nexport function flagsToNames(raw: number): PdfAnnotationFlagName[] {\n  return (\n    Object.keys(PdfAnnotationFlagName) as unknown as Exclude<\n      PdfAnnotationFlags,\n      PdfAnnotationFlags.NONE\n    >[]\n  )\n    .filter((flag) => (raw & flag) !== 0)\n    .map((flag) => PdfAnnotationFlagName[flag]!);\n}\n\n/**\n * Convert an array of flag-names back into the numeric mask that\n * PDFium expects for `FPDFAnnot_SetFlags()`.\n */\nexport function namesToFlags(names: readonly PdfAnnotationFlagName[]): PdfAnnotationFlags {\n  return names.reduce<PdfAnnotationFlags>(\n    (mask, name) => mask | PdfAnnotationFlagValue[name],\n    PdfAnnotationFlags.NONE,\n  );\n}\n\n/**\n * Field of PDF widget annotation\n *\n * @public\n */\nexport interface PdfWidgetAnnoField {\n  /**\n   * flag of field\n   */\n  flag: PDF_FORM_FIELD_FLAG;\n  /**\n   * name of field\n   */\n  name: string;\n  /**\n   * alternate name of field\n   */\n  alternateName: string;\n  /**\n   * type of field\n   */\n  type: PDF_FORM_FIELD_TYPE;\n  /**\n   * value of field\n   */\n  value: string;\n  /**\n   * whether field is checked\n   */\n  isChecked: boolean;\n  /**\n   * options of field\n   */\n  options: PdfWidgetAnnoOption[];\n}\n\n/**\n * PDF widget object\n *\n * @public\n */\nexport interface PdfWidgetAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.WIDGET;\n  /**\n   * Field of pdf widget object\n   */\n  field: PdfWidgetAnnoField;\n}\n\n/**\n * Pdf file attachments annotation\n *\n * @public\n */\nexport interface PdfFileAttachmentAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.FILEATTACHMENT;\n}\n\n/**\n * ink list in pdf ink annotation\n *\n * @public\n */\nexport interface PdfInkListObject {\n  points: Position[];\n}\n\n/**\n * Pdf ink annotation\n *\n * @public\n */\nexport interface PdfInkAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.INK;\n  /**\n   * ink list of annotation\n   */\n  inkList: PdfInkListObject[];\n  /**\n   * color of ink annotation\n   */\n  color: string;\n\n  /**\n   * opacity of ink annotation\n   */\n  opacity: number;\n\n  /**\n   * stroke-width of ink annotation\n   */\n  strokeWidth: number;\n}\n\n/**\n * Pdf polygon annotation\n *\n * @public\n */\nexport interface PdfPolygonAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.POLYGON;\n  /**\n   * vertices of annotation\n   */\n  vertices: Position[];\n}\n\n/**\n * PDF polyline annotation\n *\n * @public\n */\nexport interface PdfPolylineAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.POLYLINE;\n  /**\n   * vertices of annotation\n   */\n  vertices: Position[];\n}\n\n/**\n * PDF line annotation\n *\n * @public\n */\nexport interface PdfLineAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.LINE;\n  /**\n   * start point of line\n   */\n  startPoint: Position;\n  /**\n   * end point of line\n   */\n  endPoint: Position;\n}\n\n/**\n * PDF highlight annotation\n *\n * @public\n */\nexport interface PdfHighlightAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.HIGHLIGHT;\n\n  /**\n   * Text contents of the highlight annotation\n   */\n  contents?: string;\n\n  /**\n   * color of highlight annotation\n   */\n  color: string;\n\n  /**\n   * opacity of highlight annotation\n   */\n  opacity: number;\n\n  /**\n   * quads of highlight area\n   */\n  segmentRects: Rect[];\n}\n\n/**\n * Matrix for transformation, in the form [a b c d e f], equivalent to:\n * | a  b  0 |\n * | c  d  0 |\n * | e  f  1 |\n *\n * Translation is performed with [1 0 0 1 tx ty].\n * Scaling is performed with [sx 0 0 sy 0 0].\n * See PDF Reference 1.7, 4.2.2 Common Transformations for more.\n */\nexport interface PdfTransformMatrix {\n  a: number;\n  b: number;\n  c: number;\n  d: number;\n  e: number;\n  f: number;\n}\n\n/**\n * type of segment type in pdf path object\n *\n * @public\n */\nexport enum PdfSegmentObjectType {\n  UNKNOWN = -1,\n  LINETO = 0,\n  BEZIERTO = 1,\n  MOVETO = 2,\n}\n\n/**\n * segment of path object\n *\n * @public\n */\nexport interface PdfSegmentObject {\n  type: PdfSegmentObjectType;\n  /**\n   * point of the segment\n   */\n  point: Position;\n  /**\n   * whether this segment close the path\n   */\n  isClosed: boolean;\n}\n\n/**\n * Pdf path object\n *\n * @public\n */\nexport interface PdfPathObject {\n  type: PdfPageObjectType.PATH;\n  /**\n   * bound that contains the path\n   */\n  bounds: { left: number; bottom: number; right: number; top: number };\n  /**\n   * segments of the path\n   */\n  segments: PdfSegmentObject[];\n  /**\n   * transform matrix\n   */\n  matrix: PdfTransformMatrix;\n}\n\n/**\n * Pdf image object\n *\n * @public\n */\nexport interface PdfImageObject {\n  type: PdfPageObjectType.IMAGE;\n  /**\n   * data of the image\n   */\n  imageData: ImageData;\n  /**\n   * transform matrix\n   */\n  matrix: PdfTransformMatrix;\n}\n\n/**\n * Pdf form object\n *\n * @public\n */\nexport interface PdfFormObject {\n  type: PdfPageObjectType.FORM;\n  /**\n   * objects that in this form object\n   */\n  objects: (PdfImageObject | PdfPathObject | PdfFormObject)[];\n  /**\n   * transform matrix\n   */\n  matrix: PdfTransformMatrix;\n}\n\n/**\n * Contents type of pdf stamp annotation\n *\n * @public\n */\nexport type PdfStampAnnoObjectContents = Array<PdfPathObject | PdfImageObject | PdfFormObject>;\n\n/**\n * Pdf stamp annotation\n *\n * @public\n */\nexport interface PdfStampAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.STAMP;\n  /**\n   * contents in this stamp annotation\n   */\n  contents: PdfStampAnnoObjectContents;\n}\n\n/**\n * Pdf circle annotation\n *\n * @public\n */\nexport interface PdfCircleAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.CIRCLE;\n  /**\n   * flags of circle annotation\n   */\n  flags: PdfAnnotationFlagName[];\n  /**\n   * color of circle annotation\n   */\n  color: string;\n  /**\n   * opacity of circle annotation\n   */\n  opacity: number;\n  /**\n   * stroke-width of circle annotation\n   */\n  strokeWidth: number;\n  /**\n   * stroke color of circle annotation\n   */\n  strokeColor: string;\n  /**\n   * stroke style of circle annotation\n   */\n  strokeStyle: PdfAnnotationBorderStyle;\n  /**\n   * stroke dash array of circle annotation\n   */\n  strokeDashArray?: number[];\n  /**\n   * cloudy border intensity of circle annotation\n   */\n  cloudyBorderIntensity?: number;\n  /**\n   * cloudy border inset of circle annotation\n   */\n  cloudyBorderInset?: number[];\n}\n\n/**\n * Pdf square annotation\n *\n * @public\n */\nexport interface PdfSquareAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.SQUARE;\n  /**\n   * flags of square annotation\n   */\n  flags: PdfAnnotationFlagName[];\n  /**\n   * color of square annotation\n   */\n  color: string;\n  /**\n   * opacity of square annotation\n   */\n  opacity: number;\n  /**\n   * stroke-width of square annotation\n   */\n  strokeWidth: number;\n  /**\n   * stroke color of square annotation\n   */\n  strokeColor: string;\n  /**\n   * stroke style of square annotation\n   */\n  strokeStyle: PdfAnnotationBorderStyle;\n  /**\n   * stroke dash array of square annotation\n   */\n  strokeDashArray?: number[];\n  /**\n   * cloudy border intensity of circle annotation\n   */\n  cloudyBorderIntensity?: number;\n  /**\n   * cloudy border inset of circle annotation\n   */\n  cloudyBorderInset?: number[];\n}\n\n/**\n * Pdf squiggly annotation\n *\n * @public\n */\nexport interface PdfSquigglyAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.SQUIGGLY;\n  /**\n   * Text contents of the highlight annotation\n   */\n  contents?: string;\n  /**\n   * color of strike out annotation\n   */\n  color: string;\n\n  /**\n   * opacity of strike out annotation\n   */\n  opacity: number;\n  /**\n   * quads of highlight area\n   */\n  segmentRects: Rect[];\n}\n\n/**\n * Pdf underline annotation\n *\n * @public\n */\nexport interface PdfUnderlineAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.UNDERLINE;\n  /**\n   * Text contents of the highlight annotation\n   */\n  contents?: string;\n  /**\n   * color of strike out annotation\n   */\n  color: string;\n\n  /**\n   * opacity of strike out annotation\n   */\n  opacity: number;\n  /**\n   * quads of highlight area\n   */\n  segmentRects: Rect[];\n}\n\n/**\n * Pdf strike out annotation\n *\n * @public\n */\nexport interface PdfStrikeOutAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.STRIKEOUT;\n  /**\n   * Text contents of the strike out annotation\n   */\n  contents?: string;\n\n  /**\n   * color of strike out annotation\n   */\n  color: string;\n\n  /**\n   * opacity of strike out annotation\n   */\n  opacity: number;\n\n  /**\n   * quads of highlight area\n   */\n  segmentRects: Rect[];\n}\n\n/**\n * Pdf caret annotation\n *\n * @public\n */\nexport interface PdfCaretAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.CARET;\n}\n\n/**\n * Pdf free text annotation\n *\n * @public\n */\nexport interface PdfFreeTextAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.FREETEXT;\n  contents: string;\n  richContent?: string;\n}\n\n/**\n * All annotation that support\n *\n * @public\n */\nexport type PdfSupportedAnnoObject =\n  | PdfInkAnnoObject\n  | PdfTextAnnoObject\n  | PdfLinkAnnoObject\n  | PdfPolygonAnnoObject\n  | PdfPolylineAnnoObject\n  | PdfHighlightAnnoObject\n  | PdfLineAnnoObject\n  | PdfWidgetAnnoObject\n  | PdfFileAttachmentAnnoObject\n  | PdfStampAnnoObject\n  | PdfSquareAnnoObject\n  | PdfCircleAnnoObject\n  | PdfSquigglyAnnoObject\n  | PdfUnderlineAnnoObject\n  | PdfStrikeOutAnnoObject\n  | PdfCaretAnnoObject\n  | PdfFreeTextAnnoObject;\n\n/**\n * Pdf annotation that does not support\n *\n * @public\n */\nexport interface PdfUnsupportedAnnoObject extends PdfAnnotationObjectBase {\n  type: Exclude<PdfAnnotationSubtype, PdfSupportedAnnoObject['type']>;\n}\n\n/**\n * all annotations\n *\n * @public\n */\nexport type PdfAnnotationObject = PdfSupportedAnnoObject | PdfUnsupportedAnnoObject;\n\n/**\n * Pdf attachment\n *\n * @public\n */\nexport interface PdfAttachmentObject {\n  index: number;\n  name: string;\n  creationDate: string;\n  checksum: string;\n}\n\n/**\n * Pdf engine features\n *\n * @public\n */\nexport enum PdfEngineFeature {\n  RenderPage,\n  RenderPageRect,\n  Thumbnails,\n  Bookmarks,\n  Annotations,\n}\n\n/**\n * All operations for this engine\n *\n * @public\n */\nexport enum PdfEngineOperation {\n  Create,\n  Read,\n  Update,\n  Delete,\n}\n\n/**\n * flags to match the text during searching\n *\n * @public\n */\nexport enum MatchFlag {\n  None = 0,\n  MatchCase = 1,\n  MatchWholeWord = 2,\n  MatchConsecutive = 4,\n}\n\n/**\n * Union all the flags\n * @param flags - all the flags\n * @returns union of flags\n *\n * @public\n */\nexport function unionFlags(flags: MatchFlag[]) {\n  return flags.reduce((flag, currFlag) => {\n    return flag | currFlag;\n  }, MatchFlag.None);\n}\n\n/**\n * Image conversion types\n *\n * @public\n */\nexport type ImageConversionTypes = 'image/webp' | 'image/png' | 'image/jpeg';\n\n/**\n * Targe for searching\n *\n * @public\n */\nexport interface SearchTarget {\n  keyword: string;\n  flags: MatchFlag[];\n}\n\n/**\n * compare 2 search target\n * @param targetA - first target for search\n * @param targetB - second target for search\n * @returns whether 2 search target are the same\n *\n * @public\n */\nexport function compareSearchTarget(targetA: SearchTarget, targetB: SearchTarget) {\n  const flagA = unionFlags(targetA.flags);\n  const flagB = unionFlags(targetB.flags);\n\n  return flagA === flagB && targetA.keyword === targetB.keyword;\n}\n\n/** Context of one hit */\nexport interface TextContext {\n  /** Complete words that come *before* the hit (no ellipsis)            */\n  before: string;\n  /** Exactly the text that matched (case-preserved)                      */\n  match: string;\n  /** Complete words that come *after* the hit (no ellipsis)             */\n  after: string;\n  /** `true` ⇢ there were more words on the left that we cut off         */\n  truncatedLeft: boolean;\n  /** `true` ⇢ there were more words on the right that we cut off        */\n  truncatedRight: boolean;\n}\n\n/**\n * Text slice\n *\n * @public\n */\nexport interface PageTextSlice {\n  /**\n   * Index of the pdf page\n   */\n  pageIndex: number;\n  /**\n   * Index of the first character\n   */\n  charIndex: number;\n  /**\n   * Count of the characters\n   */\n  charCount: number;\n}\n\n/**\n * search result\n *\n * @public\n */\nexport interface SearchResult {\n  /**\n   * Index of the pdf page\n   */\n  pageIndex: number;\n  /**\n   * index of the first character\n   */\n  charIndex: number;\n  /**\n   * count of the characters\n   */\n  charCount: number;\n  /**\n   * highlight rects\n   */\n  rects: Rect[];\n  /**\n   * context of the hit\n   */\n  context: TextContext;\n}\n\n/**\n * Results of searching through the entire document\n */\nexport interface SearchAllPagesResult {\n  /**\n   * Array of all search results across all pages\n   */\n  results: SearchResult[];\n\n  /**\n   * Total number of results found\n   */\n  total: number;\n}\n\n/**\n * Glyph object\n *\n * @public\n */\nexport interface PdfGlyphObject {\n  /**\n   * Origin of the glyph\n   */\n  origin: { x: number; y: number };\n  /**\n   * Size of the glyph\n   */\n  size: { width: number; height: number };\n  /**\n   * Whether the glyph is a space\n   */\n  isSpace?: boolean;\n  /**\n   * Whether the glyph is a empty\n   */\n  isEmpty?: boolean;\n}\n\n/**\n * Glyph object\n *\n * @public\n */\nexport interface PdfGlyphSlim {\n  /**\n   * X coordinate of the glyph\n   */\n  x: number;\n  /**\n   * Y coordinate of the glyph\n   */\n  y: number;\n  /**\n   * Width of the glyph\n   */\n  width: number;\n  /**\n   * Height of the glyph\n   */\n  height: number;\n  /**\n   * Flags of the glyph\n   */\n  flags: number;\n}\n\n/**\n * Run object\n *\n * @public\n */\nexport interface PdfRun {\n  /**\n   * Rectangle of the run\n   */\n  rect: { x: number; y: number; width: number; height: number };\n  /**\n   * Start index of the run\n   */\n  charStart: number;\n  /**\n   * Glyphs of the run\n   */\n  glyphs: PdfGlyphSlim[];\n}\n\n/**\n * Page geometry\n *\n * @public\n */\nexport interface PdfPageGeometry {\n  /**\n   * Runs of the page\n   */\n  runs: PdfRun[];\n}\n\n/**\n * form field value\n * @public\n */\nexport type FormFieldValue =\n  | { kind: 'text'; text: string }\n  | { kind: 'selection'; index: number; isSelected: boolean }\n  | { kind: 'checked'; isChecked: boolean };\n\n/**\n * Transformation that will be applied to annotation\n *\n * @public\n */\nexport interface PdfAnnotationTransformation {\n  /**\n   * Translated offset\n   */\n  offset: Position;\n  /**\n   * Scaled factors\n   */\n  scale: Size;\n}\n\n/**\n * Render options\n *\n * @public\n */\nexport interface PdfRenderOptions {\n  /**\n   * Whether needs to render the page with annotations\n   */\n  withAnnotations: boolean;\n}\n\n/**\n * source can be byte array contains pdf content\n *\n * @public\n */\nexport type PdfFileContent = ArrayBuffer;\n\nexport enum PdfPermission {\n  PrintDocument = 2 ** 3,\n  ModifyContent = 2 ** 4,\n  CopyOrExtract = 2 ** 5,\n  AddOrModifyTextAnnot = 2 ** 6,\n  FillInExistingForm = 2 ** 9,\n  ExtractTextOrGraphics = 2 ** 10,\n  AssembleDocument = 2 ** 11,\n  PrintHighQuality = 2 ** 12,\n}\n\nexport enum PdfPageFlattenFlag {\n  Display = 0,\n  Print = 1,\n}\n\nexport enum PdfPageFlattenResult {\n  Fail = 0,\n  Success = 1,\n  NothingToDo = 2,\n}\n\n/**\n * Pdf File without content\n *\n * @public\n */\nexport interface PdfFileWithoutContent {\n  /**\n   * id of file\n   */\n  id: string;\n}\n\nexport interface PdfFileLoader extends PdfFileWithoutContent {\n  /**\n   * length of file\n   */\n  fileLength: number;\n  /**\n   * read block of file\n   * @param offset - offset of file\n   * @param length - length of file\n   * @returns block of file\n   */\n  callback: (offset: number, length: number) => Uint8Array;\n}\n\n/**\n * Pdf File\n *\n * @public\n */\nexport interface PdfFile extends PdfFileWithoutContent {\n  /**\n   * content of file\n   */\n  content: PdfFileContent;\n}\n\nexport interface PdfFileUrl extends PdfFileWithoutContent {\n  url: string;\n}\n\nexport interface PdfUrlOptions {\n  mode?: 'auto' | 'range-request' | 'full-fetch';\n  password?: string;\n}\n\nexport enum PdfErrorCode {\n  Ok, //  #define FPDF_ERR_SUCCESS 0    // No error.\n  Unknown, // #define FPDF_ERR_UNKNOWN 1    // Unknown error.\n  NotFound, // #define FPDF_ERR_FILE 2       // File not found or could not be opened.\n  WrongFormat, // #define FPDF_ERR_FORMAT 3     // File not in PDF format or corrupted.\n  Password, // #define FPDF_ERR_PASSWORD 4   // Password required or incorrect password.\n  Security, // #define FPDF_ERR_SECURITY 5   // Unsupported security scheme.\n  PageError, // #define FPDF_ERR_PAGE 6       // Page not found or content error.\n  XFALoad, // #ifdef PDF_ENABLE_XFA\n  XFALayout, //\n  Cancelled,\n  Initialization,\n  NotReady,\n  NotSupport,\n  LoadDoc,\n  DocNotOpen,\n  CantCloseDoc,\n  CantCreateNewDoc,\n  CantImportPages,\n  CantCreateAnnot,\n  CantSetAnnotRect,\n  CantSetAnnotContent,\n  CantRemoveInkList,\n  CantAddInkStoke,\n  CantReadAttachmentSize,\n  CantReadAttachmentContent,\n  CantFocusAnnot,\n  CantSelectText,\n  CantSelectOption,\n  CantCheckField,\n}\n\nexport interface PdfErrorReason {\n  code: PdfErrorCode;\n  message: string;\n}\n\nexport type PdfEngineError = TaskError<PdfErrorReason>;\n\nexport type PdfTask<R> = Task<R, PdfErrorReason>;\n\nexport class PdfTaskHelper {\n  /**\n   * Create a task\n   * @returns new task\n   */\n  static create<R>(): Task<R, PdfErrorReason> {\n    return new Task<R, PdfErrorReason>();\n  }\n\n  /**\n   * Create a task that has been resolved with value\n   * @param result - resolved value\n   * @returns resolved task\n   */\n  static resolve<R>(result: R): Task<R, PdfErrorReason> {\n    const task = new Task<R, PdfErrorReason>();\n    task.resolve(result);\n\n    return task;\n  }\n\n  /**\n   * Create a task that has been rejected with error\n   * @param reason - rejected error\n   * @returns rejected task\n   */\n  static reject<T = any>(reason: PdfErrorReason): Task<T, PdfErrorReason> {\n    const task = new Task<T, PdfErrorReason>();\n    task.reject(reason);\n\n    return task;\n  }\n\n  /**\n   * Create a task that has been aborted with error\n   * @param reason - aborted error\n   * @returns aborted task\n   */\n  static abort<T = any>(reason: PdfErrorReason): Task<T, PdfErrorReason> {\n    const task = new Task<T, PdfErrorReason>();\n    task.reject(reason);\n\n    return task;\n  }\n}\n\n/**\n * Pdf engine\n *\n * @public\n */\nexport interface PdfEngine<T = Blob> {\n  /**\n   * Check whether pdf engine supports this feature\n   * @param feature - which feature want to check\n   * @returns support or not\n   */\n  isSupport?: (feature: PdfEngineFeature) => PdfTask<PdfEngineOperation[]>;\n  /**\n   * Initialize the engine\n   * @returns task that indicate whether initialization is successful\n   */\n  initialize?: () => PdfTask<boolean>;\n  /**\n   * Destroy the engine\n   * @returns task that indicate whether destroy is successful\n   */\n  destroy?: () => PdfTask<boolean>;\n  /**\n   * Open a PDF from a URL with specified mode\n   * @param url - The PDF file URL\n   * @param options - Additional options including mode (auto, range-request, full-fetch) and password\n   * @returns Task that resolves with the PdfDocumentObject or an error\n   */\n  openDocumentUrl: (file: PdfFileUrl, options?: PdfUrlOptions) => PdfTask<PdfDocumentObject>;\n  /**\n   * Open pdf document from buffer\n   * @param file - pdf file\n   * @param password - protected password for this file\n   * @returns task that contains the file or error\n   */\n  openDocumentFromBuffer: (file: PdfFile, password: string) => PdfTask<PdfDocumentObject>;\n  /**\n   * Open pdf document from loader\n   * @param file - pdf file\n   * @param password - protected password for this file\n   * @returns task that contains the file or error\n   */\n  openDocumentFromLoader: (file: PdfFileLoader, password: string) => PdfTask<PdfDocumentObject>;\n  /**\n   * Get the metadata of the file\n   * @param doc - pdf document\n   * @returns task that contains the metadata or error\n   */\n  getMetadata: (doc: PdfDocumentObject) => PdfTask<PdfMetadataObject>;\n  /**\n   * Get permissions of the file\n   * @param doc - pdf document\n   * @returns task that contains a 32-bit integer indicating permission flags\n   */\n  getDocPermissions: (doc: PdfDocumentObject) => PdfTask<number>;\n  /**\n   * Get the user permissions of the file\n   * @param doc - pdf document\n   * @returns task that contains a 32-bit integer indicating permission flags\n   */\n  getDocUserPermissions: (doc: PdfDocumentObject) => PdfTask<number>;\n  /**\n   * Get the signatures of the file\n   * @param doc - pdf document\n   * @returns task that contains the signatures or error\n   */\n  getSignatures: (doc: PdfDocumentObject) => PdfTask<PdfSignatureObject[]>;\n  /**\n   * Get the bookmarks of the file\n   * @param doc - pdf document\n   * @returns task that contains the bookmarks or error\n   */\n  getBookmarks: (doc: PdfDocumentObject) => PdfTask<PdfBookmarksObject>;\n  /**\n   * Render the specified pdf page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param scaleFactor - factor of scaling\n   * @param rotation - rotated angle\n   * @param dpr - devicePixelRatio\n   * @param options - render options\n   * @returns task contains the rendered image or error\n   */\n  renderPage: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    scaleFactor: number,\n    rotation: Rotation,\n    dpr: number,\n    options: PdfRenderOptions,\n    imageType?: ImageConversionTypes,\n  ) => PdfTask<T>;\n  /**\n   * Render the specified rect of pdf page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param scaleFactor - factor of scaling\n   * @param rotation - rotated angle\n   * @param dpr - devicePixelRatio\n   * @param rect - target rect\n   * @param options - render options\n   * @returns task contains the rendered image or error\n   */\n  renderPageRect: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    scaleFactor: number,\n    rotation: Rotation,\n    dpr: number,\n    rect: Rect,\n    options: PdfRenderOptions,\n    imageType?: ImageConversionTypes,\n  ) => PdfTask<T>;\n  /**\n   * Render a single annotation into an ImageData blob.\n   *\n   * Note:  • honours Display-Matrix, page rotation & DPR\n   *        • you decide whether to include the page background\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param annotation - the annotation to render\n   * @param scaleFactor - factor of scaling\n   * @param rotation - rotated angle\n   * @param dpr - devicePixelRatio\n   * @param mode - appearance mode\n   */\n  renderAnnotation(\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    annotation: PdfAnnotationObject,\n    scaleFactor: number,\n    rotation: Rotation,\n    dpr: number,\n    mode: AppearanceMode,\n    imageType: ImageConversionTypes,\n  ): PdfTask<T>;\n  /**\n   * Get annotations of pdf page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param scaleFactor - factor of scaling\n   * @param rotation - rotated angle\n   * @returns task contains the annotations or error\n   */\n  getPageAnnotations: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n  ) => PdfTask<PdfAnnotationObject[]>;\n\n  /**\n   * Change the visible colour (and opacity) of an existing annotation.\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param annotation - the annotation to recolour\n   * @param colour - RGBA color values (0-255 per channel)\n   * @param which - 0 = stroke/fill colour (PDFium's \"colourType\" param)\n   * @returns task that indicates whether the operation succeeded\n   */\n  updateAnnotationColor: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    annotation: PdfAnnotationObjectBase,\n    color: WebAlphaColor,\n    which?: number,\n  ) => PdfTask<boolean>;\n\n  /**\n   * Create a annotation on specified page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param annotation - new annotations\n   * @returns task whether the annotations is created successfully\n   */\n  createPageAnnotation: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    annotation: PdfAnnotationObject,\n  ) => PdfTask<number>;\n  /**\n   * Update a annotation on specified page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param annotation - new annotations\n   * @returns task that indicates whether the operation succeeded\n   */\n  updatePageAnnotation: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    annotation: PdfAnnotationObject,\n  ) => PdfTask<boolean>;\n  /**\n   * Remove a annotation on specified page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param annotation - new annotations\n   * @returns task whether the annotations is removed successfully\n   */\n  removePageAnnotation: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    annotation: PdfAnnotationObject,\n  ) => PdfTask<boolean>;\n  /**\n   * get all text rects in pdf page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param scaleFactor - factor of scaling\n   * @param rotation - rotated angle\n   * @returns task contains the text rects or error\n   */\n  getPageTextRects: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    scaleFactor: number,\n    rotation: Rotation,\n  ) => PdfTask<PdfTextRectObject[]>;\n  /**\n   * Render the thumbnail of specified pdf page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param scaleFactor - factor of scaling\n   * @param rotation - rotated angle\n   * @param dpr - devicePixelRatio\n   * @param options - render options\n   * @returns task contains the rendered image or error\n   */\n  renderThumbnail: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    scaleFactor: number,\n    rotation: Rotation,\n    dpr: number,\n  ) => PdfTask<T>;\n  /**\n   * Search across all pages in the document\n   * @param doc - pdf document\n   * @param keyword - search keyword\n   * @param flags - match flags for search\n   * @returns Task contains all search results throughout the document\n   */\n  searchAllPages: (\n    doc: PdfDocumentObject,\n    keyword: string,\n    flags?: MatchFlag[],\n  ) => PdfTask<SearchAllPagesResult>;\n  /**\n   * Get all annotations in this file\n   * @param doc - pdf document\n   * @returns task that contains the annotations or error\n   */\n  getAllAnnotations: (doc: PdfDocumentObject) => PdfTask<Record<number, PdfAnnotationObject[]>>;\n  /**\n   * Get all attachments in this file\n   * @param doc - pdf document\n   * @returns task that contains the attachments or error\n   */\n  getAttachments: (doc: PdfDocumentObject) => PdfTask<PdfAttachmentObject[]>;\n  /**\n   * Read content of pdf attachment\n   * @param doc - pdf document\n   * @param attachment - pdf attachments\n   * @returns task that contains the content of specified attachment or error\n   */\n  readAttachmentContent: (\n    doc: PdfDocumentObject,\n    attachment: PdfAttachmentObject,\n  ) => PdfTask<ArrayBuffer>;\n  /**\n   * Set form field value\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param annotation - pdf annotation\n   * @param text - text value\n   */\n  setFormFieldValue: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    annotation: PdfWidgetAnnoObject,\n    value: FormFieldValue,\n  ) => PdfTask<boolean>;\n  /**\n   * Flatten annotations and form fields into the page contents.\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param flag - flatten flag\n   */\n  flattenPage: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    flag: PdfPageFlattenFlag,\n  ) => PdfTask<PdfPageFlattenResult>;\n  /**\n   * Extract pdf pages to a new file\n   * @param doc - pdf document\n   * @param pageIndexes - indexes of pdf pages\n   * @returns task contains the new pdf file content\n   */\n  extractPages: (doc: PdfDocumentObject, pageIndexes: number[]) => PdfTask<ArrayBuffer>;\n  /**\n   * Extract text on specified pdf pages\n   * @param doc - pdf document\n   * @param pageIndexes - indexes of pdf pages\n   * @returns task contains the text\n   */\n  extractText: (doc: PdfDocumentObject, pageIndexes: number[]) => PdfTask<string>;\n  /**\n   * Extract text on specified pdf pages\n   * @param doc - pdf document\n   * @param pageIndexes - indexes of pdf pages\n   * @returns task contains the text\n   */\n  getTextSlices: (doc: PdfDocumentObject, slices: PageTextSlice[]) => PdfTask<string[]>;\n  /**\n   * Get all glyphs in the specified pdf page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @returns task contains the glyphs\n   */\n  getPageGlyphs: (doc: PdfDocumentObject, page: PdfPageObject) => PdfTask<PdfGlyphObject[]>;\n  /**\n   * Get the geometry of the specified pdf page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @returns task contains the geometry\n   */\n  getPageGeometry: (doc: PdfDocumentObject, page: PdfPageObject) => PdfTask<PdfPageGeometry>;\n  /**\n   * Merge multiple pdf documents\n   * @param files - all the pdf files\n   * @returns task contains the merged pdf file\n   */\n  merge: (files: PdfFile[]) => PdfTask<PdfFile>;\n  /**\n   * Merge specific pages from multiple PDF documents in a custom order\n   * @param mergeConfigs Array of configurations specifying which pages to merge from which documents\n   * @returns A PdfTask that resolves with the merged PDF file\n   * @public\n   */\n  mergePages: (mergeConfigs: Array<{ docId: string; pageIndices: number[] }>) => PdfTask<PdfFile>;\n  /**\n   * Save a copy of pdf document\n   * @param doc - pdf document\n   * @returns task contains the new pdf file content\n   */\n  saveAsCopy: (doc: PdfDocumentObject) => PdfTask<ArrayBuffer>;\n  /**\n   * Close pdf document\n   * @param doc - pdf document\n   * @returns task that file is closed or not\n   */\n  closeDocument: (doc: PdfDocumentObject) => PdfTask<boolean>;\n}\n\n/**\n * Method name of PdfEngine interface\n *\n * @public\n */\nexport type PdfEngineMethodName = keyof Required<PdfEngine>;\n\n/**\n * Arguments of PdfEngine method\n *\n * @public\n */\nexport type PdfEngineMethodArgs<P extends PdfEngineMethodName> = Readonly<\n  Parameters<Required<PdfEngine>[P]>\n>;\n\n/**\n * Return type of PdfEngine method\n *\n * @public\n */\nexport type PdfEngineMethodReturnType<P extends PdfEngineMethodName> = ReturnType<\n  Required<PdfEngine>[P]\n>;\n","import { PdfAlphaColor } from './pdf';\n\nexport interface WebAlphaColor {\n  color: string;\n  opacity: number;\n}\n\n/**\n * Convert a {@link PdfAlphaColor} to a CSS-style colour definition.\n *\n * @param c - the colour coming from PDFium (0-255 per channel)\n * @returns\n *   hex   – #RRGGBB (no alpha channel)\n *   opacity – 0-1 float suitable for CSS `opacity`/`rgba()`\n */\nexport function pdfAlphaColorToWebAlphaColor(c: PdfAlphaColor): WebAlphaColor {\n  const clamp = (n: number) => Math.max(0, Math.min(255, n));\n  const toHex = (n: number) => clamp(n).toString(16).padStart(2, '0');\n\n  const color = `#${toHex(c.red)}${toHex(c.green)}${toHex(c.blue)}` as const;\n  const opacity = clamp(c.alpha) / 255;\n\n  return { color, opacity };\n}\n\n/**\n * Convert a CSS hex colour + opacity back into {@link PdfAlphaColor}\n *\n * @param hex      - #RGB, #RRGGBB, or #rrggbb\n * @param opacity  - 0-1 float (values outside clamp automatically)\n */\nexport function webAlphaColorToPdfAlphaColor({ color, opacity }: WebAlphaColor): PdfAlphaColor {\n  // Normalise: #abc → #aabbcc\n  if (/^#?[0-9a-f]{3}$/i.test(color)) {\n    color = color.replace(/^#?([0-9a-f])([0-9a-f])([0-9a-f])$/i, '#$1$1$2$2$3$3').toLowerCase();\n  }\n\n  const [, r, g, b] =\n    /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(color) ??\n    (() => {\n      throw new Error(`Invalid hex colour: “${color}”`);\n    })();\n\n  const clamp = (n: number, hi = 255) => Math.max(0, Math.min(hi, n));\n\n  return {\n    red: parseInt(r, 16),\n    green: parseInt(g, 16),\n    blue: parseInt(b, 16),\n    alpha: clamp(Math.round(opacity * 255)),\n  };\n}\n","/**\n * Parse a PDF date string **D:YYYYMMDDHHmmSSOHH'mm'** to ISO-8601.\n *\n * Returns `undefined` if the input is malformed.\n *\n * @public\n */\nexport function pdfDateToDate(pdf?: string): Date | undefined {\n  if (!pdf?.startsWith('D:') || pdf.length < 16) return;\n\n  const y = +pdf.slice(2, 6);\n  const mo = +pdf.slice(6, 8) - 1; // JS months: 0-based\n  const d = +pdf.slice(8, 10);\n  const H = +pdf.slice(10, 12);\n  const M = +pdf.slice(12, 14);\n  const S = +pdf.slice(14, 16);\n\n  return new Date(Date.UTC(y, mo, d, H, M, S));\n}\n\n/**\n * Convert a date to a PDF date string\n * @param date - date to convert\n * @returns PDF date string\n *\n * @public\n */\nexport function dateToPdfDate(date: Date = new Date()): string {\n  const z = (n: number, len = 2) => n.toString().padStart(len, '0');\n\n  const YYYY = date.getUTCFullYear();\n  const MM = z(date.getUTCMonth() + 1);\n  const DD = z(date.getUTCDate());\n  const HH = z(date.getUTCHours());\n  const mm = z(date.getUTCMinutes());\n  const SS = z(date.getUTCSeconds());\n\n  return `D:${YYYY}${MM}${DD}${HH}${mm}${SS}`;\n}\n","/**\n * Library contains the common definitions of data types and logic\n *\n * @remarks\n * The `@embedpdf/models` defines the interface and classes which are used to\n * handling PDF files.\n *\n * @packageDocumentation\n */\nexport * from './geometry';\nexport * from './logger';\nexport * from './pdf';\nexport * from './task';\nexport * from './color';\nexport * from './date';\n\n/**\n * ignore will do nothing when called.\n *\n * @public\n */\nexport function ignore() {}\n","import { Action } from '@embedpdf/core';\nimport { PdfAnnotationObject } from '@embedpdf/models';\nimport { AnnotationDefaults, ToolDefaultsByMode } from './types';\n\n/* ─────────── action constants ─────────── */\nexport const SET_ANNOTATIONS = 'ANNOTATION/SET_ANNOTATIONS';\nexport const REINDEX_PAGE_ANNOTATIONS = 'ANNOTATION/REINDEX_PAGE';\nexport const SELECT_ANNOTATION = 'ANNOTATION/SELECT_ANNOTATION';\nexport const DESELECT_ANNOTATION = 'ANNOTATION/DESELECT_ANNOTATION';\nexport const UPDATE_TOOL_DEFAULTS = 'ANNOTATION/UPDATE_TOOL_DEFAULTS';\nexport const ADD_COLOR_PRESET = 'ANNOTATION/ADD_COLOR_PRESET';\nexport const CREATE_ANNOTATION = 'ANNOTATION/CREATE_ANNOTATION';\nexport const PATCH_ANNOTATION = 'ANNOTATION/PATCH_ANNOTATION';\nexport const DELETE_ANNOTATION = 'ANNOTATION/DELETE_ANNOTATION';\nexport const COMMIT_PENDING_CHANGES = 'ANNOTATION/COMMIT';\nexport const STORE_PDF_ID = 'ANNOTATION/STORE_PDF_ID';\nexport const PURGE_ANNOTATION = 'ANNOTATION/PURGE_ANNOTATION';\nexport const SET_ACTIVE_VARIANT = 'ANNOTATION/SET_ACTIVE_VARIANT';\n\n/* ─────────── action interfaces ─────────── */\nexport interface SetAnnotationsAction extends Action {\n  type: typeof SET_ANNOTATIONS;\n  payload: Record<number, PdfAnnotationObject[]>;\n}\nexport interface ReindexPageAnnotationsAction extends Action {\n  type: typeof REINDEX_PAGE_ANNOTATIONS;\n  payload: { pageIndex: number };\n}\nexport interface SelectAnnotationAction extends Action {\n  type: typeof SELECT_ANNOTATION;\n  payload: { pageIndex: number; localId: number };\n}\nexport interface DeselectAnnotationAction extends Action {\n  type: typeof DESELECT_ANNOTATION;\n}\n\nexport interface UpdateToolDefaultsAction extends Action {\n  type: typeof UPDATE_TOOL_DEFAULTS;\n  payload: { variantKey: string; patch: Partial<AnnotationDefaults> };\n}\n\nexport interface AddColorPresetAction extends Action {\n  type: typeof ADD_COLOR_PRESET;\n  payload: string;\n}\nexport interface CreateAnnotationAction extends Action {\n  type: typeof CREATE_ANNOTATION;\n  payload: { pageIndex: number; localId: number; annotation: PdfAnnotationObject };\n}\nexport interface PatchAnnotationAction extends Action {\n  type: typeof PATCH_ANNOTATION;\n  payload: { pageIndex: number; localId: number; patch: Partial<PdfAnnotationObject> };\n}\nexport interface DeleteAnnotationAction extends Action {\n  type: typeof DELETE_ANNOTATION;\n  payload: { pageIndex: number; localId: number };\n}\nexport interface CommitAction extends Action {\n  type: typeof COMMIT_PENDING_CHANGES;\n}\n\nexport interface StorePdfIdAction extends Action {\n  type: typeof STORE_PDF_ID;\n  payload: { uid: string; pdfId: number };\n}\n\nexport interface PurgeAnnotationAction extends Action {\n  type: typeof PURGE_ANNOTATION;\n  payload: { uid: string };\n}\n\nexport interface SetActiveVariantAction extends Action {\n  type: typeof SET_ACTIVE_VARIANT;\n  payload: string | null;\n}\n\nexport type AnnotationAction =\n  | SetAnnotationsAction\n  | ReindexPageAnnotationsAction\n  | SelectAnnotationAction\n  | DeselectAnnotationAction\n  | UpdateToolDefaultsAction\n  | AddColorPresetAction\n  | CreateAnnotationAction\n  | PatchAnnotationAction\n  | DeleteAnnotationAction\n  | CommitAction\n  | StorePdfIdAction\n  | PurgeAnnotationAction\n  | SetActiveVariantAction;\n\n/* ─────────── action creators ─────────── */\nexport const setAnnotations = (p: Record<number, PdfAnnotationObject[]>): SetAnnotationsAction => ({\n  type: SET_ANNOTATIONS,\n  payload: p,\n});\n\nexport const reindexPageAnnotations = (pageIndex: number): ReindexPageAnnotationsAction => ({\n  type: REINDEX_PAGE_ANNOTATIONS,\n  payload: { pageIndex },\n});\n\nexport const selectAnnotation = (pageIndex: number, localId: number): SelectAnnotationAction => ({\n  type: SELECT_ANNOTATION,\n  payload: { pageIndex, localId },\n});\n\nexport const deselectAnnotation = (): DeselectAnnotationAction => ({ type: DESELECT_ANNOTATION });\n\nexport const updateToolDefaults = (\n  variantKey: string,\n  patch: Partial<AnnotationDefaults>,\n): UpdateToolDefaultsAction => ({ type: UPDATE_TOOL_DEFAULTS, payload: { variantKey, patch } });\n\nexport const addColorPreset = (c: string): AddColorPresetAction => ({\n  type: ADD_COLOR_PRESET,\n  payload: c,\n});\n\nexport const createAnnotation = (\n  pageIndex: number,\n  localId: number,\n  annotation: PdfAnnotationObject,\n): CreateAnnotationAction => ({\n  type: CREATE_ANNOTATION,\n  payload: { pageIndex, localId, annotation },\n});\n\nexport const patchAnnotation = (\n  pageIndex: number,\n  localId: number,\n  patch: Partial<PdfAnnotationObject>,\n): PatchAnnotationAction => ({\n  type: PATCH_ANNOTATION,\n  payload: { pageIndex, localId, patch },\n});\n\nexport const deleteAnnotation = (pageIndex: number, localId: number): DeleteAnnotationAction => ({\n  type: DELETE_ANNOTATION,\n  payload: { pageIndex, localId },\n});\n\nexport const commitPendingChanges = (): CommitAction => ({ type: COMMIT_PENDING_CHANGES });\n\nexport const storePdfId = (uid: string, pdfId: number): StorePdfIdAction => ({\n  type: STORE_PDF_ID,\n  payload: { uid, pdfId },\n});\n\nexport const purgeAnnotation = (uid: string): PurgeAnnotationAction => ({\n  type: PURGE_ANNOTATION,\n  payload: { uid },\n});\n\nexport const setActiveVariant = (k: string | null): SetActiveVariantAction => ({\n  type: SET_ACTIVE_VARIANT,\n  payload: k,\n});\n","/**\n * Creates a stable, document-wide unique ID from a page index and a stable local ID.\n */\nexport const makeUid = (pageIndex: number, localId: number): string => `p${pageIndex}#${localId}`;\n\n/**\n * Parses a UID string back into its constituent page index and stable local ID.\n */\nexport const parseUid = (uid: string): { pageIndex: number; localId: number } => {\n  const [pg, rest] = uid.slice(1).split('#');\n  return { pageIndex: Number(pg), localId: Number(rest) };\n};\n","import { AnnotationState, SelectedAnnotation } from './types';\nimport { parseUid } from './utils';\n\n/* helper – mirrors the one in reducer */\nconst makeUid = (page: number, id: number) => `p${page}#${id}`;\n\n/* ─────────── public selectors ─────────── */\n\n/** All annotations _objects_ on a single page (order preserved). */\nexport const getAnnotationsByPageIndex = (s: AnnotationState, page: number) =>\n  (s.pages[page] ?? []).map((uid) => s.byUid[uid]);\n\n/** Shortcut: every page → list of annotation objects. */\nexport const getAnnotations = (s: AnnotationState) => {\n  const out: Record<number, ReturnType<typeof getAnnotationsByPageIndex>> = {};\n  for (const p of Object.keys(s.pages).map(Number)) out[p] = getAnnotationsByPageIndex(s, p);\n  return out;\n};\n\n/** The full `TrackedAnnotation` for the current selection. */\nexport const getSelectedAnnotation = (s: AnnotationState) =>\n  s.selectedUid ? s.byUid[s.selectedUid] : null;\n\nexport const getSelectedAnnotationWithPageIndex = (\n  s: AnnotationState,\n): SelectedAnnotation | null => {\n  if (!s.selectedUid) return null;\n  const { pageIndex, localId } = parseUid(s.selectedUid);\n  return { pageIndex, localId, annotation: s.byUid[s.selectedUid].object };\n};\n\nexport const getSelectedAnnotationByPageIndex = (s: AnnotationState, pageIndex: number) => {\n  if (!s.selectedUid) return null;\n\n  const pageUids = s.pages[pageIndex] ?? [];\n\n  // Check if the selected UID is on the requested page\n  if (pageUids.includes(s.selectedUid)) {\n    return s.byUid[s.selectedUid];\n  }\n\n  return null;\n};\n\nexport const isInAnnotationVariant = (s: AnnotationState) => s.activeVariant !== null;\nexport const getSelectedAnnotationVariant = (s: AnnotationState) => s.activeVariant;\n\n/** Check if a given anno on a page is the current selection. */\nexport const isAnnotationSelected = (s: AnnotationState, page: number, id: number) =>\n  s.selectedUid === makeUid(page, id);\n","import { PdfAnnotationSubtype, PdfAnnotationObject } from '@embedpdf/models';\n\nexport type VariantKey = string;\n\nexport const makeVariantKey = (\n  subtype: PdfAnnotationSubtype,\n  intent?: string | null | undefined,\n): VariantKey => (intent ? `${subtype}#${intent}` : `${subtype}`);\n\nexport const parseVariantKey = (\n  key: VariantKey,\n): { subtype: PdfAnnotationSubtype; intent?: string } => {\n  const [subStr, intent] = key.split('#');\n  return { subtype: Number(subStr) as PdfAnnotationSubtype, intent };\n};\n\nexport const variantKeyFromAnnotation = (a: PdfAnnotationObject): VariantKey =>\n  makeVariantKey(a.type, a.intent);\n","import {\n  BasePlugin,\n  createBehaviorEmitter,\n  enumEntries,\n  PluginRegistry,\n  SET_DOCUMENT,\n} from '@embedpdf/core';\nimport {\n  ignore,\n  PdfAnnotationObject,\n  PdfDocumentObject,\n  PdfEngine,\n  PdfErrorReason,\n  Task,\n  PdfAnnotationSubtype,\n  PdfTaskHelper,\n  PdfErrorCode,\n  PdfTask,\n  Rotation,\n  AppearanceMode,\n  PdfBlendMode,\n} from '@embedpdf/models';\nimport {\n  ActiveTool,\n  AnnotationCapability,\n  AnnotationPluginConfig,\n  AnnotationState,\n  BaseAnnotationDefaults,\n  GetPageAnnotationsOptions,\n  RenderAnnotationOptions,\n  TextMarkupSubtype,\n  ToolDefaultsByMode,\n  TrackedAnnotation,\n} from './types';\nimport {\n  setAnnotations,\n  selectAnnotation,\n  deselectAnnotation,\n  AnnotationAction,\n  updateToolDefaults,\n  addColorPreset,\n  createAnnotation,\n  patchAnnotation,\n  deleteAnnotation,\n  commitPendingChanges,\n  storePdfId,\n  purgeAnnotation,\n  reindexPageAnnotations,\n  setActiveVariant,\n} from './actions';\nimport {\n  InteractionManagerCapability,\n  InteractionManagerPlugin,\n  InteractionMode,\n} from '@embedpdf/plugin-interaction-manager';\nimport { SelectionPlugin, SelectionCapability } from '@embedpdf/plugin-selection';\nimport { HistoryPlugin, HistoryCapability, Command } from '@embedpdf/plugin-history';\nimport { getSelectedAnnotation } from './selectors';\nimport { makeUid, parseUid } from './utils';\nimport { makeVariantKey } from './variant-key';\n\nexport class AnnotationPlugin extends BasePlugin<\n  AnnotationPluginConfig,\n  AnnotationCapability,\n  AnnotationState,\n  AnnotationAction\n> {\n  static readonly id = 'annotation' as const;\n\n  private readonly ANNOTATION_HISTORY_TOPIC = 'annotations';\n\n  private readonly config: AnnotationPluginConfig;\n\n  private engine: PdfEngine;\n  private readonly state$ = createBehaviorEmitter<AnnotationState>();\n  private readonly interactionManager: InteractionManagerCapability | null;\n  private readonly selection: SelectionCapability | null;\n  private readonly history: HistoryCapability | null;\n\n  private readonly modeByVariant = new Map<string, string>();\n  private readonly variantByMode = new Map<string, string>();\n\n  private readonly activeVariantChange$ = createBehaviorEmitter<string | null>();\n  private readonly activeTool$ = createBehaviorEmitter<ActiveTool>({\n    variantKey: null,\n    defaults: null,\n  });\n\n  constructor(\n    id: string,\n    registry: PluginRegistry,\n    engine: PdfEngine,\n    config: AnnotationPluginConfig,\n  ) {\n    super(id, registry);\n    this.engine = engine;\n    this.config = config;\n\n    const selection = registry.getPlugin<SelectionPlugin>('selection');\n    this.selection = selection?.provides() ?? null;\n\n    const history = registry.getPlugin<HistoryPlugin>('history');\n    this.history = history?.provides() ?? null;\n\n    const interactionManager = registry.getPlugin<InteractionManagerPlugin>('interaction-manager');\n    this.interactionManager = interactionManager?.provides() ?? null;\n\n    this.coreStore.onAction(SET_DOCUMENT, (_action, state) => {\n      const doc = state.core.document;\n      if (doc) {\n        this.getAllAnnotations(doc);\n      }\n    });\n  }\n\n  async initialize(): Promise<void> {\n    for (const [variantKey, defaults] of Object.entries(this.state.toolDefaults)) {\n      this.registerTool(variantKey, defaults);\n    }\n\n    this.history?.onHistoryChange((topic) => {\n      if (topic === this.ANNOTATION_HISTORY_TOPIC && this.config.autoCommit !== false) {\n        this.commit();\n      }\n    });\n\n    this.interactionManager?.onModeChange((s) => {\n      const newVariant = this.variantByMode.get(s.activeMode) ?? null;\n      console.log(newVariant, this.state.activeVariant);\n      if (newVariant !== this.state.activeVariant) {\n        this.dispatch(setActiveVariant(newVariant));\n        this.activeVariantChange$.emit(newVariant);\n      }\n    });\n\n    this.selection?.onEndSelection(() => {\n      if (!this.state.activeVariant) return;\n\n      if (\n        !(\n          this.state.activeVariant === makeVariantKey(PdfAnnotationSubtype.HIGHLIGHT) ||\n          this.state.activeVariant === makeVariantKey(PdfAnnotationSubtype.UNDERLINE) ||\n          this.state.activeVariant === makeVariantKey(PdfAnnotationSubtype.STRIKEOUT) ||\n          this.state.activeVariant === makeVariantKey(PdfAnnotationSubtype.SQUIGGLY)\n        )\n      ) {\n        return;\n      }\n\n      const formattedSelection = this.selection?.getFormattedSelection();\n      if (!formattedSelection) return;\n\n      for (const selection of formattedSelection) {\n        const rect = selection.rect;\n        const segmentRects = selection.segmentRects;\n        const type = this.state.activeVariant;\n        const subtype = this.state.toolDefaults[type].subtype;\n        const color = this.state.toolDefaults[type].color;\n        const opacity = this.state.toolDefaults[type].opacity;\n        const blendMode = this.state.toolDefaults[type].blendMode ?? PdfBlendMode.Normal;\n\n        this.createAnnotation(selection.pageIndex, {\n          type: subtype as TextMarkupSubtype,\n          rect,\n          segmentRects,\n          color,\n          opacity,\n          blendMode,\n          pageIndex: selection.pageIndex,\n          id: Date.now() + Math.random(),\n        });\n      }\n\n      this.selection?.clear();\n    });\n  }\n\n  private registerTool(variantKey: string, defaults: BaseAnnotationDefaults) {\n    const modeId = defaults.interaction.mode;\n    const interactionMode: InteractionMode = {\n      id: modeId,\n      scope: 'page',\n      exclusive: defaults.interaction.exclusive,\n      cursor: defaults.interaction.cursor,\n    };\n\n    this.interactionManager?.registerMode(interactionMode);\n\n    if (defaults.textSelection) {\n      this.selection?.enableForMode(modeId);\n    }\n\n    this.modeByVariant.set(variantKey, modeId);\n    this.variantByMode.set(modeId, variantKey);\n  }\n\n  protected buildCapability(): AnnotationCapability {\n    return {\n      getPageAnnotations: (options: GetPageAnnotationsOptions) => {\n        return this.getPageAnnotations(options);\n      },\n      getSelectedAnnotation: () => {\n        return getSelectedAnnotation(this.state);\n      },\n      selectAnnotation: (pageIndex: number, annotationId: number) => {\n        this.selectAnnotation(pageIndex, annotationId);\n      },\n      deselectAnnotation: () => {\n        this.dispatch(deselectAnnotation());\n      },\n      getActiveVariant: () => {\n        return this.state.activeVariant;\n      },\n      setActiveVariant: (variantKey: string | null) => {\n        if (variantKey === this.state.activeVariant) return;\n        if (variantKey) {\n          const mode = this.modeByVariant.get(variantKey);\n          if (!mode) throw new Error(`Mode missing for variant ${variantKey}`);\n          this.interactionManager?.activate(mode);\n        } else {\n          this.interactionManager?.activate('default');\n        }\n      },\n      getToolDefaults: (variantKey) => {\n        const defaults = this.state.toolDefaults[variantKey];\n        if (!defaults) {\n          throw new Error(`No defaults found for variant: ${variantKey}`);\n        }\n        return defaults;\n      },\n      getToolDefaultsBySubtypeAndIntent: (subtype, intent) => {\n        const variantKey = makeVariantKey(subtype, intent);\n        const defaults = this.state.toolDefaults[variantKey];\n        if (!defaults) {\n          throw new Error(`No defaults found for variant: ${variantKey}`);\n        }\n        return defaults;\n      },\n      getToolDefaultsBySubtype: (subtype) => {\n        const defaults = this.state.toolDefaults[subtype];\n        if (!defaults) {\n          throw new Error(`No defaults found for subtype: ${subtype}`);\n        }\n        return defaults;\n      },\n      setToolDefaults: (variantKey, patch) => {\n        this.dispatch(updateToolDefaults(variantKey, patch));\n      },\n      getColorPresets: () => [...this.state.colorPresets],\n      addColorPreset: (color) => this.dispatch(addColorPreset(color)),\n      createAnnotation: (pageIndex: number, annotation: PdfAnnotationObject) =>\n        this.createAnnotation(pageIndex, annotation),\n      updateAnnotation: (pageIndex: number, localId: number, patch: Partial<PdfAnnotationObject>) =>\n        this.updateAnnotation(pageIndex, localId, patch),\n      deleteAnnotation: (pageIndex: number, localId: number) =>\n        this.deleteAnnotation(pageIndex, localId),\n      renderAnnotation: (options: RenderAnnotationOptions) => this.renderAnnotation(options),\n      onStateChange: this.state$.on,\n      onActiveVariantChange: this.activeVariantChange$.on,\n      onActiveToolChange: this.activeTool$.on,\n      commit: () => this.commit(),\n    };\n  }\n\n  private createActiveTool(mode: string | null, toolDefaults: ToolDefaultsByMode): ActiveTool {\n    if (mode === null) {\n      return { variantKey: null, defaults: null };\n    }\n    return { variantKey: mode, defaults: toolDefaults[mode] } as ActiveTool;\n  }\n\n  private emitActiveTool(state: AnnotationState) {\n    const activeTool = this.createActiveTool(state.activeVariant, state.toolDefaults);\n    this.activeTool$.emit(activeTool);\n  }\n\n  override onStoreUpdated(prev: AnnotationState, next: AnnotationState): void {\n    this.state$.emit(next);\n    if (\n      prev.activeVariant !== next.activeVariant ||\n      prev.toolDefaults[prev.activeVariant ?? PdfAnnotationSubtype.HIGHLIGHT] !==\n        next.toolDefaults[next.activeVariant ?? PdfAnnotationSubtype.HIGHLIGHT]\n    ) {\n      this.emitActiveTool(next);\n    }\n  }\n\n  private getAllAnnotations(doc: PdfDocumentObject) {\n    const task = this.engine.getAllAnnotations(doc);\n    task.wait((annotations) => this.dispatch(setAnnotations(annotations)), ignore);\n  }\n\n  private getPageAnnotations(\n    options: GetPageAnnotationsOptions,\n  ): Task<PdfAnnotationObject[], PdfErrorReason> {\n    const { pageIndex } = options;\n\n    const doc = this.coreState.core.document;\n\n    if (!doc) {\n      return PdfTaskHelper.reject({ code: PdfErrorCode.NotFound, message: 'Document not found' });\n    }\n\n    const page = doc.pages.find((p) => p.index === pageIndex);\n\n    if (!page) {\n      return PdfTaskHelper.reject({ code: PdfErrorCode.NotFound, message: 'Page not found' });\n    }\n\n    return this.engine.getPageAnnotations(doc, page);\n  }\n\n  private renderAnnotation({\n    pageIndex,\n    annotation,\n    scaleFactor = 1,\n    rotation = Rotation.Degree0,\n    dpr = 1,\n    mode = AppearanceMode.Normal,\n    imageType = 'image/webp',\n  }: RenderAnnotationOptions) {\n    const coreState = this.coreState.core;\n\n    if (!coreState.document) {\n      throw new Error('document does not open');\n    }\n\n    const page = coreState.document.pages.find((page) => page.index === pageIndex);\n    if (!page) {\n      throw new Error('page does not exist');\n    }\n\n    return this.engine.renderAnnotation(\n      coreState.document,\n      page,\n      annotation,\n      scaleFactor,\n      rotation,\n      dpr,\n      mode,\n      imageType,\n    );\n  }\n\n  private selectAnnotation(pageIndex: number, annotationId: number) {\n    this.dispatch(selectAnnotation(pageIndex, annotationId));\n  }\n\n  private createAnnotation(pageIndex: number, annotation: PdfAnnotationObject) {\n    const localId = annotation.id;\n    const execute = () => this.dispatch(createAnnotation(pageIndex, localId, annotation));\n\n    if (!this.history) {\n      execute();\n      if (this.config.autoCommit) this.commit();\n      return;\n    }\n    const command: Command = {\n      execute,\n      undo: () => {\n        this.dispatch(deselectAnnotation());\n        this.dispatch(deleteAnnotation(pageIndex, localId));\n      },\n    };\n    this.history.register(command, this.ANNOTATION_HISTORY_TOPIC);\n  }\n\n  private updateAnnotation(\n    pageIndex: number,\n    localId: number,\n    patch: Partial<PdfAnnotationObject>,\n  ) {\n    if (!this.history) {\n      this.dispatch(patchAnnotation(pageIndex, localId, patch));\n      if (this.config.autoCommit !== false) {\n        this.commit();\n      }\n      return;\n    }\n    const originalObject = this.state.byUid[makeUid(pageIndex, localId)].object;\n    const originalPatch = Object.fromEntries(\n      Object.keys(patch).map((key) => [key, originalObject[key as keyof PdfAnnotationObject]]),\n    );\n    const command: Command = {\n      execute: () => this.dispatch(patchAnnotation(pageIndex, localId, patch)),\n      undo: () => this.dispatch(patchAnnotation(pageIndex, localId, originalPatch)),\n    };\n    this.history.register(command, this.ANNOTATION_HISTORY_TOPIC);\n  }\n\n  private deleteAnnotation(pageIndex: number, localId: number) {\n    if (!this.history) {\n      this.dispatch(deselectAnnotation());\n      this.dispatch(deleteAnnotation(pageIndex, localId));\n      if (this.config.autoCommit !== false) {\n        this.commit();\n      }\n      return;\n    }\n    const originalAnnotation = this.state.byUid[makeUid(pageIndex, localId)].object;\n    const command: Command = {\n      execute: () => {\n        this.dispatch(deselectAnnotation());\n        this.dispatch(deleteAnnotation(pageIndex, localId));\n      },\n      undo: () => this.dispatch(createAnnotation(pageIndex, localId, originalAnnotation)),\n    };\n    this.history.register(command, this.ANNOTATION_HISTORY_TOPIC);\n  }\n\n  private commit(): Task<boolean, PdfErrorReason> {\n    const task = new Task<boolean, PdfErrorReason>();\n\n    if (!this.state.hasPendingChanges) return PdfTaskHelper.resolve(true);\n\n    const doc = this.coreState.core.document;\n    if (!doc)\n      return PdfTaskHelper.reject({ code: PdfErrorCode.NotFound, message: 'Document not found' });\n\n    const creations: Task<any, PdfErrorReason>[] = [];\n    const updates: Task<any, PdfErrorReason>[] = [];\n    const deletionsByPage = new Map<number, { ta: TrackedAnnotation; uid: string }[]>();\n    const affectedPages = new Set<number>();\n\n    // 1. Group all pending changes by operation type\n    for (const [uid, ta] of Object.entries(this.state.byUid)) {\n      if (ta.commitState === 'synced') continue;\n\n      const { pageIndex } = parseUid(uid);\n      const page = doc.pages.find((p) => p.index === pageIndex);\n      if (!page) continue;\n\n      affectedPages.add(pageIndex);\n\n      switch (ta.commitState) {\n        case 'new':\n          const task = this.engine.createPageAnnotation!(doc, page, ta.object);\n          task.wait((annoId) => this.dispatch(storePdfId(uid, annoId)), ignore);\n          creations.push(task);\n          break;\n        case 'dirty':\n          updates.push(\n            this.engine.updatePageAnnotation!(doc, page, { ...ta.object, id: ta.pdfId! }),\n          );\n          break;\n        case 'deleted':\n          if (!deletionsByPage.has(pageIndex)) {\n            deletionsByPage.set(pageIndex, []);\n          }\n          deletionsByPage.get(pageIndex)!.push({ ta, uid });\n          break;\n      }\n    }\n\n    // 2. Create deletion tasks, sorted by ID descending\n    const deletionTasks: Task<any, PdfErrorReason>[] = [];\n    for (const [pageIndex, deletions] of deletionsByPage.entries()) {\n      const page = doc.pages.find((p) => p.index === pageIndex)!;\n\n      deletions.sort((a, b) => (b.ta.pdfId ?? -1) - (a.ta.pdfId ?? -1));\n\n      for (const { ta, uid } of deletions) {\n        if (ta.pdfId !== undefined) {\n          const task = new Task<any, PdfErrorReason>();\n          const removeTask = this.engine.removePageAnnotation!(doc, page, {\n            ...ta.object,\n            id: ta.pdfId!,\n          });\n          removeTask.wait(() => {\n            this.dispatch(purgeAnnotation(uid));\n            task.resolve(true);\n          }, task.fail);\n          deletionTasks.push(task);\n        } else {\n          this.dispatch(purgeAnnotation(uid));\n        }\n      }\n    }\n\n    // 3. Chain the operations: creations/updates -> deletions -> re-sync\n    const allWriteTasks = [...creations, ...updates, ...deletionTasks];\n\n    Task.allSettled(allWriteTasks).wait(() => {\n      // 4. Client-Side Re-indexing\n      // After all engine operations are done, tell the reducer to re-index each affected page.\n      for (const pageIndex of affectedPages) {\n        this.dispatch(reindexPageAnnotations(pageIndex));\n      }\n\n      // 5. Finalize the commit by updating the commitState of all items.\n      this.dispatch(commitPendingChanges());\n      task.resolve(true);\n    }, task.fail);\n\n    return task;\n  }\n}\n","import { Reducer } from '@embedpdf/core';\nimport { PdfAnnotationSubtype, PdfBlendMode } from '@embedpdf/models';\nimport {\n  ADD_COLOR_PRESET,\n  COMMIT_PENDING_CHANGES,\n  CREATE_ANNOTATION,\n  DESELECT_ANNOTATION,\n  PATCH_ANNOTATION,\n  DELETE_ANNOTATION,\n  SELECT_ANNOTATION,\n  SET_ANNOTATIONS,\n  UPDATE_TOOL_DEFAULTS,\n  AnnotationAction,\n  PURGE_ANNOTATION,\n  STORE_PDF_ID,\n  REINDEX_PAGE_ANNOTATIONS,\n  SET_ACTIVE_VARIANT,\n} from './actions';\nimport {\n  AnnotationDefaults,\n  AnnotationPluginConfig,\n  AnnotationState,\n  TrackedAnnotation,\n} from './types';\nimport { makeUid } from './utils';\nimport { makeVariantKey } from './variant-key';\n\n/* ─────────── util helpers ─────────── */\nconst DEFAULT_COLORS = [\n  '#E44234',\n  '#FF8D00',\n  '#FFCD45',\n  '#5CC96E',\n  '#25D2D1',\n  '#597CE2',\n  '#C544CE',\n  '#7D2E25',\n];\n\n/* helper to immutably replace one annotation (preserving pdfId) */\nconst patchAnno = (\n  state: AnnotationState,\n  uid: string,\n  patch: Partial<TrackedAnnotation['object']>,\n): AnnotationState => {\n  const prev = state.byUid[uid];\n  if (!prev) return state;\n  return {\n    ...state,\n    byUid: {\n      ...state.byUid,\n      [uid]: {\n        ...prev,\n        commitState: prev.commitState === 'synced' ? 'dirty' : prev.commitState,\n        object: { ...prev.object, ...patch },\n      } as TrackedAnnotation,\n    },\n    hasPendingChanges: true,\n  };\n};\n\n/* ─────────── initialState ─────────── */\nexport const initialState = (cfg: AnnotationPluginConfig): AnnotationState => ({\n  pages: {},\n  byUid: {},\n  selectedUid: null,\n  activeVariant: null,\n\n  toolDefaults: {\n    [makeVariantKey(PdfAnnotationSubtype.HIGHLIGHT)]: {\n      name: 'Highlight',\n      subtype: PdfAnnotationSubtype.HIGHLIGHT,\n      interaction: { mode: 'highlight', exclusive: false },\n      textSelection: true,\n      color: '#FFCD45',\n      opacity: 1,\n      blendMode: PdfBlendMode.Multiply,\n    },\n    [makeVariantKey(PdfAnnotationSubtype.UNDERLINE)]: {\n      name: 'Underline',\n      subtype: PdfAnnotationSubtype.UNDERLINE,\n      interaction: { mode: 'underline', exclusive: false },\n      textSelection: true,\n      color: '#E44234',\n      opacity: 1,\n      blendMode: PdfBlendMode.Normal,\n    },\n    [makeVariantKey(PdfAnnotationSubtype.STRIKEOUT)]: {\n      name: 'Strikeout',\n      subtype: PdfAnnotationSubtype.STRIKEOUT,\n      interaction: { mode: 'strikeout', exclusive: false },\n      textSelection: true,\n      color: '#E44234',\n      opacity: 1,\n      blendMode: PdfBlendMode.Normal,\n    },\n    [makeVariantKey(PdfAnnotationSubtype.SQUIGGLY)]: {\n      name: 'Squiggly',\n      subtype: PdfAnnotationSubtype.SQUIGGLY,\n      interaction: { mode: 'squiggly', exclusive: false },\n      textSelection: true,\n      color: '#E44234',\n      opacity: 1,\n      blendMode: PdfBlendMode.Normal,\n    },\n    [makeVariantKey(PdfAnnotationSubtype.INK)]: {\n      name: 'Ink',\n      subtype: PdfAnnotationSubtype.INK,\n      interaction: { mode: 'ink', exclusive: true, cursor: 'crosshair' },\n      color: '#E44234',\n      opacity: 1,\n      strokeWidth: 11,\n      blendMode: PdfBlendMode.Normal,\n    },\n    [makeVariantKey(PdfAnnotationSubtype.INK, 'InkHighlight')]: {\n      name: 'Ink Highlight',\n      subtype: PdfAnnotationSubtype.INK,\n      interaction: { mode: 'inkHighlight', exclusive: true, cursor: 'crosshair' },\n      color: '#E44234',\n      opacity: 1,\n      strokeWidth: 11,\n      blendMode: PdfBlendMode.Multiply,\n    },\n    ...cfg.toolDefaults,\n  },\n  colorPresets: cfg.colorPresets ?? DEFAULT_COLORS,\n  hasPendingChanges: false,\n});\n\n/* ─────────── reducer ─────────── */\nexport const reducer: Reducer<AnnotationState, AnnotationAction> = (state, action) => {\n  switch (action.type) {\n    /* ───── bulk load from engine ───── */\n    case SET_ANNOTATIONS: {\n      const newPages = { ...state.pages };\n      const newByUid = { ...state.byUid };\n      for (const [pgStr, list] of Object.entries(action.payload)) {\n        const pageIndex = Number(pgStr);\n        const oldUidsOnPage = state.pages[pageIndex] || [];\n        for (const uid of oldUidsOnPage) {\n          delete newByUid[uid];\n        }\n        const newUidsOnPage = list.map((a, index) => {\n          const localId = Date.now() + Math.random() + index;\n          const uid = makeUid(pageIndex, localId);\n          newByUid[uid] = { localId, pdfId: a.id, commitState: 'synced', object: a };\n          return uid;\n        });\n        newPages[pageIndex] = newUidsOnPage;\n      }\n      return { ...state, pages: newPages, byUid: newByUid };\n    }\n\n    /* ───── GUI bits ───── */\n    case SET_ACTIVE_VARIANT:\n      return { ...state, activeVariant: action.payload };\n    case SELECT_ANNOTATION:\n      return {\n        ...state,\n        selectedUid: makeUid(action.payload.pageIndex, action.payload.localId),\n      };\n    case DESELECT_ANNOTATION:\n      return { ...state, selectedUid: null };\n\n    case ADD_COLOR_PRESET:\n      return state.colorPresets.includes(action.payload)\n        ? state\n        : { ...state, colorPresets: [...state.colorPresets, action.payload] };\n\n    case UPDATE_TOOL_DEFAULTS: {\n      const { variantKey, patch } = action.payload;\n      const prev = state.toolDefaults[variantKey];\n      if (!prev) return state;\n      return {\n        ...state,\n        toolDefaults: {\n          ...state.toolDefaults,\n          [variantKey]: { ...prev, ...patch } as AnnotationDefaults,\n        },\n      };\n    }\n\n    /* ───── create ───── */\n    case CREATE_ANNOTATION: {\n      const { pageIndex, localId, annotation } = action.payload;\n      const uid = makeUid(pageIndex, localId);\n\n      return {\n        ...state,\n        pages: { ...state.pages, [pageIndex]: [...(state.pages[pageIndex] ?? []), uid] },\n        byUid: {\n          ...state.byUid,\n          [uid]: { localId, pdfId: undefined, commitState: 'new', object: annotation },\n        },\n        hasPendingChanges: true,\n      };\n    }\n\n    /* ───── delete ───── */\n    case DELETE_ANNOTATION: {\n      const { pageIndex, localId } = action.payload;\n      const uid = makeUid(pageIndex, localId);\n      if (!state.byUid[uid]) return state;\n\n      /* keep the object but mark it as deleted */\n      return {\n        ...state,\n        pages: {\n          ...state.pages,\n          [pageIndex]: (state.pages[pageIndex] ?? []).filter((u) => u !== uid),\n        },\n        byUid: {\n          ...state.byUid,\n          [uid]: { ...state.byUid[uid], commitState: 'deleted' },\n        },\n        hasPendingChanges: true,\n      };\n    }\n\n    /* ───── field edits ───── */\n    case PATCH_ANNOTATION: {\n      const uid = makeUid(action.payload.pageIndex, action.payload.localId);\n      return patchAnno(state, uid, action.payload.patch);\n    }\n\n    /* ───── commit bookkeeping ───── */\n    case COMMIT_PENDING_CHANGES: {\n      const cleaned: AnnotationState['byUid'] = {};\n      for (const [uid, ta] of Object.entries(state.byUid)) {\n        cleaned[uid] = {\n          ...ta,\n          commitState:\n            ta.commitState === 'dirty' || ta.commitState === 'new' ? 'synced' : ta.commitState,\n        };\n      }\n      return { ...state, byUid: cleaned, hasPendingChanges: false };\n    }\n\n    case REINDEX_PAGE_ANNOTATIONS: {\n      const { pageIndex } = action.payload;\n      const newByUid = { ...state.byUid };\n\n      const uidsOnPage = state.pages[pageIndex] || [];\n      const annosOnPage = uidsOnPage\n        .map((uid) => state.byUid[uid])\n        .filter((ta) => ta && ta.commitState !== 'deleted'); // Filter out annotations pending deletion\n\n      // CORRECTED: Sort by the existing pdfId to maintain relative order.\n      annosOnPage.sort((a, b) => (a.pdfId ?? Infinity) - (b.pdfId ?? Infinity));\n\n      // Update the pdfId for each annotation based on its new sorted index\n      annosOnPage.forEach((ta, newPdfId) => {\n        const uid = makeUid(pageIndex, ta.localId);\n        newByUid[uid] = { ...newByUid[uid], pdfId: newPdfId };\n      });\n\n      return { ...state, byUid: newByUid };\n    }\n\n    case STORE_PDF_ID: {\n      const { uid, pdfId } = action.payload;\n\n      const ta = state.byUid[uid];\n      if (!ta) return state;\n      return {\n        ...state,\n        byUid: {\n          ...state.byUid,\n          [uid]: { ...ta, pdfId, commitState: 'synced' },\n        },\n      };\n    }\n\n    case PURGE_ANNOTATION: {\n      const { uid } = action.payload;\n      const { [uid]: _gone, ...rest } = state.byUid;\n      return { ...state, byUid: rest };\n    }\n\n    default:\n      return state;\n  }\n};\n","import { PluginPackage } from '@embedpdf/core';\nimport { manifest, ANNOTATION_PLUGIN_ID } from './manifest';\nimport { AnnotationPluginConfig, AnnotationState } from './types';\nimport { AnnotationPlugin } from './annotation-plugin';\nimport { initialState, reducer } from './reducer';\nimport { AnnotationAction } from './actions';\n\nexport const AnnotationPluginPackage: PluginPackage<\n  AnnotationPlugin,\n  AnnotationPluginConfig,\n  AnnotationState,\n  AnnotationAction\n> = {\n  manifest,\n  create: (registry, engine, config) =>\n    new AnnotationPlugin(ANNOTATION_PLUGIN_ID, registry, engine, config),\n  reducer,\n  initialState: (_, config) => initialState(config),\n};\n\nexport * from './annotation-plugin';\nexport * from './types';\nexport * from './manifest';\nexport * from './selectors';\nexport * from './variant-key';\n"],"mappings":"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","names":["SET_DOCUMENT","PdfSoftHyphenMarker","PdfZeroWidthSpace","PdfWordJoiner","PdfBomOrZwnbsp","PdfNonCharacterFFFE","PdfNonCharacterFFFF","PdfUnwantedTextMarkers","BLEND_MODE_INFOS","m","info","PdfAnnotationFlagName","acc","bit","name","arePropsEqual","a","b","visited","aType","pairId","getPairId","aIsArray","bIsArray","arraysEqualUnordered","objectsEqual","objectId","objectIdCounter","objectIds","obj","used","outer","i","elemA","j","aKeys","bKeys","key","valA","valB","BasePlugin","id","registry","action","newState","oldState","resolve","cap","debounceTime","now","lastActionTime","listener","EventControl","handler","options","data","throttleMode","createBehaviorEmitter","initial","equality","arePropsEqual","listeners","proxyMap","_value","notify","v","l","baseOn","listener","options","realListener","destroy","ctl","EventControl","proxy","p","selector","eq","prev","mapped","next","Rotation","PdfBlendMode","m","PdfAnnotationSubtype","AppearanceMode","PdfErrorCode","p","k","makeUid","p","w","p","page","task","b","u","b","_"]}
{"version":3,"sources":["../src/geometry.ts","../src/logger.ts","../src/task.ts","../src/pdf.ts","../src/color.ts","../src/date.ts","../src/index.ts"],"sourcesContent":["/**\n * Clockwise direction\n * @public\n */\nexport enum Rotation {\n  Degree0 = 0,\n  Degree90 = 1,\n  Degree180 = 2,\n  Degree270 = 3,\n}\n\n/** Clamp a Position to device-pixel integers (floor) */\nexport function toIntPos(p: Position): Position {\n  return { x: Math.floor(p.x), y: Math.floor(p.y) };\n}\n\n/** Clamp a Size so it never truncates right / bottom (ceil) */\nexport function toIntSize(s: Size): Size {\n  return { width: Math.ceil(s.width), height: Math.ceil(s.height) };\n}\n\n/** Apply both rules to a Rect */\nexport function toIntRect(r: Rect): Rect {\n  return {\n    origin: toIntPos(r.origin),\n    size: toIntSize(r.size),\n  };\n}\n\n/**\n * Calculate degree that match the rotation type\n * @param rotation - type of rotation\n * @returns rotated degree\n *\n * @public\n */\nexport function calculateDegree(rotation: Rotation) {\n  switch (rotation) {\n    case Rotation.Degree0:\n      return 0;\n    case Rotation.Degree90:\n      return 90;\n    case Rotation.Degree180:\n      return 180;\n    case Rotation.Degree270:\n      return 270;\n  }\n}\n\n/**\n * Calculate angle that match the rotation type\n * @param rotation - type of rotation\n * @returns rotated angle\n *\n * @public\n */\nexport function calculateAngle(rotation: Rotation) {\n  return (calculateDegree(rotation) * Math.PI) / 180;\n}\n\n/**\n * Represent the size of object\n *\n * @public\n */\nexport interface Size {\n  /**\n   * width of the object\n   */\n  width: number;\n\n  /**\n   * height of the object\n   */\n  height: number;\n}\n\n/**\n * Represents a rectangle defined by its left, top, right, and bottom edges\n *\n * @public\n */\nexport interface Box {\n  /**\n   * The x-coordinate of the left edge\n   */\n  left: number;\n\n  /**\n   * The y-coordinate of the top edge\n   */\n  top: number;\n\n  /**\n   * The x-coordinate of the right edge\n   */\n  right: number;\n\n  /**\n   * The y-coordinate of the bottom edge\n   */\n  bottom: number;\n}\n\n/**\n * Swap the width and height of the size object\n * @param size - the original size\n * @returns swapped size\n *\n * @public\n */\nexport function swap(size: Size): Size {\n  const { width, height } = size;\n\n  return {\n    width: height,\n    height: width,\n  };\n}\n\n/**\n * Transform size with specified rotation angle and scale factor\n * @param size - orignal size of rect\n * @param rotation - rotation angle\n * @param scaleFactor - - scale factor\n * @returns size that has been transformed\n *\n * @public\n */\nexport function transformSize(size: Size, rotation: Rotation, scaleFactor: number): Size {\n  size = rotation % 2 === 0 ? size : swap(size);\n\n  return {\n    width: size.width * scaleFactor,\n    height: size.height * scaleFactor,\n  };\n}\n\n/**\n * position of point\n *\n * @public\n */\nexport interface Position {\n  /**\n   * x coordinate\n   */\n  x: number;\n\n  /**\n   * y coordinate\n   */\n  y: number;\n}\n\n/**\n * Quadrilateral\n *\n * @public\n */\nexport interface Quad {\n  p1: Position;\n  p2: Position;\n  p3: Position;\n  p4: Position;\n}\n\n/**\n * Convert quadrilateral to rectangle\n * @param q - quadrilateral\n * @returns rectangle\n *\n * @public\n */\nexport function quadToRect(q: Quad): Rect {\n  const xs = [q.p1.x, q.p2.x, q.p3.x, q.p4.x];\n  const ys = [q.p1.y, q.p2.y, q.p3.y, q.p4.y];\n\n  return {\n    origin: { x: Math.min(...xs), y: Math.min(...ys) },\n    size: {\n      width: Math.max(...xs) - Math.min(...xs),\n      height: Math.max(...ys) - Math.min(...ys),\n    },\n  };\n}\n\n/**\n * Convert rectangle to quadrilateral\n * @param r - rectangle\n * @returns quadrilateral\n *\n * @public\n */\nexport function rectToQuad(r: Rect): Quad {\n  return {\n    p1: { x: r.origin.x, y: r.origin.y },\n    p2: { x: r.origin.x + r.size.width, y: r.origin.y },\n    p3: { x: r.origin.x + r.size.width, y: r.origin.y + r.size.height },\n    p4: { x: r.origin.x, y: r.origin.y + r.size.height },\n  };\n}\n\n/**\n * Rotate the container and calculate the new position for a point\n * in specified position\n * @param containerSize - size of the container\n * @param position - position of the point\n * @param rotation - rotated angle\n * @returns new position of the point\n *\n * @public\n */\nexport function rotatePosition(\n  containerSize: Size,\n  position: Position,\n  rotation: Rotation,\n): Position {\n  let x = position.x;\n  let y = position.y;\n\n  switch (rotation) {\n    case Rotation.Degree0:\n      x = position.x;\n      y = position.y;\n      break;\n    case Rotation.Degree90:\n      x = containerSize.height - position.y;\n      y = position.x;\n      break;\n    case Rotation.Degree180:\n      x = containerSize.width - position.x;\n      y = containerSize.height - position.y;\n      break;\n    case Rotation.Degree270:\n      x = position.y;\n      y = containerSize.width - position.x;\n      break;\n  }\n\n  return {\n    x,\n    y,\n  };\n}\n\n/**\n * Calculate the position of point by scaling the container\n * @param position - position of the point\n * @param scaleFactor - factor of scaling\n * @returns new position of point\n *\n * @public\n */\nexport function scalePosition(position: Position, scaleFactor: number): Position {\n  return {\n    x: position.x * scaleFactor,\n    y: position.y * scaleFactor,\n  };\n}\n\n/**\n * Calculate the position of the point by applying the specified transformation\n * @param containerSize - size of container\n * @param position - position of the point\n * @param rotation - rotated angle\n * @param scaleFactor - factor of scaling\n * @returns new position of point\n *\n * @public\n */\nexport function transformPosition(\n  containerSize: Size,\n  position: Position,\n  rotation: Rotation,\n  scaleFactor: number,\n): Position {\n  return scalePosition(rotatePosition(containerSize, position, rotation), scaleFactor);\n}\n\n/**\n * Restore the position in a transformed cotainer\n * @param containerSize - size of the container\n * @param position - position of the point\n * @param rotation - rotated angle\n * @param scaleFactor - factor of scaling\n * @returns the original position of the point\n *\n * @public\n */\nexport function restorePosition(\n  containerSize: Size,\n  position: Position,\n  rotation: Rotation,\n  scaleFactor: number,\n): Position {\n  return scalePosition(\n    rotatePosition(containerSize, position, (4 - rotation) % 4),\n    1 / scaleFactor,\n  );\n}\n\n/**\n * representation of rectangle\n *\n * @public\n */\nexport interface Rect {\n  /**\n   * origin of the rectangle\n   */\n  origin: Position;\n\n  /**\n   * size of the rectangle\n   */\n  size: Size;\n}\n\n/**\n * Calculate the rect after rotated the container\n * @param containerSize - size of container\n * @param rect - target rect\n * @param rotation - rotation angle\n * @returns rotated rect\n *\n * @public\n */\nexport function rotateRect(containerSize: Size, rect: Rect, rotation: Rotation): Rect {\n  let x = rect.origin.x;\n  let y = rect.origin.y;\n  let size = rect.size;\n\n  switch (rotation) {\n    case Rotation.Degree0:\n      break;\n    case Rotation.Degree90:\n      x = containerSize.height - rect.origin.y - rect.size.height;\n      y = rect.origin.x;\n      size = swap(rect.size);\n      break;\n    case Rotation.Degree180:\n      x = containerSize.width - rect.origin.x - rect.size.width;\n      y = containerSize.height - rect.origin.y - rect.size.height;\n      break;\n    case Rotation.Degree270:\n      x = rect.origin.y;\n      y = containerSize.width - rect.origin.x - rect.size.width;\n      size = swap(rect.size);\n      break;\n  }\n\n  return {\n    origin: {\n      x,\n      y,\n    },\n    size: {\n      width: size.width,\n      height: size.height,\n    },\n  };\n}\n\n/**\n * Scale the rectangle\n * @param rect - rectangle\n * @param scaleFactor - factor of scaling\n * @returns new rectangle\n *\n * @public\n */\nexport function scaleRect(rect: Rect, scaleFactor: number): Rect {\n  return {\n    origin: {\n      x: rect.origin.x * scaleFactor,\n      y: rect.origin.y * scaleFactor,\n    },\n    size: {\n      width: rect.size.width * scaleFactor,\n      height: rect.size.height * scaleFactor,\n    },\n  };\n}\n\n/**\n * Calculate new rectangle after transforming the container\n * @param containerSize - size of the container\n * @param rect - the target rectangle\n * @param rotation - rotated angle\n * @param scaleFactor - factor of scaling\n * @returns new rectangle after transformation\n *\n * @public\n */\nexport function transformRect(\n  containerSize: Size,\n  rect: Rect,\n  rotation: Rotation,\n  scaleFactor: number,\n): Rect {\n  return scaleRect(rotateRect(containerSize, rect, rotation), scaleFactor);\n}\n\n/**\n * Calculate new rectangle before transforming the container\n * @param containerSize - size of the container\n * @param rect - the target rectangle\n * @param rotation - rotated angle\n * @param scaleFactor - factor of scaling\n * @returns original rectangle before transformation\n *\n * @public\n */\nexport function restoreRect(\n  containerSize: Size,\n  rect: Rect,\n  rotation: Rotation,\n  scaleFactor: number,\n): Rect {\n  return scaleRect(rotateRect(containerSize, rect, (4 - rotation) % 4), 1 / scaleFactor);\n}\n\n/**\n * Calculate the original offset in a transformed container\n * @param offset - position of the point\n * @param rotation - rotated angle\n * @param scaleFactor - factor of scaling\n * @returns original position of the point\n *\n * @public\n */\nexport function restoreOffset(offset: Position, rotation: Rotation, scaleFactor: number): Position {\n  let offsetX = offset.x;\n  let offsetY = offset.y;\n  switch (rotation) {\n    case Rotation.Degree0:\n      offsetX = offset.x / scaleFactor;\n      offsetY = offset.y / scaleFactor;\n      break;\n    case Rotation.Degree90:\n      offsetX = offset.y / scaleFactor;\n      offsetY = -offset.x / scaleFactor;\n      break;\n    case Rotation.Degree180:\n      offsetX = -offset.x / scaleFactor;\n      offsetY = -offset.y / scaleFactor;\n      break;\n    case Rotation.Degree270:\n      offsetX = -offset.y / scaleFactor;\n      offsetY = offset.x / scaleFactor;\n      break;\n  }\n\n  return {\n    x: offsetX,\n    y: offsetY,\n  };\n}\n\n/**\n * Return the smallest rectangle that encloses *all* `rects`.\n * If the array is empty, returns `null`.\n *\n * @param rects - array of rectangles\n * @returns smallest rectangle that encloses all the rectangles\n *\n * @public\n */\nexport function boundingRect(rects: Rect[]): Rect | null {\n  if (rects.length === 0) return null;\n\n  let minX = rects[0].origin.x,\n    minY = rects[0].origin.y,\n    maxX = rects[0].origin.x + rects[0].size.width,\n    maxY = rects[0].origin.y + rects[0].size.height;\n\n  for (const r of rects) {\n    minX = Math.min(minX, r.origin.x);\n    minY = Math.min(minY, r.origin.y);\n    maxX = Math.max(maxX, r.origin.x + r.size.width);\n    maxY = Math.max(maxY, r.origin.y + r.size.height);\n  }\n\n  return {\n    origin: {\n      x: minX,\n      y: minY,\n    },\n    size: {\n      width: maxX - minX,\n      height: maxY - minY,\n    },\n  };\n}\n\nexport interface Matrix {\n  a: number;\n  b: number;\n  c: number;\n  d: number;\n  e: number;\n  f: number;\n}\n\n/**\n * Build a CTM that maps *PDF-space* inside the annotation\n * → *device-space* inside the bitmap, honouring\n * zoom (scaleFactor × dpr) **and** page-rotation.\n */\n/** build the CTM for any page-rotation */\nexport const makeMatrix = (rectangle: Rect, rotation: Rotation, scaleFactor: number): Matrix => {\n  const { width, height } = rectangle.size;\n\n  switch (rotation) {\n    case Rotation.Degree0: // normal\n      return {\n        a: scaleFactor,\n        b: 0,\n        c: 0,\n        d: -scaleFactor,\n        e: 0,\n        f: height * scaleFactor,\n      };\n\n    case Rotation.Degree90: // +90° CW\n      //  matrix =   [ 0  s ]   after flip-Y → no extra translation needed\n      //              [ s  0 ]\n      return {\n        a: 0,\n        b: scaleFactor,\n        c: scaleFactor,\n        d: 0,\n        e: 0,\n        f: 0,\n      };\n\n    case Rotation.Degree180: // +180°\n      return {\n        a: -scaleFactor,\n        b: 0,\n        c: 0,\n        d: scaleFactor,\n        e: width * scaleFactor,\n        f: 0,\n      };\n\n    case Rotation.Degree270: // +270° CW  (= 90° CCW)\n      //  flips the other way, so we nudge it back inside the bitmap\n      return {\n        a: 0,\n        b: -scaleFactor,\n        c: -scaleFactor,\n        d: 0,\n        e: height * scaleFactor,\n        f: width * scaleFactor,\n      };\n  }\n};\n","/**\n * logger for logging\n *\n * @public\n */\nexport interface Logger {\n  /**\n   * Log debug message\n   * @param source - source of log\n   * @param category - category of log\n   * @param args - parameters of log\n   * @returns\n   *\n   * @public\n   */\n  debug: (source: string, category: string, ...args: any) => void;\n\n  /**\n   * Log infor message\n   * @param source - source of log\n   * @param category - category of log\n   * @param args - parameters of log\n   * @returns\n   *\n   * @public\n   */\n  info: (source: string, category: string, ...args: any) => void;\n\n  /**\n   * Log warning message\n   * @param source - source of log\n   * @param category - category of log\n   * @param args - parameters of log\n   * @returns\n   *\n   * @public\n   */\n  warn: (source: string, category: string, ...args: any) => void;\n  /**\n   * Log error message\n   * @param source - source of log\n   * @param category - category of log\n   * @param args - parameters of log\n   * @returns\n   *\n   * @public\n   */\n  error: (source: string, category: string, ...args: any) => void;\n\n  /**\n   * Log performance log\n   * @param source - source of log\n   * @param category - category of log\n   * @param event - event of log\n   * @param phase - event phase of log\n   * @param args - parameters of log\n   * @returns\n   *\n   * @public\n   */\n  perf: (\n    source: string,\n    category: string,\n    event: string,\n    phase: 'Begin' | 'End',\n    ...args: any\n  ) => void;\n}\n\n/**\n * Logger that log nothing, it will ignore all the logs\n *\n * @public\n */\nexport class NoopLogger implements Logger {\n  /** {@inheritDoc Logger.debug} */\n  debug() {}\n  /** {@inheritDoc Logger.info} */\n  info() {}\n  /** {@inheritDoc Logger.warn} */\n  warn() {}\n  /** {@inheritDoc Logger.error} */\n  error() {}\n  /** {@inheritDoc Logger.perf} */\n  perf() {}\n}\n\n/**\n * Logger that use console as the output\n *\n * @public\n */\nexport class ConsoleLogger implements Logger {\n  /** {@inheritDoc Logger.debug} */\n  debug(source: string, category: string, ...args: any) {\n    console.debug(`${source}.${category}`, ...args);\n  }\n\n  /** {@inheritDoc Logger.info} */\n  info(source: string, category: string, ...args: any) {\n    console.info(`${source}.${category}`, ...args);\n  }\n\n  /** {@inheritDoc Logger.warn} */\n  warn(source: string, category: string, ...args: any) {\n    console.warn(`${source}.${category}`, ...args);\n  }\n\n  /** {@inheritDoc Logger.error} */\n  error(source: string, category: string, ...args: any) {\n    console.error(`${source}.${category}`, ...args);\n  }\n\n  /** {@inheritDoc Logger.perf} */\n  perf(source: string, category: string, event: string, phase: 'Begin' | 'End', ...args: any) {\n    console.info(`${source}.${category}.${event}.${phase}`, ...args);\n  }\n}\n\n/**\n * Level of log\n *\n * @public\n */\nexport enum LogLevel {\n  Debug = 0,\n  Info,\n  Warn,\n  Error,\n}\n\n/**\n * Logger that support filtering by log level\n *\n * @public\n */\nexport class LevelLogger implements Logger {\n  /**\n   * create new LevelLogger\n   * @param logger - the original logger\n   * @param level - log level that used for filtering, all logs lower than this level will be filtered out\n   */\n  constructor(\n    private logger: Logger,\n    private level: LogLevel,\n  ) {}\n\n  /** {@inheritDoc Logger.debug} */\n  debug(source: string, category: string, ...args: any) {\n    if (this.level <= LogLevel.Debug) {\n      this.logger.debug(source, category, ...args);\n    }\n  }\n\n  /** {@inheritDoc Logger.info} */\n  info(source: string, category: string, ...args: any) {\n    if (this.level <= LogLevel.Info) {\n      this.logger.info(source, category, ...args);\n    }\n  }\n\n  /** {@inheritDoc Logger.warn} */\n  warn(source: string, category: string, ...args: any) {\n    if (this.level <= LogLevel.Warn) {\n      this.logger.warn(source, category, ...args);\n    }\n  }\n\n  /** {@inheritDoc Logger.error} */\n  error(source: string, category: string, ...args: any) {\n    if (this.level <= LogLevel.Error) {\n      this.logger.error(source, category, ...args);\n    }\n  }\n\n  /** {@inheritDoc Logger.perf} */\n  perf(source: string, category: string, event: string, phase: 'Begin' | 'End', ...args: any) {\n    this.logger.perf(source, category, event, phase, ...args);\n  }\n}\n\n/**\n * Logger for performance tracking\n *\n * @public\n */\nexport class PerfLogger implements Logger {\n  /**\n   * create new PerfLogger\n   */\n  constructor() {}\n\n  /** {@inheritDoc Logger.debug} */\n  debug(source: string, category: string, ...args: any) {}\n\n  /** {@inheritDoc Logger.info} */\n  info(source: string, category: string, ...args: any) {}\n\n  /** {@inheritDoc Logger.warn} */\n  warn(source: string, category: string, ...args: any) {}\n\n  /** {@inheritDoc Logger.error} */\n  error(source: string, category: string, ...args: any) {}\n\n  /** {@inheritDoc Logger.perf} */\n  perf(\n    source: string,\n    category: string,\n    event: string,\n    phase: 'Begin' | 'End',\n    identifier: string,\n    ...args: any\n  ) {\n    switch (phase) {\n      case 'Begin':\n        window.performance.mark(`${source}.${category}.${event}.${phase}.${identifier}`, {\n          detail: args,\n        });\n        break;\n      case 'End':\n        window.performance.mark(`${source}.${category}.${event}.${phase}.${identifier}`, {\n          detail: args,\n        });\n        window.performance.measure(\n          `${source}.${category}.${event}.Measure.${identifier}`,\n          `${source}.${category}.${event}.Begin.${identifier}`,\n          `${source}.${category}.${event}.End.${identifier}`,\n        );\n        break;\n    }\n  }\n}\n\n/**\n * Logger that will track and call child loggers\n *\n * @public\n */\nexport class AllLogger implements Logger {\n  /**\n   * create new PerfLogger\n   */\n  constructor(private loggers: Logger[]) {}\n\n  /** {@inheritDoc Logger.debug} */\n  debug(source: string, category: string, ...args: any) {\n    for (const logger of this.loggers) {\n      logger.debug(source, category, ...args);\n    }\n  }\n\n  /** {@inheritDoc Logger.info} */\n  info(source: string, category: string, ...args: any) {\n    for (const logger of this.loggers) {\n      logger.info(source, category, ...args);\n    }\n  }\n\n  /** {@inheritDoc Logger.warn} */\n  warn(source: string, category: string, ...args: any) {\n    for (const logger of this.loggers) {\n      logger.warn(source, category, ...args);\n    }\n  }\n\n  /** {@inheritDoc Logger.error} */\n  error(source: string, category: string, ...args: any) {\n    for (const logger of this.loggers) {\n      logger.error(source, category, ...args);\n    }\n  }\n\n  /** {@inheritDoc Logger.perf} */\n  perf(source: string, category: string, event: string, phase: 'Begin' | 'End', ...args: any) {\n    for (const logger of this.loggers) {\n      logger.perf(source, category, event, phase, ...args);\n    }\n  }\n}\n","/**\n * Stage of task\n *\n * @public\n */\nexport enum TaskStage {\n  /**\n   * Task is pending, means it just start executing\n   */\n  Pending = 0,\n  /**\n   * Task is succeed\n   */\n  Resolved = 1,\n  /**\n   * Task is failed\n   */\n  Rejected = 2,\n  /**\n   * Task is aborted\n   */\n  Aborted = 3,\n}\n\nexport interface TaskError<D> {\n  /**\n   * task error type\n   */\n  type: 'reject' | 'abort';\n  /**\n   * task error\n   */\n  reason: D;\n}\n\n/**\n * callback that will be called when task is resolved\n *\n * @public\n */\nexport type ResolvedCallback<R> = (r: R) => void;\n\n/**\n * callback that will be called when task is rejected\n *\n * @public\n */\nexport type RejectedCallback<D> = (e: TaskError<D>) => void;\n\n/**\n * Task state in different stage\n *\n * @public\n */\nexport type TaskState<R, D> =\n  | {\n      stage: TaskStage.Pending;\n    }\n  | {\n      stage: TaskStage.Resolved;\n      result: R;\n    }\n  | {\n      stage: TaskStage.Rejected;\n      reason: D;\n    }\n  | {\n      stage: TaskStage.Aborted;\n      reason: D;\n    };\n\n/**\n * Result type for allSettled\n *\n * @public\n */\nexport type TaskSettledResult<R, D> =\n  | { status: 'resolved'; value: R }\n  | { status: 'rejected'; reason: D }\n  | { status: 'aborted'; reason: D };\n\nexport class TaskAbortedError<D> extends Error {\n  constructor(reason: D) {\n    super(`Task aborted: ${JSON.stringify(reason)}`);\n    this.name = 'TaskAbortedError';\n  }\n}\n\nexport class TaskRejectedError<D> extends Error {\n  constructor(reason: D) {\n    super(`Task rejected: ${JSON.stringify(reason)}`);\n    this.name = 'TaskRejectedError';\n  }\n}\n\n/**\n * Base class of task\n *\n * @public\n */\nexport class Task<R, D> {\n  state: TaskState<R, D> = {\n    stage: TaskStage.Pending,\n  };\n  /**\n   * callbacks that will be executed when task is resolved\n   */\n  resolvedCallbacks: ResolvedCallback<R>[] = [];\n  /**\n   * callbacks that will be executed when task is rejected\n   */\n  rejectedCallbacks: RejectedCallback<D>[] = [];\n\n  /**\n   * Promise that will be resolved when task is settled\n   */\n  private _promise: Promise<R> | null = null;\n\n  /**\n   * Convert task to promise\n   * @returns promise that will be resolved when task is settled\n   */\n  toPromise(): Promise<R> {\n    if (!this._promise) {\n      this._promise = new Promise((resolve, reject) => {\n        this.wait(\n          (result) => resolve(result),\n          (error) => {\n            if (error.type === 'abort') {\n              reject(new TaskAbortedError(error.reason));\n            } else {\n              reject(new TaskRejectedError(error.reason));\n            }\n          },\n        );\n      });\n    }\n    return this._promise;\n  }\n\n  /**\n   * wait for task to be settled\n   * @param resolvedCallback - callback for resolved value\n   * @param rejectedCallback - callback for rejected value\n   */\n  wait(resolvedCallback: ResolvedCallback<R>, rejectedCallback: RejectedCallback<D>) {\n    switch (this.state.stage) {\n      case TaskStage.Pending:\n        this.resolvedCallbacks.push(resolvedCallback);\n        this.rejectedCallbacks.push(rejectedCallback);\n        break;\n      case TaskStage.Resolved:\n        resolvedCallback(this.state.result);\n        break;\n      case TaskStage.Rejected:\n        rejectedCallback({\n          type: 'reject',\n          reason: this.state.reason,\n        });\n        break;\n      case TaskStage.Aborted:\n        rejectedCallback({\n          type: 'abort',\n          reason: this.state.reason,\n        });\n        break;\n    }\n  }\n\n  /**\n   * resolve task with specific result\n   * @param result - result value\n   */\n  resolve(result: R) {\n    if (this.state.stage === TaskStage.Pending) {\n      this.state = {\n        stage: TaskStage.Resolved,\n        result,\n      };\n      for (const resolvedCallback of this.resolvedCallbacks) {\n        try {\n          resolvedCallback(result);\n        } catch (e) {\n          /* ignore */\n        }\n      }\n      this.resolvedCallbacks = [];\n      this.rejectedCallbacks = [];\n    }\n  }\n\n  /**\n   * reject task with specific reason\n   * @param reason - abort reason\n   *\n   */\n  reject(reason: D) {\n    if (this.state.stage === TaskStage.Pending) {\n      this.state = {\n        stage: TaskStage.Rejected,\n        reason,\n      };\n      for (const rejectedCallback of this.rejectedCallbacks) {\n        try {\n          rejectedCallback({\n            type: 'reject',\n            reason,\n          });\n        } catch (e) {\n          /*ignore */\n        }\n      }\n      this.resolvedCallbacks = [];\n      this.rejectedCallbacks = [];\n    }\n  }\n\n  /**\n   * abort task with specific reason\n   * @param reason - abort reason\n   */\n  abort(reason: D) {\n    if (this.state.stage === TaskStage.Pending) {\n      this.state = {\n        stage: TaskStage.Aborted,\n        reason,\n      };\n      for (const rejectedCallback of this.rejectedCallbacks) {\n        try {\n          rejectedCallback({\n            type: 'abort',\n            reason,\n          });\n        } catch (e) {\n          /* ignore */\n        }\n      }\n      this.resolvedCallbacks = [];\n      this.rejectedCallbacks = [];\n    }\n  }\n\n  /**\n   * fail task with a TaskError from another task\n   * This is a convenience method for error propagation between tasks\n   * @param error - TaskError from another task\n   */\n  fail(error: TaskError<D>) {\n    if (error.type === 'abort') {\n      this.abort(error.reason);\n    } else {\n      this.reject(error.reason);\n    }\n  }\n\n  /**\n   * Static method to wait for all tasks to resolve\n   * Returns a new task that resolves with an array of all results\n   * Rejects immediately if any task fails\n   *\n   * @param tasks - array of tasks to wait for\n   * @returns new task that resolves when all input tasks resolve\n   * @public\n   */\n  static all<R extends readonly Task<any, any>[]>(\n    tasks: R,\n  ): Task<{ [K in keyof R]: R[K] extends Task<infer U, any> ? U : never }, any> {\n    type ResultType = { [K in keyof R]: R[K] extends Task<infer U, any> ? U : never };\n\n    const combinedTask = new Task<ResultType, any>();\n\n    if (tasks.length === 0) {\n      combinedTask.resolve([] as any);\n      return combinedTask;\n    }\n\n    const results: any[] = new Array(tasks.length);\n    let resolvedCount = 0;\n    let isSettled = false;\n\n    tasks.forEach((task, index) => {\n      task.wait(\n        (result) => {\n          if (isSettled) return;\n\n          results[index] = result;\n          resolvedCount++;\n\n          if (resolvedCount === tasks.length) {\n            isSettled = true;\n            combinedTask.resolve(results as ResultType);\n          }\n        },\n        (error) => {\n          if (isSettled) return;\n\n          isSettled = true;\n          if (error.type === 'abort') {\n            combinedTask.abort(error.reason);\n          } else {\n            combinedTask.reject(error.reason);\n          }\n        },\n      );\n    });\n\n    return combinedTask;\n  }\n\n  /**\n   * Static method to wait for all tasks to settle (resolve, reject, or abort)\n   * Always resolves with an array of settlement results\n   *\n   * @param tasks - array of tasks to wait for\n   * @returns new task that resolves when all input tasks settle\n   * @public\n   */\n  static allSettled<R extends readonly Task<any, any>[]>(\n    tasks: R,\n  ): Task<\n    { [K in keyof R]: R[K] extends Task<infer U, infer E> ? TaskSettledResult<U, E> : never },\n    never\n  > {\n    type ResultType = {\n      [K in keyof R]: R[K] extends Task<infer U, infer E> ? TaskSettledResult<U, E> : never;\n    };\n\n    const combinedTask = new Task<ResultType, never>();\n\n    if (tasks.length === 0) {\n      combinedTask.resolve([] as any);\n      return combinedTask;\n    }\n\n    const results: any[] = new Array(tasks.length);\n    let settledCount = 0;\n\n    tasks.forEach((task, index) => {\n      task.wait(\n        (result) => {\n          results[index] = { status: 'resolved', value: result };\n          settledCount++;\n\n          if (settledCount === tasks.length) {\n            combinedTask.resolve(results as ResultType);\n          }\n        },\n        (error) => {\n          results[index] = {\n            status: error.type === 'abort' ? 'aborted' : 'rejected',\n            reason: error.reason,\n          };\n          settledCount++;\n\n          if (settledCount === tasks.length) {\n            combinedTask.resolve(results as ResultType);\n          }\n        },\n      );\n    });\n\n    return combinedTask;\n  }\n\n  /**\n   * Static method that resolves/rejects with the first task that settles\n   *\n   * @param tasks - array of tasks to race\n   * @returns new task that settles with the first input task that settles\n   * @public\n   */\n  static race<R extends readonly Task<any, any>[]>(\n    tasks: R,\n  ): Task<\n    R[number] extends Task<infer U, any> ? U : never,\n    R[number] extends Task<any, infer E> ? E : never\n  > {\n    type ResultType = R[number] extends Task<infer U, any> ? U : never;\n    type ErrorType = R[number] extends Task<any, infer E> ? E : never;\n\n    const combinedTask = new Task<ResultType, ErrorType>();\n\n    if (tasks.length === 0) {\n      combinedTask.reject('No tasks provided' as ErrorType);\n      return combinedTask;\n    }\n\n    let isSettled = false;\n\n    tasks.forEach((task) => {\n      task.wait(\n        (result) => {\n          if (isSettled) return;\n          isSettled = true;\n          combinedTask.resolve(result);\n        },\n        (error) => {\n          if (isSettled) return;\n          isSettled = true;\n          if (error.type === 'abort') {\n            combinedTask.abort(error.reason);\n          } else {\n            combinedTask.reject(error.reason);\n          }\n        },\n      );\n    });\n\n    return combinedTask;\n  }\n\n  /**\n   * Utility to track progress of multiple tasks\n   *\n   * @param tasks - array of tasks to track\n   * @param onProgress - callback called when any task completes\n   * @returns new task that resolves when all input tasks resolve\n   * @public\n   */\n  static withProgress<R extends readonly Task<any, any>[]>(\n    tasks: R,\n    onProgress?: (completed: number, total: number) => void,\n  ): Task<{ [K in keyof R]: R[K] extends Task<infer U, any> ? U : never }, any> {\n    const combinedTask = Task.all(tasks);\n\n    if (onProgress) {\n      let completedCount = 0;\n      tasks.forEach((task) => {\n        task.wait(\n          () => {\n            completedCount++;\n            onProgress(completedCount, tasks.length);\n          },\n          () => {\n            completedCount++;\n            onProgress(completedCount, tasks.length);\n          },\n        );\n      });\n    }\n\n    return combinedTask;\n  }\n}\n\n/**\n * Type that represent the result of executing task\n */\nexport type TaskReturn<T extends Task<any, any>> =\n  T extends Task<infer R, infer E>\n    ? { type: 'result'; value: R } | { type: 'error'; value: TaskError<E> }\n    : never;\n","import { WebAlphaColor } from './color';\nimport { Size, Rect, Position, Rotation, Quad } from './geometry';\nimport { Task, TaskError } from './task';\n\n/**\n * Representation of pdf page\n *\n * @public\n */\nexport interface PdfPageObject {\n  /**\n   * Index of this page, starts from 0\n   */\n  index: number;\n\n  /**\n   * Orignal size of this page\n   */\n  size: Size;\n}\n\n/**\n * Representation of pdf page with rotated size\n *\n * @public\n */\nexport interface PdfPageObjectWithRotatedSize extends PdfPageObject {\n  /**\n   * Rotated size of this page\n   */\n  rotatedSize: Size;\n}\n\n/**\n * Representation of pdf document\n *\n * @public\n */\nexport interface PdfDocumentObject {\n  /**\n   * Identity of document\n   */\n  id: string;\n\n  /**\n   * Count of pages in this document\n   */\n  pageCount: number;\n\n  /**\n   * Pages in this document\n   */\n  pages: PdfPageObject[];\n}\n\n/**\n * metadata of pdf document\n *\n * @public\n */\nexport interface PdfMetadataObject {\n  /**\n   * title of the document\n   */\n  title: string;\n  /**\n   * author of the document\n   */\n  author: string;\n  /**\n   * subject of the document\n   */\n  subject: string;\n  /**\n   * keywords of the document\n   */\n  keywords: string;\n  /**\n   * producer of the document\n   */\n  producer: string;\n  /**\n   * creator of the document\n   */\n  creator: string;\n  /**\n   * creation date of the document\n   */\n  creationDate: string;\n  /**\n   * modification date of the document\n   */\n  modificationDate: string;\n}\n\n/**\n * Unicode **soft-hyphen** marker (`U+00AD`).\n * Often embedded by PDF generators as discretionary hyphens.\n *\n * @public\n */\nexport const PdfSoftHyphenMarker = '\\u00AD';\n\n/**\n * Unicode **zero-width space** (`U+200B`).\n *\n * @public\n */\nexport const PdfZeroWidthSpace = '\\u200B';\n\n/**\n * Unicode **word-joiner** (`U+2060`) – zero-width no-break.\n *\n * @public\n */\nexport const PdfWordJoiner = '\\u2060';\n\n/**\n * Unicode **byte-order mark / zero-width&nbsp;no-break space** (`U+FEFF`).\n *\n * @public\n */\nexport const PdfBomOrZwnbsp = '\\uFEFF';\n\n/**\n * Unicode non-character `U+FFFE`.\n *\n * @public\n */\nexport const PdfNonCharacterFFFE = '\\uFFFE';\n\n/**\n * Unicode non-character `U+FFFF`.\n *\n * @public\n */\nexport const PdfNonCharacterFFFF = '\\uFFFF';\n\n/**\n * **Frozen list** of all unwanted markers in canonical order.\n *\n * @public\n */\nexport const PdfUnwantedTextMarkers = Object.freeze([\n  PdfSoftHyphenMarker,\n  PdfZeroWidthSpace,\n  PdfWordJoiner,\n  PdfBomOrZwnbsp,\n  PdfNonCharacterFFFE,\n  PdfNonCharacterFFFF,\n] as const);\n\n/**\n * Compiled regular expression that matches any unwanted marker.\n *\n * @public\n */\nexport const PdfUnwantedTextRegex = new RegExp(`[${PdfUnwantedTextMarkers.join('')}]`, 'g');\n\n/**\n * Remove all {@link PdfUnwantedTextMarkers | unwanted markers} from *text*.\n *\n * @param text - raw text extracted from PDF\n * @returns cleaned text\n *\n * @public\n */\nexport function stripPdfUnwantedMarkers(text: string): string {\n  return text.replace(PdfUnwantedTextRegex, '');\n}\n\n/**\n * zoom mode\n *\n * @public\n */\nexport enum PdfZoomMode {\n  Unknown = 0,\n  /**\n   * Zoom level with specified offset.\n   */\n  XYZ = 1,\n  /**\n   * Fit both the width and height of the page (whichever smaller).\n   */\n  FitPage = 2,\n  /**\n   * Fit the page width.\n   */\n  FitHorizontal = 3,\n  /**\n   * Fit the page height.\n   */\n  FitVertical = 4,\n  /**\n   * Fit a specific rectangle area within the window.\n   */\n  FitRectangle = 5,\n}\n\n/**\n * Blend mode\n *\n * @public\n */\nexport enum PdfBlendMode {\n  Normal = 0,\n  Multiply = 1,\n  Screen = 2,\n  Overlay = 3,\n  Darken = 4,\n  Lighten = 5,\n  ColorDodge = 6,\n  ColorBurn = 7,\n  HardLight = 8,\n  SoftLight = 9,\n  Difference = 10,\n  Exclusion = 11,\n  Hue = 12,\n  Saturation = 13,\n  Color = 14,\n  Luminosity = 15,\n}\n\n/** Extra UI sentinel for “multiple different values selected”. */\nexport const MixedBlendMode = Symbol('mixed');\nexport type UiBlendModeValue = PdfBlendMode | typeof MixedBlendMode;\n\ninterface BlendModeInfo {\n  /** Pdf enum value */\n  id: PdfBlendMode;\n  /** Human label for UI */\n  label: string;\n  /** CSS mix-blend-mode token */\n  css: string;\n}\n\n/** Canonical ordered descriptor list (matches enum numeric order). */\nconst BLEND_MODE_INFOS: readonly BlendModeInfo[] = Object.freeze([\n  { id: PdfBlendMode.Normal, label: 'Normal', css: 'normal' },\n  { id: PdfBlendMode.Multiply, label: 'Multiply', css: 'multiply' },\n  { id: PdfBlendMode.Screen, label: 'Screen', css: 'screen' },\n  { id: PdfBlendMode.Overlay, label: 'Overlay', css: 'overlay' },\n  { id: PdfBlendMode.Darken, label: 'Darken', css: 'darken' },\n  { id: PdfBlendMode.Lighten, label: 'Lighten', css: 'lighten' },\n  { id: PdfBlendMode.ColorDodge, label: 'Color Dodge', css: 'color-dodge' },\n  { id: PdfBlendMode.ColorBurn, label: 'Color Burn', css: 'color-burn' },\n  { id: PdfBlendMode.HardLight, label: 'Hard Light', css: 'hard-light' },\n  { id: PdfBlendMode.SoftLight, label: 'Soft Light', css: 'soft-light' },\n  { id: PdfBlendMode.Difference, label: 'Difference', css: 'difference' },\n  { id: PdfBlendMode.Exclusion, label: 'Exclusion', css: 'exclusion' },\n  { id: PdfBlendMode.Hue, label: 'Hue', css: 'hue' },\n  { id: PdfBlendMode.Saturation, label: 'Saturation', css: 'saturation' },\n  { id: PdfBlendMode.Color, label: 'Color', css: 'color' },\n  { id: PdfBlendMode.Luminosity, label: 'Luminosity', css: 'luminosity' },\n]);\n\n/* Build O(1) maps once */\nconst enumToInfo: Record<PdfBlendMode, BlendModeInfo> = BLEND_MODE_INFOS.reduce(\n  (m, info) => {\n    m[info.id] = info;\n    return m;\n  },\n  {} as Record<PdfBlendMode, BlendModeInfo>,\n);\n\nconst cssToEnum = BLEND_MODE_INFOS.reduce<Record<string, PdfBlendMode>>((m, info) => {\n  m[info.css] = info.id;\n  return m;\n}, {});\n\n/** Get descriptor (falls back to Normal if unknown number sneaks in).\n *\n * @public\n */\nexport function getBlendModeInfo(mode: PdfBlendMode): BlendModeInfo {\n  return enumToInfo[mode] ?? enumToInfo[PdfBlendMode.Normal];\n}\n\n/** Convert enum → CSS value for `mix-blend-mode`.\n *\n * @public\n */\nexport function blendModeToCss(mode: PdfBlendMode): string {\n  return getBlendModeInfo(mode).css;\n}\n\n/** Convert CSS token → enum (returns undefined if not recognized).\n *\n * @public\n */\nexport function cssToBlendMode(value: string): PdfBlendMode | undefined {\n  return cssToEnum[value as keyof typeof cssToEnum];\n}\n\n/** Enum → UI label.\n *\n * @public\n */\nexport function blendModeLabel(mode: PdfBlendMode): string {\n  return getBlendModeInfo(mode).label;\n}\n\n/**\n * For a selection of annotations: returns the common enum value, or Mixed sentinel.\n *\n * @public\n */\nexport function reduceBlendModes(modes: readonly PdfBlendMode[]): UiBlendModeValue {\n  if (!modes.length) return PdfBlendMode.Normal;\n  const first = modes[0];\n  return modes.every((m) => m === first) ? first : MixedBlendMode;\n}\n\n/** Options for a <select>.\n *\n * @public\n */\nexport const blendModeSelectOptions = BLEND_MODE_INFOS.map((info) => ({\n  value: info.id,\n  label: info.label,\n}));\n\n/** Provide a label when Mixed sentinel used (UI convenience).\n *\n * @public\n */\nexport function uiBlendModeDisplay(value: UiBlendModeValue): string {\n  return value === MixedBlendMode ? '(mixed)' : blendModeLabel(value);\n}\n\n/**\n * Representation of the linked destination\n *\n * @public\n */\nexport interface PdfDestinationObject {\n  /**\n   * Index of target page\n   */\n  pageIndex: number;\n  /**\n   * zoom config for target destination\n   */\n  zoom:\n    | {\n        mode: PdfZoomMode.Unknown;\n      }\n    | { mode: PdfZoomMode.XYZ; params: { x: number; y: number; zoom: number } }\n    | {\n        mode: PdfZoomMode.FitPage;\n      }\n    | {\n        mode: PdfZoomMode.FitHorizontal;\n      }\n    | {\n        mode: PdfZoomMode.FitVertical;\n      }\n    | {\n        mode: PdfZoomMode.FitRectangle;\n      };\n  view: number[];\n}\n\n/**\n * Type of pdf action\n *\n * @public\n */\nexport enum PdfActionType {\n  Unsupported = 0,\n  /**\n   * Goto specified position in this document\n   */\n  Goto = 1,\n  /**\n   * Goto specified position in another document\n   */\n  RemoteGoto = 2,\n  /**\n   * Goto specified URI\n   */\n  URI = 3,\n  /**\n   * Launch specifed application\n   */\n  LaunchAppOrOpenFile = 4,\n}\n\nexport type PdfImage = {\n  data: Uint8ClampedArray;\n  width: number;\n  height: number;\n};\n\n/**\n * Representation of pdf action\n *\n * @public\n */\nexport type PdfActionObject =\n  | {\n      type: PdfActionType.Unsupported;\n    }\n  | {\n      type: PdfActionType.Goto;\n      destination: PdfDestinationObject;\n    }\n  | {\n      type: PdfActionType.RemoteGoto;\n      destination: PdfDestinationObject;\n    }\n  | {\n      type: PdfActionType.URI;\n      uri: string;\n    }\n  | {\n      type: PdfActionType.LaunchAppOrOpenFile;\n      path: string;\n    };\n\n/**\n * target of pdf link\n *\n * @public\n */\nexport type PdfLinkTarget =\n  | {\n      type: 'action';\n      action: PdfActionObject;\n    }\n  | {\n      type: 'destination';\n      destination: PdfDestinationObject;\n    };\n\n/**\n * PDF bookmark\n *\n * @public\n */\nexport interface PdfBookmarkObject {\n  /**\n   * title of bookmark\n   */\n  title: string;\n\n  /**\n   * target of bookmark\n   */\n  target?: PdfLinkTarget | undefined;\n\n  /**\n   * bookmarks in the next level\n   */\n  children?: PdfBookmarkObject[];\n}\n\n/**\n * Pdf Signature\n *\n * @public\n */\nexport interface PdfSignatureObject {\n  /**\n   * contents of signature\n   */\n  contents: ArrayBuffer;\n\n  /**\n   * byte range of signature\n   */\n  byteRange: ArrayBuffer;\n\n  /**\n   * sub filters of signature\n   */\n  subFilter: ArrayBuffer;\n\n  /**\n   * reason of signature\n   */\n  reason: string;\n\n  /**\n   * creation time of signature\n   */\n  time: string;\n\n  /**\n   * MDP\n   */\n  docMDP: number;\n}\n\n/**\n * Bookmark tree of pdf\n *\n * @public\n */\nexport interface PdfBookmarksObject {\n  bookmarks: PdfBookmarkObject[];\n}\n\n/**\n * Text rectangle in pdf page\n *\n * @public\n */\nexport interface PdfTextRectObject {\n  /**\n   * Font of the text\n   */\n  font: {\n    /**\n     * font family\n     */\n    family: string;\n\n    /**\n     * font size\n     */\n    size: number;\n  };\n\n  /**\n   * content in this rectangle area\n   */\n  content: string;\n\n  /**\n   * rectangle of the text\n   */\n  rect: Rect;\n}\n\n/**\n * Color\n *\n * @public\n */\nexport interface PdfAlphaColor {\n  /**\n   * red\n   */\n  red: number;\n  /**\n   * green\n   */\n  green: number;\n  /**\n   * blue\n   */\n  blue: number;\n  /**\n   * alpha\n   */\n  alpha: number;\n}\n\n/**\n * Annotation type\n *\n * @public\n */\nexport enum PdfAnnotationSubtype {\n  UNKNOWN = 0,\n  TEXT,\n  LINK,\n  FREETEXT,\n  LINE,\n  SQUARE,\n  CIRCLE,\n  POLYGON,\n  POLYLINE,\n  HIGHLIGHT,\n  UNDERLINE,\n  SQUIGGLY,\n  STRIKEOUT,\n  STAMP,\n  CARET,\n  INK,\n  POPUP,\n  FILEATTACHMENT,\n  SOUND,\n  MOVIE,\n  WIDGET,\n  SCREEN,\n  PRINTERMARK,\n  TRAPNET,\n  WATERMARK,\n  THREED,\n  RICHMEDIA,\n  XFAWIDGET,\n  REDACT,\n}\n\n/**\n * Name of annotation type\n *\n * @public\n */\nexport const PdfAnnotationSubtypeName: Record<PdfAnnotationSubtype, string> = {\n  [PdfAnnotationSubtype.UNKNOWN]: 'unknow',\n  [PdfAnnotationSubtype.TEXT]: 'text',\n  [PdfAnnotationSubtype.LINK]: 'link',\n  [PdfAnnotationSubtype.FREETEXT]: 'freetext',\n  [PdfAnnotationSubtype.LINE]: 'line',\n  [PdfAnnotationSubtype.SQUARE]: 'square',\n  [PdfAnnotationSubtype.CIRCLE]: 'circle',\n  [PdfAnnotationSubtype.POLYGON]: 'polygon',\n  [PdfAnnotationSubtype.POLYLINE]: 'polyline',\n  [PdfAnnotationSubtype.HIGHLIGHT]: 'highlight',\n  [PdfAnnotationSubtype.UNDERLINE]: 'underline',\n  [PdfAnnotationSubtype.SQUIGGLY]: 'squiggly',\n  [PdfAnnotationSubtype.STRIKEOUT]: 'strikeout',\n  [PdfAnnotationSubtype.STAMP]: 'stamp',\n  [PdfAnnotationSubtype.CARET]: 'caret',\n  [PdfAnnotationSubtype.INK]: 'ink',\n  [PdfAnnotationSubtype.POPUP]: 'popup',\n  [PdfAnnotationSubtype.FILEATTACHMENT]: 'fileattachment',\n  [PdfAnnotationSubtype.SOUND]: 'sound',\n  [PdfAnnotationSubtype.MOVIE]: 'movie',\n  [PdfAnnotationSubtype.WIDGET]: 'widget',\n  [PdfAnnotationSubtype.SCREEN]: 'screen',\n  [PdfAnnotationSubtype.PRINTERMARK]: 'printermark',\n  [PdfAnnotationSubtype.TRAPNET]: 'trapnet',\n  [PdfAnnotationSubtype.WATERMARK]: 'watermark',\n  [PdfAnnotationSubtype.THREED]: 'threed',\n  [PdfAnnotationSubtype.RICHMEDIA]: 'richmedia',\n  [PdfAnnotationSubtype.XFAWIDGET]: 'xfawidget',\n  [PdfAnnotationSubtype.REDACT]: 'redact',\n};\n\n/**\n * Status of pdf annotation\n *\n * @public\n */\nexport enum PdfAnnotationObjectStatus {\n  /**\n   * Annotation is created\n   */\n  Created,\n  /**\n   * Annotation is committed to PDF file\n   */\n  Committed,\n}\n\n/**\n * Appearance mode\n *\n * @public\n */\nexport enum AppearanceMode {\n  Normal = 0,\n  Rollover = 1,\n  Down = 2,\n}\n\n/**\n * State of pdf annotation\n *\n * @public\n */\nexport enum PdfAnnotationState {\n  /**\n   * Annotation is active\n   */\n  Marked = 'Marked',\n  /**\n   * Annotation is unmarked\n   */\n  Unmarked = 'Unmarked',\n  /**\n   * Annotation is ink\n   */\n  Accepted = 'Accepted',\n  /**\n   * Annotation is rejected\n   */\n  Rejected = 'Rejected',\n  /**\n   * Annotation is complete\n   */\n  Complete = 'Complete',\n  /**\n   * Annotation is cancelled\n   */\n  Cancelled = 'Cancelled',\n  /**\n   * Annotation is none\n   */\n  None = 'None',\n}\n\n/**\n * State model of pdf annotation\n *\n * @public\n */\nexport enum PdfAnnotationStateModel {\n  /**\n   * Annotation is marked\n   */\n  Marked = 'Marked',\n  /**\n   * Annotation is reviewed\n   */\n  Reviewed = 'Reviewed',\n}\n\n/**\n * Basic information of pdf annotation\n *\n * @public\n */\nexport interface PdfAnnotationObjectBase {\n  /**\n   * Author of the annotation\n   */\n  author?: string;\n\n  /**\n   * Modified date of the annotation\n   */\n  modified?: Date;\n\n  /**\n   * blend mode of annotation\n   */\n  blendMode?: PdfBlendMode;\n\n  /**\n   * intent of annotation\n   */\n  intent?: string;\n\n  /**\n   * Sub type of annotation\n   */\n  type: PdfAnnotationSubtype;\n\n  /**\n   * The index of page that this annotation belong to\n   */\n  pageIndex: number;\n\n  /**\n   * id of the annotation\n   */\n  id: number;\n\n  /**\n   * Rectangle of the annotation\n   */\n  rect: Rect;\n}\n\n/**\n * Popup annotation\n *\n * @public\n */\nexport interface PdfPopupAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.POPUP;\n  /**\n   * Contents of the popup\n   */\n  contents: string;\n\n  /**\n   * Whether the popup is opened or not\n   */\n  open: boolean;\n\n  /**\n   * In reply to id\n   */\n  inReplyToId?: number;\n}\n\n/**\n * Pdf Link annotation\n *\n * @public\n */\nexport interface PdfLinkAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.LINK;\n  /**\n   * Text of the link\n   */\n  text: string;\n  /**\n   * target of the link\n   */\n  target: PdfLinkTarget | undefined;\n}\n\n/**\n * Pdf Text annotation\n *\n * @public\n */\nexport interface PdfTextAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.TEXT;\n  /**\n   * Text contents of the annotation\n   */\n  contents: string;\n\n  /**\n   * color of text annotation\n   */\n  color?: string;\n\n  /**\n   * opacity of text annotation\n   */\n  opacity?: number;\n\n  /**\n   * In reply to id\n   */\n  inReplyToId?: number;\n\n  /**\n   * State of the text annotation\n   */\n  state?: PdfAnnotationState;\n\n  /**\n   * State model of the text annotation\n   */\n  stateModel?: PdfAnnotationStateModel;\n}\n\n/**\n * Type of form field\n *\n * @public\n */\nexport enum PDF_FORM_FIELD_TYPE {\n  /**\n   * Unknow\n   */\n  UNKNOWN = 0,\n  /**\n   * push button type\n   */\n  PUSHBUTTON = 1,\n  /**\n   * check box type.\n   */\n  CHECKBOX = 2,\n  /**\n   * radio button type.\n   */\n  RADIOBUTTON = 3,\n  /**\n   * combo box type.\n   */\n  COMBOBOX = 4,\n  /**\n   * list box type.\n   */\n  LISTBOX = 5,\n  /**\n   *  text field type\n   */\n  TEXTFIELD = 6,\n  /**\n   * signature field type.\n   */\n  SIGNATURE = 7,\n  /**\n   * Generic XFA type.\n   */\n  XFA = 8,\n  /**\n   * XFA check box type.\n   */\n  XFA_CHECKBOX = 9,\n  /**\n   * XFA combo box type.\n   */\n  XFA_COMBOBOX = 10,\n  /**\n   * XFA image field type.\n   */\n  XFA_IMAGEFIELD = 11,\n  /**\n   * XFA list box type.\n   */\n  XFA_LISTBOX = 12,\n  /**\n   * XFA push button type.\n   */\n  XFA_PUSHBUTTON = 13,\n  /**\n   * XFA signture field type.\n   */\n  XFA_SIGNATURE = 14,\n  /**\n   * XFA text field type.\n   */\n  XFA_TEXTFIELD = 15,\n}\n\nexport enum PdfAnnotationColorType {\n  Color = 0,\n  InteriorColor = 1,\n}\n\n/**\n * Border style of pdf annotation\n *\n * @public\n */\nexport enum PdfAnnotationBorderStyle {\n  UNKNOWN = 0,\n  SOLID = 1,\n  DASHED = 2,\n  BEVELED = 3,\n  INSET = 4,\n  UNDERLINE = 5,\n  CLOUDY = 6,\n}\n\n/**\n * Flag of pdf annotation\n *\n * @public\n */\nexport enum PdfAnnotationFlags {\n  NONE = 0,\n  INVISIBLE = 1 << 0,\n  HIDDEN = 1 << 1,\n  PRINT = 1 << 2,\n  NO_ZOOM = 1 << 3,\n  NO_ROTATE = 1 << 4,\n  NO_VIEW = 1 << 5,\n  READ_ONLY = 1 << 6,\n  LOCKED = 1 << 7,\n  TOGGLE_NOVIEW = 1 << 8,\n}\n\n/**\n * Flag of form field\n *\n * @public\n */\nexport enum PDF_FORM_FIELD_FLAG {\n  NONE = 0,\n  READONLY = 1 << 0,\n  REQUIRED = 1 << 1,\n  NOEXPORT = 1 << 2,\n  TEXT_MULTIPLINE = 1 << 12,\n  TEXT_PASSWORD = 1 << 13,\n  CHOICE_COMBO = 1 << 17,\n  CHOICE_EDIT = 1 << 18,\n  CHOICE_MULTL_SELECT = 1 << 21,\n}\n\n/**\n * Type of pdf object\n *\n * @public\n */\nexport enum PdfPageObjectType {\n  UNKNOWN = 0,\n  TEXT = 1,\n  PATH = 2,\n  IMAGE = 3,\n  SHADING = 4,\n  FORM = 5,\n}\n\n/**\n * Options of pdf widget annotation\n *\n * @public\n */\nexport interface PdfWidgetAnnoOption {\n  label: string;\n  isSelected: boolean;\n}\n\nexport type PdfAnnotationFlagName =\n  | 'invisible'\n  | 'hidden'\n  | 'print'\n  | 'noZoom'\n  | 'noRotate'\n  | 'noView'\n  | 'readOnly'\n  | 'locked'\n  | 'toggleNoView';\n\ntype FlagMap = Partial<\n  Record<Exclude<PdfAnnotationFlags, PdfAnnotationFlags.NONE>, PdfAnnotationFlagName>\n>;\n\nexport const PdfAnnotationFlagName: Readonly<FlagMap> = Object.freeze({\n  [PdfAnnotationFlags.INVISIBLE]: 'invisible',\n  [PdfAnnotationFlags.HIDDEN]: 'hidden',\n  [PdfAnnotationFlags.PRINT]: 'print',\n  [PdfAnnotationFlags.NO_ZOOM]: 'noZoom',\n  [PdfAnnotationFlags.NO_ROTATE]: 'noRotate',\n  [PdfAnnotationFlags.NO_VIEW]: 'noView',\n  [PdfAnnotationFlags.READ_ONLY]: 'readOnly',\n  [PdfAnnotationFlags.LOCKED]: 'locked',\n  [PdfAnnotationFlags.TOGGLE_NOVIEW]: 'toggleNoView',\n} as const);\n\n/** Build a reverse map once so look-ups are O(1)                      */\nconst PdfAnnotationFlagValue: Record<PdfAnnotationFlagName, PdfAnnotationFlags> = Object.entries(\n  PdfAnnotationFlagName,\n).reduce(\n  (acc, [bit, name]) => {\n    acc[name as PdfAnnotationFlagName] = Number(bit) as PdfAnnotationFlags;\n    return acc;\n  },\n  {} as Record<PdfAnnotationFlagName, PdfAnnotationFlags>,\n);\n\n/**\n * Convert the raw bit-mask coming from `FPDFAnnot_GetFlags()` into\n * an array of human-readable flag names (“invisible”, “print”…).\n */\nexport function flagsToNames(raw: number): PdfAnnotationFlagName[] {\n  return (\n    Object.keys(PdfAnnotationFlagName) as unknown as Exclude<\n      PdfAnnotationFlags,\n      PdfAnnotationFlags.NONE\n    >[]\n  )\n    .filter((flag) => (raw & flag) !== 0)\n    .map((flag) => PdfAnnotationFlagName[flag]!);\n}\n\n/**\n * Convert an array of flag-names back into the numeric mask that\n * PDFium expects for `FPDFAnnot_SetFlags()`.\n */\nexport function namesToFlags(names: readonly PdfAnnotationFlagName[]): PdfAnnotationFlags {\n  return names.reduce<PdfAnnotationFlags>(\n    (mask, name) => mask | PdfAnnotationFlagValue[name],\n    PdfAnnotationFlags.NONE,\n  );\n}\n\n/**\n * Field of PDF widget annotation\n *\n * @public\n */\nexport interface PdfWidgetAnnoField {\n  /**\n   * flag of field\n   */\n  flag: PDF_FORM_FIELD_FLAG;\n  /**\n   * name of field\n   */\n  name: string;\n  /**\n   * alternate name of field\n   */\n  alternateName: string;\n  /**\n   * type of field\n   */\n  type: PDF_FORM_FIELD_TYPE;\n  /**\n   * value of field\n   */\n  value: string;\n  /**\n   * whether field is checked\n   */\n  isChecked: boolean;\n  /**\n   * options of field\n   */\n  options: PdfWidgetAnnoOption[];\n}\n\n/**\n * PDF widget object\n *\n * @public\n */\nexport interface PdfWidgetAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.WIDGET;\n  /**\n   * Field of pdf widget object\n   */\n  field: PdfWidgetAnnoField;\n}\n\n/**\n * Pdf file attachments annotation\n *\n * @public\n */\nexport interface PdfFileAttachmentAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.FILEATTACHMENT;\n}\n\n/**\n * ink list in pdf ink annotation\n *\n * @public\n */\nexport interface PdfInkListObject {\n  points: Position[];\n}\n\n/**\n * Pdf ink annotation\n *\n * @public\n */\nexport interface PdfInkAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.INK;\n  /**\n   * ink list of annotation\n   */\n  inkList: PdfInkListObject[];\n  /**\n   * color of ink annotation\n   */\n  color: string;\n\n  /**\n   * opacity of ink annotation\n   */\n  opacity: number;\n\n  /**\n   * stroke-width of ink annotation\n   */\n  strokeWidth: number;\n}\n\n/**\n * Pdf polygon annotation\n *\n * @public\n */\nexport interface PdfPolygonAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.POLYGON;\n  /**\n   * vertices of annotation\n   */\n  vertices: Position[];\n}\n\n/**\n * PDF polyline annotation\n *\n * @public\n */\nexport interface PdfPolylineAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.POLYLINE;\n  /**\n   * vertices of annotation\n   */\n  vertices: Position[];\n}\n\n/**\n * PDF line annotation\n *\n * @public\n */\nexport interface PdfLineAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.LINE;\n  /**\n   * start point of line\n   */\n  startPoint: Position;\n  /**\n   * end point of line\n   */\n  endPoint: Position;\n}\n\n/**\n * PDF highlight annotation\n *\n * @public\n */\nexport interface PdfHighlightAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.HIGHLIGHT;\n\n  /**\n   * Text contents of the highlight annotation\n   */\n  contents?: string;\n\n  /**\n   * color of highlight annotation\n   */\n  color: string;\n\n  /**\n   * opacity of highlight annotation\n   */\n  opacity: number;\n\n  /**\n   * quads of highlight area\n   */\n  segmentRects: Rect[];\n}\n\n/**\n * Matrix for transformation, in the form [a b c d e f], equivalent to:\n * | a  b  0 |\n * | c  d  0 |\n * | e  f  1 |\n *\n * Translation is performed with [1 0 0 1 tx ty].\n * Scaling is performed with [sx 0 0 sy 0 0].\n * See PDF Reference 1.7, 4.2.2 Common Transformations for more.\n */\nexport interface PdfTransformMatrix {\n  a: number;\n  b: number;\n  c: number;\n  d: number;\n  e: number;\n  f: number;\n}\n\n/**\n * type of segment type in pdf path object\n *\n * @public\n */\nexport enum PdfSegmentObjectType {\n  UNKNOWN = -1,\n  LINETO = 0,\n  BEZIERTO = 1,\n  MOVETO = 2,\n}\n\n/**\n * segment of path object\n *\n * @public\n */\nexport interface PdfSegmentObject {\n  type: PdfSegmentObjectType;\n  /**\n   * point of the segment\n   */\n  point: Position;\n  /**\n   * whether this segment close the path\n   */\n  isClosed: boolean;\n}\n\n/**\n * Pdf path object\n *\n * @public\n */\nexport interface PdfPathObject {\n  type: PdfPageObjectType.PATH;\n  /**\n   * bound that contains the path\n   */\n  bounds: { left: number; bottom: number; right: number; top: number };\n  /**\n   * segments of the path\n   */\n  segments: PdfSegmentObject[];\n  /**\n   * transform matrix\n   */\n  matrix: PdfTransformMatrix;\n}\n\n/**\n * Pdf image object\n *\n * @public\n */\nexport interface PdfImageObject {\n  type: PdfPageObjectType.IMAGE;\n  /**\n   * data of the image\n   */\n  imageData: ImageData;\n  /**\n   * transform matrix\n   */\n  matrix: PdfTransformMatrix;\n}\n\n/**\n * Pdf form object\n *\n * @public\n */\nexport interface PdfFormObject {\n  type: PdfPageObjectType.FORM;\n  /**\n   * objects that in this form object\n   */\n  objects: (PdfImageObject | PdfPathObject | PdfFormObject)[];\n  /**\n   * transform matrix\n   */\n  matrix: PdfTransformMatrix;\n}\n\n/**\n * Contents type of pdf stamp annotation\n *\n * @public\n */\nexport type PdfStampAnnoObjectContents = Array<PdfPathObject | PdfImageObject | PdfFormObject>;\n\n/**\n * Pdf stamp annotation\n *\n * @public\n */\nexport interface PdfStampAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.STAMP;\n  /**\n   * contents in this stamp annotation\n   */\n  contents: PdfStampAnnoObjectContents;\n}\n\n/**\n * Pdf circle annotation\n *\n * @public\n */\nexport interface PdfCircleAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.CIRCLE;\n  /**\n   * flags of circle annotation\n   */\n  flags: PdfAnnotationFlagName[];\n  /**\n   * color of circle annotation\n   */\n  color: string;\n  /**\n   * opacity of circle annotation\n   */\n  opacity: number;\n  /**\n   * stroke-width of circle annotation\n   */\n  strokeWidth: number;\n  /**\n   * stroke color of circle annotation\n   */\n  strokeColor: string;\n  /**\n   * stroke style of circle annotation\n   */\n  strokeStyle: PdfAnnotationBorderStyle;\n  /**\n   * stroke dash array of circle annotation\n   */\n  strokeDashArray?: number[];\n  /**\n   * cloudy border intensity of circle annotation\n   */\n  cloudyBorderIntensity?: number;\n  /**\n   * cloudy border inset of circle annotation\n   */\n  cloudyBorderInset?: number[];\n}\n\n/**\n * Pdf square annotation\n *\n * @public\n */\nexport interface PdfSquareAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.SQUARE;\n  /**\n   * flags of square annotation\n   */\n  flags: PdfAnnotationFlagName[];\n  /**\n   * color of square annotation\n   */\n  color: string;\n  /**\n   * opacity of square annotation\n   */\n  opacity: number;\n  /**\n   * stroke-width of square annotation\n   */\n  strokeWidth: number;\n  /**\n   * stroke color of square annotation\n   */\n  strokeColor: string;\n  /**\n   * stroke style of square annotation\n   */\n  strokeStyle: PdfAnnotationBorderStyle;\n  /**\n   * stroke dash array of square annotation\n   */\n  strokeDashArray?: number[];\n  /**\n   * cloudy border intensity of circle annotation\n   */\n  cloudyBorderIntensity?: number;\n  /**\n   * cloudy border inset of circle annotation\n   */\n  cloudyBorderInset?: number[];\n}\n\n/**\n * Pdf squiggly annotation\n *\n * @public\n */\nexport interface PdfSquigglyAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.SQUIGGLY;\n  /**\n   * Text contents of the highlight annotation\n   */\n  contents?: string;\n  /**\n   * color of strike out annotation\n   */\n  color: string;\n\n  /**\n   * opacity of strike out annotation\n   */\n  opacity: number;\n  /**\n   * quads of highlight area\n   */\n  segmentRects: Rect[];\n}\n\n/**\n * Pdf underline annotation\n *\n * @public\n */\nexport interface PdfUnderlineAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.UNDERLINE;\n  /**\n   * Text contents of the highlight annotation\n   */\n  contents?: string;\n  /**\n   * color of strike out annotation\n   */\n  color: string;\n\n  /**\n   * opacity of strike out annotation\n   */\n  opacity: number;\n  /**\n   * quads of highlight area\n   */\n  segmentRects: Rect[];\n}\n\n/**\n * Pdf strike out annotation\n *\n * @public\n */\nexport interface PdfStrikeOutAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.STRIKEOUT;\n  /**\n   * Text contents of the strike out annotation\n   */\n  contents?: string;\n\n  /**\n   * color of strike out annotation\n   */\n  color: string;\n\n  /**\n   * opacity of strike out annotation\n   */\n  opacity: number;\n\n  /**\n   * quads of highlight area\n   */\n  segmentRects: Rect[];\n}\n\n/**\n * Pdf caret annotation\n *\n * @public\n */\nexport interface PdfCaretAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.CARET;\n}\n\n/**\n * Pdf free text annotation\n *\n * @public\n */\nexport interface PdfFreeTextAnnoObject extends PdfAnnotationObjectBase {\n  /** {@inheritDoc PdfAnnotationObjectBase.type} */\n  type: PdfAnnotationSubtype.FREETEXT;\n  contents: string;\n  richContent?: string;\n}\n\n/**\n * All annotation that support\n *\n * @public\n */\nexport type PdfSupportedAnnoObject =\n  | PdfInkAnnoObject\n  | PdfTextAnnoObject\n  | PdfLinkAnnoObject\n  | PdfPolygonAnnoObject\n  | PdfPolylineAnnoObject\n  | PdfHighlightAnnoObject\n  | PdfLineAnnoObject\n  | PdfWidgetAnnoObject\n  | PdfFileAttachmentAnnoObject\n  | PdfStampAnnoObject\n  | PdfSquareAnnoObject\n  | PdfCircleAnnoObject\n  | PdfSquigglyAnnoObject\n  | PdfUnderlineAnnoObject\n  | PdfStrikeOutAnnoObject\n  | PdfCaretAnnoObject\n  | PdfFreeTextAnnoObject;\n\n/**\n * Pdf annotation that does not support\n *\n * @public\n */\nexport interface PdfUnsupportedAnnoObject extends PdfAnnotationObjectBase {\n  type: Exclude<PdfAnnotationSubtype, PdfSupportedAnnoObject['type']>;\n}\n\n/**\n * all annotations\n *\n * @public\n */\nexport type PdfAnnotationObject = PdfSupportedAnnoObject | PdfUnsupportedAnnoObject;\n\n/**\n * Pdf attachment\n *\n * @public\n */\nexport interface PdfAttachmentObject {\n  index: number;\n  name: string;\n  creationDate: string;\n  checksum: string;\n}\n\n/**\n * Pdf engine features\n *\n * @public\n */\nexport enum PdfEngineFeature {\n  RenderPage,\n  RenderPageRect,\n  Thumbnails,\n  Bookmarks,\n  Annotations,\n}\n\n/**\n * All operations for this engine\n *\n * @public\n */\nexport enum PdfEngineOperation {\n  Create,\n  Read,\n  Update,\n  Delete,\n}\n\n/**\n * flags to match the text during searching\n *\n * @public\n */\nexport enum MatchFlag {\n  None = 0,\n  MatchCase = 1,\n  MatchWholeWord = 2,\n  MatchConsecutive = 4,\n}\n\n/**\n * Union all the flags\n * @param flags - all the flags\n * @returns union of flags\n *\n * @public\n */\nexport function unionFlags(flags: MatchFlag[]) {\n  return flags.reduce((flag, currFlag) => {\n    return flag | currFlag;\n  }, MatchFlag.None);\n}\n\n/**\n * Image conversion types\n *\n * @public\n */\nexport type ImageConversionTypes = 'image/webp' | 'image/png' | 'image/jpeg';\n\n/**\n * Targe for searching\n *\n * @public\n */\nexport interface SearchTarget {\n  keyword: string;\n  flags: MatchFlag[];\n}\n\n/**\n * compare 2 search target\n * @param targetA - first target for search\n * @param targetB - second target for search\n * @returns whether 2 search target are the same\n *\n * @public\n */\nexport function compareSearchTarget(targetA: SearchTarget, targetB: SearchTarget) {\n  const flagA = unionFlags(targetA.flags);\n  const flagB = unionFlags(targetB.flags);\n\n  return flagA === flagB && targetA.keyword === targetB.keyword;\n}\n\n/** Context of one hit */\nexport interface TextContext {\n  /** Complete words that come *before* the hit (no ellipsis)            */\n  before: string;\n  /** Exactly the text that matched (case-preserved)                      */\n  match: string;\n  /** Complete words that come *after* the hit (no ellipsis)             */\n  after: string;\n  /** `true` ⇢ there were more words on the left that we cut off         */\n  truncatedLeft: boolean;\n  /** `true` ⇢ there were more words on the right that we cut off        */\n  truncatedRight: boolean;\n}\n\n/**\n * Text slice\n *\n * @public\n */\nexport interface PageTextSlice {\n  /**\n   * Index of the pdf page\n   */\n  pageIndex: number;\n  /**\n   * Index of the first character\n   */\n  charIndex: number;\n  /**\n   * Count of the characters\n   */\n  charCount: number;\n}\n\n/**\n * search result\n *\n * @public\n */\nexport interface SearchResult {\n  /**\n   * Index of the pdf page\n   */\n  pageIndex: number;\n  /**\n   * index of the first character\n   */\n  charIndex: number;\n  /**\n   * count of the characters\n   */\n  charCount: number;\n  /**\n   * highlight rects\n   */\n  rects: Rect[];\n  /**\n   * context of the hit\n   */\n  context: TextContext;\n}\n\n/**\n * Results of searching through the entire document\n */\nexport interface SearchAllPagesResult {\n  /**\n   * Array of all search results across all pages\n   */\n  results: SearchResult[];\n\n  /**\n   * Total number of results found\n   */\n  total: number;\n}\n\n/**\n * Glyph object\n *\n * @public\n */\nexport interface PdfGlyphObject {\n  /**\n   * Origin of the glyph\n   */\n  origin: { x: number; y: number };\n  /**\n   * Size of the glyph\n   */\n  size: { width: number; height: number };\n  /**\n   * Whether the glyph is a space\n   */\n  isSpace?: boolean;\n  /**\n   * Whether the glyph is a empty\n   */\n  isEmpty?: boolean;\n}\n\n/**\n * Glyph object\n *\n * @public\n */\nexport interface PdfGlyphSlim {\n  /**\n   * X coordinate of the glyph\n   */\n  x: number;\n  /**\n   * Y coordinate of the glyph\n   */\n  y: number;\n  /**\n   * Width of the glyph\n   */\n  width: number;\n  /**\n   * Height of the glyph\n   */\n  height: number;\n  /**\n   * Flags of the glyph\n   */\n  flags: number;\n}\n\n/**\n * Run object\n *\n * @public\n */\nexport interface PdfRun {\n  /**\n   * Rectangle of the run\n   */\n  rect: { x: number; y: number; width: number; height: number };\n  /**\n   * Start index of the run\n   */\n  charStart: number;\n  /**\n   * Glyphs of the run\n   */\n  glyphs: PdfGlyphSlim[];\n}\n\n/**\n * Page geometry\n *\n * @public\n */\nexport interface PdfPageGeometry {\n  /**\n   * Runs of the page\n   */\n  runs: PdfRun[];\n}\n\n/**\n * form field value\n * @public\n */\nexport type FormFieldValue =\n  | { kind: 'text'; text: string }\n  | { kind: 'selection'; index: number; isSelected: boolean }\n  | { kind: 'checked'; isChecked: boolean };\n\n/**\n * Transformation that will be applied to annotation\n *\n * @public\n */\nexport interface PdfAnnotationTransformation {\n  /**\n   * Translated offset\n   */\n  offset: Position;\n  /**\n   * Scaled factors\n   */\n  scale: Size;\n}\n\n/**\n * Render options\n *\n * @public\n */\nexport interface PdfRenderOptions {\n  /**\n   * Whether needs to render the page with annotations\n   */\n  withAnnotations: boolean;\n}\n\n/**\n * source can be byte array contains pdf content\n *\n * @public\n */\nexport type PdfFileContent = ArrayBuffer;\n\nexport enum PdfPermission {\n  PrintDocument = 2 ** 3,\n  ModifyContent = 2 ** 4,\n  CopyOrExtract = 2 ** 5,\n  AddOrModifyTextAnnot = 2 ** 6,\n  FillInExistingForm = 2 ** 9,\n  ExtractTextOrGraphics = 2 ** 10,\n  AssembleDocument = 2 ** 11,\n  PrintHighQuality = 2 ** 12,\n}\n\nexport enum PdfPageFlattenFlag {\n  Display = 0,\n  Print = 1,\n}\n\nexport enum PdfPageFlattenResult {\n  Fail = 0,\n  Success = 1,\n  NothingToDo = 2,\n}\n\n/**\n * Pdf File without content\n *\n * @public\n */\nexport interface PdfFileWithoutContent {\n  /**\n   * id of file\n   */\n  id: string;\n}\n\nexport interface PdfFileLoader extends PdfFileWithoutContent {\n  /**\n   * length of file\n   */\n  fileLength: number;\n  /**\n   * read block of file\n   * @param offset - offset of file\n   * @param length - length of file\n   * @returns block of file\n   */\n  callback: (offset: number, length: number) => Uint8Array;\n}\n\n/**\n * Pdf File\n *\n * @public\n */\nexport interface PdfFile extends PdfFileWithoutContent {\n  /**\n   * content of file\n   */\n  content: PdfFileContent;\n}\n\nexport interface PdfFileUrl extends PdfFileWithoutContent {\n  url: string;\n}\n\nexport interface PdfUrlOptions {\n  mode?: 'auto' | 'range-request' | 'full-fetch';\n  password?: string;\n}\n\nexport enum PdfErrorCode {\n  Ok, //  #define FPDF_ERR_SUCCESS 0    // No error.\n  Unknown, // #define FPDF_ERR_UNKNOWN 1    // Unknown error.\n  NotFound, // #define FPDF_ERR_FILE 2       // File not found or could not be opened.\n  WrongFormat, // #define FPDF_ERR_FORMAT 3     // File not in PDF format or corrupted.\n  Password, // #define FPDF_ERR_PASSWORD 4   // Password required or incorrect password.\n  Security, // #define FPDF_ERR_SECURITY 5   // Unsupported security scheme.\n  PageError, // #define FPDF_ERR_PAGE 6       // Page not found or content error.\n  XFALoad, // #ifdef PDF_ENABLE_XFA\n  XFALayout, //\n  Cancelled,\n  Initialization,\n  NotReady,\n  NotSupport,\n  LoadDoc,\n  DocNotOpen,\n  CantCloseDoc,\n  CantCreateNewDoc,\n  CantImportPages,\n  CantCreateAnnot,\n  CantSetAnnotRect,\n  CantSetAnnotContent,\n  CantRemoveInkList,\n  CantAddInkStoke,\n  CantReadAttachmentSize,\n  CantReadAttachmentContent,\n  CantFocusAnnot,\n  CantSelectText,\n  CantSelectOption,\n  CantCheckField,\n}\n\nexport interface PdfErrorReason {\n  code: PdfErrorCode;\n  message: string;\n}\n\nexport type PdfEngineError = TaskError<PdfErrorReason>;\n\nexport type PdfTask<R> = Task<R, PdfErrorReason>;\n\nexport class PdfTaskHelper {\n  /**\n   * Create a task\n   * @returns new task\n   */\n  static create<R>(): Task<R, PdfErrorReason> {\n    return new Task<R, PdfErrorReason>();\n  }\n\n  /**\n   * Create a task that has been resolved with value\n   * @param result - resolved value\n   * @returns resolved task\n   */\n  static resolve<R>(result: R): Task<R, PdfErrorReason> {\n    const task = new Task<R, PdfErrorReason>();\n    task.resolve(result);\n\n    return task;\n  }\n\n  /**\n   * Create a task that has been rejected with error\n   * @param reason - rejected error\n   * @returns rejected task\n   */\n  static reject<T = any>(reason: PdfErrorReason): Task<T, PdfErrorReason> {\n    const task = new Task<T, PdfErrorReason>();\n    task.reject(reason);\n\n    return task;\n  }\n\n  /**\n   * Create a task that has been aborted with error\n   * @param reason - aborted error\n   * @returns aborted task\n   */\n  static abort<T = any>(reason: PdfErrorReason): Task<T, PdfErrorReason> {\n    const task = new Task<T, PdfErrorReason>();\n    task.reject(reason);\n\n    return task;\n  }\n}\n\n/**\n * Pdf engine\n *\n * @public\n */\nexport interface PdfEngine<T = Blob> {\n  /**\n   * Check whether pdf engine supports this feature\n   * @param feature - which feature want to check\n   * @returns support or not\n   */\n  isSupport?: (feature: PdfEngineFeature) => PdfTask<PdfEngineOperation[]>;\n  /**\n   * Initialize the engine\n   * @returns task that indicate whether initialization is successful\n   */\n  initialize?: () => PdfTask<boolean>;\n  /**\n   * Destroy the engine\n   * @returns task that indicate whether destroy is successful\n   */\n  destroy?: () => PdfTask<boolean>;\n  /**\n   * Open a PDF from a URL with specified mode\n   * @param url - The PDF file URL\n   * @param options - Additional options including mode (auto, range-request, full-fetch) and password\n   * @returns Task that resolves with the PdfDocumentObject or an error\n   */\n  openDocumentUrl: (file: PdfFileUrl, options?: PdfUrlOptions) => PdfTask<PdfDocumentObject>;\n  /**\n   * Open pdf document from buffer\n   * @param file - pdf file\n   * @param password - protected password for this file\n   * @returns task that contains the file or error\n   */\n  openDocumentFromBuffer: (file: PdfFile, password: string) => PdfTask<PdfDocumentObject>;\n  /**\n   * Open pdf document from loader\n   * @param file - pdf file\n   * @param password - protected password for this file\n   * @returns task that contains the file or error\n   */\n  openDocumentFromLoader: (file: PdfFileLoader, password: string) => PdfTask<PdfDocumentObject>;\n  /**\n   * Get the metadata of the file\n   * @param doc - pdf document\n   * @returns task that contains the metadata or error\n   */\n  getMetadata: (doc: PdfDocumentObject) => PdfTask<PdfMetadataObject>;\n  /**\n   * Get permissions of the file\n   * @param doc - pdf document\n   * @returns task that contains a 32-bit integer indicating permission flags\n   */\n  getDocPermissions: (doc: PdfDocumentObject) => PdfTask<number>;\n  /**\n   * Get the user permissions of the file\n   * @param doc - pdf document\n   * @returns task that contains a 32-bit integer indicating permission flags\n   */\n  getDocUserPermissions: (doc: PdfDocumentObject) => PdfTask<number>;\n  /**\n   * Get the signatures of the file\n   * @param doc - pdf document\n   * @returns task that contains the signatures or error\n   */\n  getSignatures: (doc: PdfDocumentObject) => PdfTask<PdfSignatureObject[]>;\n  /**\n   * Get the bookmarks of the file\n   * @param doc - pdf document\n   * @returns task that contains the bookmarks or error\n   */\n  getBookmarks: (doc: PdfDocumentObject) => PdfTask<PdfBookmarksObject>;\n  /**\n   * Render the specified pdf page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param scaleFactor - factor of scaling\n   * @param rotation - rotated angle\n   * @param dpr - devicePixelRatio\n   * @param options - render options\n   * @returns task contains the rendered image or error\n   */\n  renderPage: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    scaleFactor: number,\n    rotation: Rotation,\n    dpr: number,\n    options: PdfRenderOptions,\n    imageType?: ImageConversionTypes,\n  ) => PdfTask<T>;\n  /**\n   * Render the specified rect of pdf page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param scaleFactor - factor of scaling\n   * @param rotation - rotated angle\n   * @param dpr - devicePixelRatio\n   * @param rect - target rect\n   * @param options - render options\n   * @returns task contains the rendered image or error\n   */\n  renderPageRect: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    scaleFactor: number,\n    rotation: Rotation,\n    dpr: number,\n    rect: Rect,\n    options: PdfRenderOptions,\n    imageType?: ImageConversionTypes,\n  ) => PdfTask<T>;\n  /**\n   * Render a single annotation into an ImageData blob.\n   *\n   * Note:  • honours Display-Matrix, page rotation & DPR\n   *        • you decide whether to include the page background\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param annotation - the annotation to render\n   * @param scaleFactor - factor of scaling\n   * @param rotation - rotated angle\n   * @param dpr - devicePixelRatio\n   * @param mode - appearance mode\n   */\n  renderAnnotation(\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    annotation: PdfAnnotationObject,\n    scaleFactor: number,\n    rotation: Rotation,\n    dpr: number,\n    mode: AppearanceMode,\n    imageType: ImageConversionTypes,\n  ): PdfTask<T>;\n  /**\n   * Get annotations of pdf page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param scaleFactor - factor of scaling\n   * @param rotation - rotated angle\n   * @returns task contains the annotations or error\n   */\n  getPageAnnotations: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n  ) => PdfTask<PdfAnnotationObject[]>;\n\n  /**\n   * Change the visible colour (and opacity) of an existing annotation.\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param annotation - the annotation to recolour\n   * @param colour - RGBA color values (0-255 per channel)\n   * @param which - 0 = stroke/fill colour (PDFium's \"colourType\" param)\n   * @returns task that indicates whether the operation succeeded\n   */\n  updateAnnotationColor: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    annotation: PdfAnnotationObjectBase,\n    color: WebAlphaColor,\n    which?: number,\n  ) => PdfTask<boolean>;\n\n  /**\n   * Create a annotation on specified page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param annotation - new annotations\n   * @returns task whether the annotations is created successfully\n   */\n  createPageAnnotation: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    annotation: PdfAnnotationObject,\n  ) => PdfTask<number>;\n  /**\n   * Update a annotation on specified page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param annotation - new annotations\n   * @returns task that indicates whether the operation succeeded\n   */\n  updatePageAnnotation: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    annotation: PdfAnnotationObject,\n  ) => PdfTask<boolean>;\n  /**\n   * Remove a annotation on specified page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param annotation - new annotations\n   * @returns task whether the annotations is removed successfully\n   */\n  removePageAnnotation: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    annotation: PdfAnnotationObject,\n  ) => PdfTask<boolean>;\n  /**\n   * get all text rects in pdf page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param scaleFactor - factor of scaling\n   * @param rotation - rotated angle\n   * @returns task contains the text rects or error\n   */\n  getPageTextRects: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    scaleFactor: number,\n    rotation: Rotation,\n  ) => PdfTask<PdfTextRectObject[]>;\n  /**\n   * Render the thumbnail of specified pdf page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param scaleFactor - factor of scaling\n   * @param rotation - rotated angle\n   * @param dpr - devicePixelRatio\n   * @param options - render options\n   * @returns task contains the rendered image or error\n   */\n  renderThumbnail: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    scaleFactor: number,\n    rotation: Rotation,\n    dpr: number,\n  ) => PdfTask<T>;\n  /**\n   * Search across all pages in the document\n   * @param doc - pdf document\n   * @param keyword - search keyword\n   * @param flags - match flags for search\n   * @returns Task contains all search results throughout the document\n   */\n  searchAllPages: (\n    doc: PdfDocumentObject,\n    keyword: string,\n    flags?: MatchFlag[],\n  ) => PdfTask<SearchAllPagesResult>;\n  /**\n   * Get all annotations in this file\n   * @param doc - pdf document\n   * @returns task that contains the annotations or error\n   */\n  getAllAnnotations: (doc: PdfDocumentObject) => PdfTask<Record<number, PdfAnnotationObject[]>>;\n  /**\n   * Get all attachments in this file\n   * @param doc - pdf document\n   * @returns task that contains the attachments or error\n   */\n  getAttachments: (doc: PdfDocumentObject) => PdfTask<PdfAttachmentObject[]>;\n  /**\n   * Read content of pdf attachment\n   * @param doc - pdf document\n   * @param attachment - pdf attachments\n   * @returns task that contains the content of specified attachment or error\n   */\n  readAttachmentContent: (\n    doc: PdfDocumentObject,\n    attachment: PdfAttachmentObject,\n  ) => PdfTask<ArrayBuffer>;\n  /**\n   * Set form field value\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param annotation - pdf annotation\n   * @param text - text value\n   */\n  setFormFieldValue: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    annotation: PdfWidgetAnnoObject,\n    value: FormFieldValue,\n  ) => PdfTask<boolean>;\n  /**\n   * Flatten annotations and form fields into the page contents.\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @param flag - flatten flag\n   */\n  flattenPage: (\n    doc: PdfDocumentObject,\n    page: PdfPageObject,\n    flag: PdfPageFlattenFlag,\n  ) => PdfTask<PdfPageFlattenResult>;\n  /**\n   * Extract pdf pages to a new file\n   * @param doc - pdf document\n   * @param pageIndexes - indexes of pdf pages\n   * @returns task contains the new pdf file content\n   */\n  extractPages: (doc: PdfDocumentObject, pageIndexes: number[]) => PdfTask<ArrayBuffer>;\n  /**\n   * Extract text on specified pdf pages\n   * @param doc - pdf document\n   * @param pageIndexes - indexes of pdf pages\n   * @returns task contains the text\n   */\n  extractText: (doc: PdfDocumentObject, pageIndexes: number[]) => PdfTask<string>;\n  /**\n   * Extract text on specified pdf pages\n   * @param doc - pdf document\n   * @param pageIndexes - indexes of pdf pages\n   * @returns task contains the text\n   */\n  getTextSlices: (doc: PdfDocumentObject, slices: PageTextSlice[]) => PdfTask<string[]>;\n  /**\n   * Get all glyphs in the specified pdf page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @returns task contains the glyphs\n   */\n  getPageGlyphs: (doc: PdfDocumentObject, page: PdfPageObject) => PdfTask<PdfGlyphObject[]>;\n  /**\n   * Get the geometry of the specified pdf page\n   * @param doc - pdf document\n   * @param page - pdf page\n   * @returns task contains the geometry\n   */\n  getPageGeometry: (doc: PdfDocumentObject, page: PdfPageObject) => PdfTask<PdfPageGeometry>;\n  /**\n   * Merge multiple pdf documents\n   * @param files - all the pdf files\n   * @returns task contains the merged pdf file\n   */\n  merge: (files: PdfFile[]) => PdfTask<PdfFile>;\n  /**\n   * Merge specific pages from multiple PDF documents in a custom order\n   * @param mergeConfigs Array of configurations specifying which pages to merge from which documents\n   * @returns A PdfTask that resolves with the merged PDF file\n   * @public\n   */\n  mergePages: (mergeConfigs: Array<{ docId: string; pageIndices: number[] }>) => PdfTask<PdfFile>;\n  /**\n   * Save a copy of pdf document\n   * @param doc - pdf document\n   * @returns task contains the new pdf file content\n   */\n  saveAsCopy: (doc: PdfDocumentObject) => PdfTask<ArrayBuffer>;\n  /**\n   * Close pdf document\n   * @param doc - pdf document\n   * @returns task that file is closed or not\n   */\n  closeDocument: (doc: PdfDocumentObject) => PdfTask<boolean>;\n}\n\n/**\n * Method name of PdfEngine interface\n *\n * @public\n */\nexport type PdfEngineMethodName = keyof Required<PdfEngine>;\n\n/**\n * Arguments of PdfEngine method\n *\n * @public\n */\nexport type PdfEngineMethodArgs<P extends PdfEngineMethodName> = Readonly<\n  Parameters<Required<PdfEngine>[P]>\n>;\n\n/**\n * Return type of PdfEngine method\n *\n * @public\n */\nexport type PdfEngineMethodReturnType<P extends PdfEngineMethodName> = ReturnType<\n  Required<PdfEngine>[P]\n>;\n","import { PdfAlphaColor } from './pdf';\n\nexport interface WebAlphaColor {\n  color: string;\n  opacity: number;\n}\n\n/**\n * Convert a {@link PdfAlphaColor} to a CSS-style colour definition.\n *\n * @param c - the colour coming from PDFium (0-255 per channel)\n * @returns\n *   hex   – #RRGGBB (no alpha channel)\n *   opacity – 0-1 float suitable for CSS `opacity`/`rgba()`\n */\nexport function pdfAlphaColorToWebAlphaColor(c: PdfAlphaColor): WebAlphaColor {\n  const clamp = (n: number) => Math.max(0, Math.min(255, n));\n  const toHex = (n: number) => clamp(n).toString(16).padStart(2, '0');\n\n  const color = `#${toHex(c.red)}${toHex(c.green)}${toHex(c.blue)}` as const;\n  const opacity = clamp(c.alpha) / 255;\n\n  return { color, opacity };\n}\n\n/**\n * Convert a CSS hex colour + opacity back into {@link PdfAlphaColor}\n *\n * @param hex      - #RGB, #RRGGBB, or #rrggbb\n * @param opacity  - 0-1 float (values outside clamp automatically)\n */\nexport function webAlphaColorToPdfAlphaColor({ color, opacity }: WebAlphaColor): PdfAlphaColor {\n  // Normalise: #abc → #aabbcc\n  if (/^#?[0-9a-f]{3}$/i.test(color)) {\n    color = color.replace(/^#?([0-9a-f])([0-9a-f])([0-9a-f])$/i, '#$1$1$2$2$3$3').toLowerCase();\n  }\n\n  const [, r, g, b] =\n    /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(color) ??\n    (() => {\n      throw new Error(`Invalid hex colour: “${color}”`);\n    })();\n\n  const clamp = (n: number, hi = 255) => Math.max(0, Math.min(hi, n));\n\n  return {\n    red: parseInt(r, 16),\n    green: parseInt(g, 16),\n    blue: parseInt(b, 16),\n    alpha: clamp(Math.round(opacity * 255)),\n  };\n}\n","/**\n * Parse a PDF date string **D:YYYYMMDDHHmmSSOHH'mm'** to ISO-8601.\n *\n * Returns `undefined` if the input is malformed.\n *\n * @public\n */\nexport function pdfDateToDate(pdf?: string): Date | undefined {\n  if (!pdf?.startsWith('D:') || pdf.length < 16) return;\n\n  const y = +pdf.slice(2, 6);\n  const mo = +pdf.slice(6, 8) - 1; // JS months: 0-based\n  const d = +pdf.slice(8, 10);\n  const H = +pdf.slice(10, 12);\n  const M = +pdf.slice(12, 14);\n  const S = +pdf.slice(14, 16);\n\n  return new Date(Date.UTC(y, mo, d, H, M, S));\n}\n\n/**\n * Convert a date to a PDF date string\n * @param date - date to convert\n * @returns PDF date string\n *\n * @public\n */\nexport function dateToPdfDate(date: Date = new Date()): string {\n  const z = (n: number, len = 2) => n.toString().padStart(len, '0');\n\n  const YYYY = date.getUTCFullYear();\n  const MM = z(date.getUTCMonth() + 1);\n  const DD = z(date.getUTCDate());\n  const HH = z(date.getUTCHours());\n  const mm = z(date.getUTCMinutes());\n  const SS = z(date.getUTCSeconds());\n\n  return `D:${YYYY}${MM}${DD}${HH}${mm}${SS}`;\n}\n","/**\n * Library contains the common definitions of data types and logic\n *\n * @remarks\n * The `@embedpdf/models` defines the interface and classes which are used to\n * handling PDF files.\n *\n * @packageDocumentation\n */\nexport * from './geometry';\nexport * from './logger';\nexport * from './pdf';\nexport * from './task';\nexport * from './color';\nexport * from './date';\n\n/**\n * ignore will do nothing when called.\n *\n * @public\n */\nexport function ignore() {}\n"],"mappings":"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","names":["Rotation","LogLevel","TaskStage","PdfZoomMode","PdfBlendMode","PdfActionType","PdfAnnotationSubtype","PdfAnnotationObjectStatus","AppearanceMode","PdfAnnotationState","PdfAnnotationStateModel","PDF_FORM_FIELD_TYPE","PdfAnnotationColorType","PdfAnnotationBorderStyle","PdfAnnotationFlags","PDF_FORM_FIELD_FLAG","PdfPageObjectType","PdfSegmentObjectType","PdfEngineFeature","PdfEngineOperation","MatchFlag","PdfPermission","PdfPageFlattenFlag","PdfPageFlattenResult","PdfErrorCode"]}
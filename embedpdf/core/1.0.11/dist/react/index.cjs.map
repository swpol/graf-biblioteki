{"version":3,"file":"index.cjs","sources":["../../src/react/context.ts","../../src/react/components/embed-pdf.tsx","../../src/react/hooks/use-registry.ts","../../src/react/hooks/use-plugin.ts","../../src/react/hooks/use-capability.ts","../../src/react/hooks/use-store-state.ts","../../src/react/hooks/use-core-state.ts"],"sourcesContent":["import { createContext } from 'react';\nimport type { PluginRegistry } from '@embedpdf/core';\n\nexport interface PDFContextState {\n  registry: PluginRegistry | null;\n  isInitializing: boolean;\n  pluginsReady: boolean;\n}\n\nexport const PDFContext = createContext<PDFContextState>({\n  registry: null,\n  isInitializing: true,\n  pluginsReady: false,\n});\n","import React, { useState, useEffect, useRef } from 'react';\nimport { PdfEngine } from '@embedpdf/models';\nimport { PluginRegistry } from '@embedpdf/core';\nimport type { IPlugin, PluginBatchRegistration } from '@embedpdf/core';\n\nimport { PDFContext, PDFContextState } from '../context';\n\ninterface EmbedPDFProps {\n  engine: PdfEngine;\n  onInitialized?: (registry: PluginRegistry) => Promise<void>;\n  plugins: PluginBatchRegistration<IPlugin<any>, any>[];\n  children: React.ReactNode | ((state: PDFContextState) => React.ReactNode);\n}\n\nexport function EmbedPDF({ engine, onInitialized, plugins, children }: EmbedPDFProps) {\n  const [registry, setRegistry] = useState<PluginRegistry | null>(null);\n  const [isInitializing, setIsInitializing] = useState<boolean>(true);\n  const [pluginsReady, setPluginsReady] = useState<boolean>(false);\n  const initRef = useRef<EmbedPDFProps['onInitialized']>(onInitialized);\n\n  useEffect(() => {\n    initRef.current = onInitialized; // update without triggering re-runs\n  }, [onInitialized]);\n\n  useEffect(() => {\n    const pdfViewer = new PluginRegistry(engine);\n    pdfViewer.registerPluginBatch(plugins);\n\n    const initialize = async () => {\n      await pdfViewer.initialize();\n      // if the registry is destroyed, don't do anything\n      if (pdfViewer.isDestroyed()) {\n        return;\n      }\n\n      /* always call the *latest* callback */\n      await initRef.current?.(pdfViewer);\n\n      // if the registry is destroyed, don't do anything\n      if (pdfViewer.isDestroyed()) {\n        return;\n      }\n\n      pdfViewer.pluginsReady().then(() => {\n        if (!pdfViewer.isDestroyed()) {\n          setPluginsReady(true);\n        }\n      });\n\n      // Provide the registry to children via context\n      setRegistry(pdfViewer);\n      setIsInitializing(false);\n    };\n\n    initialize().catch(console.error);\n\n    return () => {\n      pdfViewer.destroy();\n      setRegistry(null);\n      setIsInitializing(true);\n      setPluginsReady(false);\n    };\n  }, [engine, plugins]);\n\n  return (\n    <PDFContext.Provider value={{ registry, isInitializing, pluginsReady }}>\n      {typeof children === 'function'\n        ? children({ registry, isInitializing, pluginsReady })\n        : children}\n    </PDFContext.Provider>\n  );\n}\n","import { useContext } from 'react';\nimport { PDFContext, PDFContextState } from '../context';\n\n/**\n * Hook to access the PDF registry.\n * @returns The PDF registry or null during initialization\n */\nexport function useRegistry(): PDFContextState {\n  const contextValue = useContext(PDFContext);\n\n  // Error if used outside of context\n  if (contextValue === undefined) {\n    throw new Error('useCapability must be used within a PDFContext.Provider');\n  }\n\n  const { registry, isInitializing } = contextValue;\n\n  // During initialization, return null instead of throwing an error\n  if (isInitializing) {\n    return contextValue;\n  }\n\n  // At this point, initialization is complete but registry is still null, which is unexpected\n  if (registry === null) {\n    throw new Error('PDF registry failed to initialize properly');\n  }\n\n  return contextValue;\n}\n","import type { BasePlugin } from '@embedpdf/core';\nimport { useRegistry } from './use-registry';\n\ntype PluginState<T extends BasePlugin> = {\n  plugin: T | null;\n  isLoading: boolean;\n  ready: Promise<void>;\n};\n\n/**\n * Hook to access a plugin.\n * @param pluginId The ID of the plugin to access\n * @returns The plugin or null during initialization\n * @example\n * // Get zoom plugin\n * const zoom = usePlugin<ZoomPlugin>(ZoomPlugin.id);\n */\nexport function usePlugin<T extends BasePlugin>(pluginId: T['id']): PluginState<T> {\n  const { registry } = useRegistry();\n\n  if (registry === null) {\n    return {\n      plugin: null,\n      isLoading: true,\n      ready: new Promise(() => {}),\n    };\n  }\n\n  const plugin = registry.getPlugin<T>(pluginId);\n\n  if (!plugin) {\n    throw new Error(`Plugin ${pluginId} not found`);\n  }\n\n  return {\n    plugin,\n    isLoading: false,\n    ready: plugin.ready(),\n  };\n}\n","import type { BasePlugin } from '@embedpdf/core';\nimport { usePlugin } from './use-plugin';\n\ntype CapabilityState<T extends BasePlugin> = {\n  provides: ReturnType<NonNullable<T['provides']>> | null;\n  isLoading: boolean;\n  ready: Promise<void>;\n};\n\n/**\n * Hook to access a plugin's capability.\n * @param pluginId The ID of the plugin to access\n * @returns The capability provided by the plugin or null during initialization\n * @example\n * // Get zoom capability\n * const zoom = useCapability<ZoomPlugin>(ZoomPlugin.id);\n */\nexport function useCapability<T extends BasePlugin>(pluginId: T['id']): CapabilityState<T> {\n  const { plugin, isLoading, ready } = usePlugin<T>(pluginId);\n\n  if (!plugin) {\n    return {\n      provides: null,\n      isLoading,\n      ready,\n    };\n  }\n\n  if (!plugin.provides) {\n    throw new Error(`Plugin ${pluginId} does not provide a capability`);\n  }\n\n  return {\n    provides: plugin.provides() as ReturnType<NonNullable<T['provides']>>,\n    isLoading,\n    ready,\n  };\n}\n","import { useState, useEffect } from 'react';\nimport { CoreState, StoreState } from '@embedpdf/core';\nimport { useRegistry } from './use-registry';\n\n/**\n * Hook that provides access to the current global store state\n * and re-renders the component when the state changes\n */\nexport function useStoreState<T = CoreState>(): StoreState<T> | null {\n  const { registry } = useRegistry();\n  const [state, setState] = useState<StoreState<T> | null>(null);\n\n  useEffect(() => {\n    if (!registry) return;\n\n    // Get initial state\n    setState(registry.getStore().getState() as StoreState<T>);\n\n    // Subscribe to store changes\n    const unsubscribe = registry.getStore().subscribe((_action, newState) => {\n      setState(newState as StoreState<T>);\n    });\n\n    return () => unsubscribe();\n  }, [registry]);\n\n  return state;\n}\n","import { useState, useEffect } from 'react';\nimport { CoreState, arePropsEqual } from '@embedpdf/core';\nimport { useRegistry } from './use-registry';\n\n/**\n * Hook that provides access to the current core state\n * and re-renders the component only when the core state changes\n */\nexport function useCoreState(): CoreState | null {\n  const { registry } = useRegistry();\n  const [coreState, setCoreState] = useState<CoreState | null>(null);\n\n  useEffect(() => {\n    if (!registry) return;\n\n    const store = registry.getStore();\n\n    // Get initial core state\n    setCoreState(store.getState().core);\n\n    // Create a single subscription that handles all core actions\n    const unsubscribe = store.subscribe((action, newState, oldState) => {\n      // Only update if it's a core action and the core state changed\n      if (store.isCoreAction(action) && !arePropsEqual(newState.core, oldState.core)) {\n        setCoreState(newState.core);\n      }\n    });\n\n    return () => unsubscribe();\n  }, [registry]);\n\n  return coreState;\n}\n"],"names":["PDFContext","createContext","EmbedPDF","engine","onInitialized","plugins","children","registry","setRegistry","useState","isInitializing","setIsInitializing","pluginsReady","setPluginsReady","initRef","useRef","useEffect","pdfViewer","PluginRegistry","_a","jsx","useRegistry","contextValue","useContext","usePlugin","pluginId","plugin","useCapability","isLoading","ready","useStoreState","state","setState","unsubscribe","_action","newState","useCoreState","coreState","setCoreState","store","action","oldState","arePropsEqual"],"mappings":"oKASaA,EAAaC,EAAAA,cAA+B,CACvD,SAAU,KACV,eAAgB,GAChB,aAAc,EAChB,CAAC,ECCM,SAASC,EAAS,CAAE,OAAAC,EAAQ,cAAAC,EAAe,QAAAC,EAAS,SAAAC,GAA2B,CACpF,KAAM,CAACC,EAAUC,CAAW,EAAIC,EAAAA,SAAgC,IAAI,EAC9D,CAACC,EAAgBC,CAAiB,EAAIF,EAAAA,SAAkB,EAAI,EAC5D,CAACG,EAAcC,CAAe,EAAIJ,EAAAA,SAAkB,EAAK,EACzDK,EAAUC,SAAuCX,CAAa,EAEpEY,OAAAA,EAAAA,UAAU,IAAM,CACdF,EAAQ,QAAUV,CAAA,EACjB,CAACA,CAAa,CAAC,EAElBY,EAAAA,UAAU,IAAM,CACR,MAAAC,EAAY,IAAIC,EAAA,eAAef,CAAM,EAC3C,OAAAc,EAAU,oBAAoBZ,CAAO,GAElB,SAAY,OAC7B,MAAMY,EAAU,WAAW,EAEvB,CAAAA,EAAU,gBAKR,OAAAE,EAAAL,EAAQ,UAAR,YAAAK,EAAA,KAAAL,EAAkBG,IAGpB,CAAAA,EAAU,gBAIJA,EAAA,eAAe,KAAK,IAAM,CAC7BA,EAAU,eACbJ,EAAgB,EAAI,CACtB,CACD,EAGDL,EAAYS,CAAS,EACrBN,EAAkB,EAAK,GACzB,KAEa,MAAM,QAAQ,KAAK,EAEzB,IAAM,CACXM,EAAU,QAAQ,EAClBT,EAAY,IAAI,EAChBG,EAAkB,EAAI,EACtBE,EAAgB,EAAK,CACvB,CAAA,EACC,CAACV,EAAQE,CAAO,CAAC,EAGlBe,EAAA,IAACpB,EAAW,SAAX,CAAoB,MAAO,CAAE,SAAAO,EAAU,eAAAG,EAAgB,aAAAE,GACrD,gBAAON,GAAa,WACjBA,EAAS,CAAE,SAAAC,EAAU,eAAAG,EAAgB,aAAAE,CAAa,CAAC,EACnDN,EACN,CAEJ,CChEO,SAASe,GAA+B,CACvC,MAAAC,EAAeC,aAAWvB,CAAU,EAG1C,GAAIsB,IAAiB,OACb,MAAA,IAAI,MAAM,yDAAyD,EAGrE,KAAA,CAAE,SAAAf,EAAU,eAAAG,CAAA,EAAmBY,EAGrC,GAAIZ,EACK,OAAAY,EAIT,GAAIf,IAAa,KACT,MAAA,IAAI,MAAM,4CAA4C,EAGvD,OAAAe,CACT,CCXO,SAASE,EAAgCC,EAAmC,CAC3E,KAAA,CAAE,SAAAlB,CAAS,EAAIc,EAAY,EAEjC,GAAId,IAAa,KACR,MAAA,CACL,OAAQ,KACR,UAAW,GACX,MAAO,IAAI,QAAQ,IAAM,CAAE,CAAA,CAC7B,EAGI,MAAAmB,EAASnB,EAAS,UAAakB,CAAQ,EAE7C,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,UAAUD,CAAQ,YAAY,EAGzC,MAAA,CACL,OAAAC,EACA,UAAW,GACX,MAAOA,EAAO,MAAM,CACtB,CACF,CCtBO,SAASC,EAAoCF,EAAuC,CACzF,KAAM,CAAE,OAAAC,EAAQ,UAAAE,EAAW,MAAAC,CAAM,EAAIL,EAAaC,CAAQ,EAE1D,GAAI,CAACC,EACI,MAAA,CACL,SAAU,KACV,UAAAE,EACA,MAAAC,CACF,EAGE,GAAA,CAACH,EAAO,SACV,MAAM,IAAI,MAAM,UAAUD,CAAQ,gCAAgC,EAG7D,MAAA,CACL,SAAUC,EAAO,SAAS,EAC1B,UAAAE,EACA,MAAAC,CACF,CACF,CC7BO,SAASC,GAAqD,CAC7D,KAAA,CAAE,SAAAvB,CAAS,EAAIc,EAAY,EAC3B,CAACU,EAAOC,CAAQ,EAAIvB,EAAAA,SAA+B,IAAI,EAE7DO,OAAAA,EAAAA,UAAU,IAAM,CACd,GAAI,CAACT,EAAU,OAGfyB,EAASzB,EAAS,SAAW,EAAA,SAAA,CAA2B,EAGxD,MAAM0B,EAAc1B,EAAS,SAAA,EAAW,UAAU,CAAC2B,EAASC,IAAa,CACvEH,EAASG,CAAyB,CAAA,CACnC,EAED,MAAO,IAAMF,EAAY,CAAA,EACxB,CAAC1B,CAAQ,CAAC,EAENwB,CACT,CCnBO,SAASK,GAAiC,CACzC,KAAA,CAAE,SAAA7B,CAAS,EAAIc,EAAY,EAC3B,CAACgB,EAAWC,CAAY,EAAI7B,EAAAA,SAA2B,IAAI,EAEjEO,OAAAA,EAAAA,UAAU,IAAM,CACd,GAAI,CAACT,EAAU,OAET,MAAAgC,EAAQhC,EAAS,SAAS,EAGnB+B,EAAAC,EAAM,SAAS,EAAE,IAAI,EAGlC,MAAMN,EAAcM,EAAM,UAAU,CAACC,EAAQL,EAAUM,IAAa,CAE9DF,EAAM,aAAaC,CAAM,GAAK,CAACE,gBAAcP,EAAS,KAAMM,EAAS,IAAI,GAC3EH,EAAaH,EAAS,IAAI,CAC5B,CACD,EAED,MAAO,IAAMF,EAAY,CAAA,EACxB,CAAC1B,CAAQ,CAAC,EAEN8B,CACT"}
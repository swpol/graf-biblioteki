{"version":3,"file":"index.js","sources":["../../src/react/context.ts","../../src/react/components/embed-pdf.tsx","../../src/react/hooks/use-registry.ts","../../src/react/hooks/use-plugin.ts","../../src/react/hooks/use-capability.ts","../../src/react/hooks/use-store-state.ts","../../src/react/hooks/use-core-state.ts"],"sourcesContent":["import { createContext } from 'react';\nimport type { PluginRegistry } from '@embedpdf/core';\n\nexport interface PDFContextState {\n  registry: PluginRegistry | null;\n  isInitializing: boolean;\n  pluginsReady: boolean;\n}\n\nexport const PDFContext = createContext<PDFContextState>({\n  registry: null,\n  isInitializing: true,\n  pluginsReady: false,\n});\n","import React, { useState, useEffect, useRef } from 'react';\nimport { PdfEngine } from '@embedpdf/models';\nimport { PluginRegistry } from '@embedpdf/core';\nimport type { IPlugin, PluginBatchRegistration } from '@embedpdf/core';\n\nimport { PDFContext, PDFContextState } from '../context';\n\ninterface EmbedPDFProps {\n  engine: PdfEngine;\n  onInitialized?: (registry: PluginRegistry) => Promise<void>;\n  plugins: PluginBatchRegistration<IPlugin<any>, any>[];\n  children: React.ReactNode | ((state: PDFContextState) => React.ReactNode);\n}\n\nexport function EmbedPDF({ engine, onInitialized, plugins, children }: EmbedPDFProps) {\n  const [registry, setRegistry] = useState<PluginRegistry | null>(null);\n  const [isInitializing, setIsInitializing] = useState<boolean>(true);\n  const [pluginsReady, setPluginsReady] = useState<boolean>(false);\n  const initRef = useRef<EmbedPDFProps['onInitialized']>(onInitialized);\n\n  useEffect(() => {\n    initRef.current = onInitialized; // update without triggering re-runs\n  }, [onInitialized]);\n\n  useEffect(() => {\n    const pdfViewer = new PluginRegistry(engine);\n    pdfViewer.registerPluginBatch(plugins);\n\n    const initialize = async () => {\n      await pdfViewer.initialize();\n      // if the registry is destroyed, don't do anything\n      if (pdfViewer.isDestroyed()) {\n        return;\n      }\n\n      /* always call the *latest* callback */\n      await initRef.current?.(pdfViewer);\n\n      // if the registry is destroyed, don't do anything\n      if (pdfViewer.isDestroyed()) {\n        return;\n      }\n\n      pdfViewer.pluginsReady().then(() => {\n        if (!pdfViewer.isDestroyed()) {\n          setPluginsReady(true);\n        }\n      });\n\n      // Provide the registry to children via context\n      setRegistry(pdfViewer);\n      setIsInitializing(false);\n    };\n\n    initialize().catch(console.error);\n\n    return () => {\n      pdfViewer.destroy();\n      setRegistry(null);\n      setIsInitializing(true);\n      setPluginsReady(false);\n    };\n  }, [engine, plugins]);\n\n  return (\n    <PDFContext.Provider value={{ registry, isInitializing, pluginsReady }}>\n      {typeof children === 'function'\n        ? children({ registry, isInitializing, pluginsReady })\n        : children}\n    </PDFContext.Provider>\n  );\n}\n","import { useContext } from 'react';\nimport { PDFContext, PDFContextState } from '../context';\n\n/**\n * Hook to access the PDF registry.\n * @returns The PDF registry or null during initialization\n */\nexport function useRegistry(): PDFContextState {\n  const contextValue = useContext(PDFContext);\n\n  // Error if used outside of context\n  if (contextValue === undefined) {\n    throw new Error('useCapability must be used within a PDFContext.Provider');\n  }\n\n  const { registry, isInitializing } = contextValue;\n\n  // During initialization, return null instead of throwing an error\n  if (isInitializing) {\n    return contextValue;\n  }\n\n  // At this point, initialization is complete but registry is still null, which is unexpected\n  if (registry === null) {\n    throw new Error('PDF registry failed to initialize properly');\n  }\n\n  return contextValue;\n}\n","import type { BasePlugin } from '@embedpdf/core';\nimport { useRegistry } from './use-registry';\n\ntype PluginState<T extends BasePlugin> = {\n  plugin: T | null;\n  isLoading: boolean;\n  ready: Promise<void>;\n};\n\n/**\n * Hook to access a plugin.\n * @param pluginId The ID of the plugin to access\n * @returns The plugin or null during initialization\n * @example\n * // Get zoom plugin\n * const zoom = usePlugin<ZoomPlugin>(ZoomPlugin.id);\n */\nexport function usePlugin<T extends BasePlugin>(pluginId: T['id']): PluginState<T> {\n  const { registry } = useRegistry();\n\n  if (registry === null) {\n    return {\n      plugin: null,\n      isLoading: true,\n      ready: new Promise(() => {}),\n    };\n  }\n\n  const plugin = registry.getPlugin<T>(pluginId);\n\n  if (!plugin) {\n    throw new Error(`Plugin ${pluginId} not found`);\n  }\n\n  return {\n    plugin,\n    isLoading: false,\n    ready: plugin.ready(),\n  };\n}\n","import type { BasePlugin } from '@embedpdf/core';\nimport { usePlugin } from './use-plugin';\n\ntype CapabilityState<T extends BasePlugin> = {\n  provides: ReturnType<NonNullable<T['provides']>> | null;\n  isLoading: boolean;\n  ready: Promise<void>;\n};\n\n/**\n * Hook to access a plugin's capability.\n * @param pluginId The ID of the plugin to access\n * @returns The capability provided by the plugin or null during initialization\n * @example\n * // Get zoom capability\n * const zoom = useCapability<ZoomPlugin>(ZoomPlugin.id);\n */\nexport function useCapability<T extends BasePlugin>(pluginId: T['id']): CapabilityState<T> {\n  const { plugin, isLoading, ready } = usePlugin<T>(pluginId);\n\n  if (!plugin) {\n    return {\n      provides: null,\n      isLoading,\n      ready,\n    };\n  }\n\n  if (!plugin.provides) {\n    throw new Error(`Plugin ${pluginId} does not provide a capability`);\n  }\n\n  return {\n    provides: plugin.provides() as ReturnType<NonNullable<T['provides']>>,\n    isLoading,\n    ready,\n  };\n}\n","import { useState, useEffect } from 'react';\nimport { CoreState, StoreState } from '@embedpdf/core';\nimport { useRegistry } from './use-registry';\n\n/**\n * Hook that provides access to the current global store state\n * and re-renders the component when the state changes\n */\nexport function useStoreState<T = CoreState>(): StoreState<T> | null {\n  const { registry } = useRegistry();\n  const [state, setState] = useState<StoreState<T> | null>(null);\n\n  useEffect(() => {\n    if (!registry) return;\n\n    // Get initial state\n    setState(registry.getStore().getState() as StoreState<T>);\n\n    // Subscribe to store changes\n    const unsubscribe = registry.getStore().subscribe((_action, newState) => {\n      setState(newState as StoreState<T>);\n    });\n\n    return () => unsubscribe();\n  }, [registry]);\n\n  return state;\n}\n","import { useState, useEffect } from 'react';\nimport { CoreState, arePropsEqual } from '@embedpdf/core';\nimport { useRegistry } from './use-registry';\n\n/**\n * Hook that provides access to the current core state\n * and re-renders the component only when the core state changes\n */\nexport function useCoreState(): CoreState | null {\n  const { registry } = useRegistry();\n  const [coreState, setCoreState] = useState<CoreState | null>(null);\n\n  useEffect(() => {\n    if (!registry) return;\n\n    const store = registry.getStore();\n\n    // Get initial core state\n    setCoreState(store.getState().core);\n\n    // Create a single subscription that handles all core actions\n    const unsubscribe = store.subscribe((action, newState, oldState) => {\n      // Only update if it's a core action and the core state changed\n      if (store.isCoreAction(action) && !arePropsEqual(newState.core, oldState.core)) {\n        setCoreState(newState.core);\n      }\n    });\n\n    return () => unsubscribe();\n  }, [registry]);\n\n  return coreState;\n}\n"],"names":["PDFContext","createContext","EmbedPDF","engine","onInitialized","plugins","children","registry","setRegistry","useState","isInitializing","setIsInitializing","pluginsReady","setPluginsReady","initRef","useRef","useEffect","pdfViewer","PluginRegistry","_a","jsx","useRegistry","contextValue","useContext","usePlugin","pluginId","plugin","useCapability","isLoading","ready","useStoreState","state","setState","unsubscribe","_action","newState","useCoreState","coreState","setCoreState","store","action","oldState","arePropsEqual"],"mappings":";;;AASO,MAAMA,IAAaC,EAA+B;AAAA,EACvD,UAAU;AAAA,EACV,gBAAgB;AAAA,EAChB,cAAc;AAChB,CAAC;ACCM,SAASC,EAAS,EAAE,QAAAC,GAAQ,eAAAC,GAAe,SAAAC,GAAS,UAAAC,KAA2B;AACpF,QAAM,CAACC,GAAUC,CAAW,IAAIC,EAAgC,IAAI,GAC9D,CAACC,GAAgBC,CAAiB,IAAIF,EAAkB,EAAI,GAC5D,CAACG,GAAcC,CAAe,IAAIJ,EAAkB,EAAK,GACzDK,IAAUC,EAAuCX,CAAa;AAEpE,SAAAY,EAAU,MAAM;AACd,IAAAF,EAAQ,UAAUV;AAAA,EAAA,GACjB,CAACA,CAAa,CAAC,GAElBY,EAAU,MAAM;AACR,UAAAC,IAAY,IAAIC,EAAef,CAAM;AAC3C,WAAAc,EAAU,oBAAoBZ,CAAO,IAElB,YAAY;;AAGzB,MAFJ,MAAMY,EAAU,WAAW,GAEvB,CAAAA,EAAU,kBAKR,QAAAE,IAAAL,EAAQ,YAAR,gBAAAK,EAAA,KAAAL,GAAkBG,KAGpB,CAAAA,EAAU,kBAIJA,EAAA,eAAe,KAAK,MAAM;AAC9B,QAACA,EAAU,iBACbJ,EAAgB,EAAI;AAAA,MACtB,CACD,GAGDL,EAAYS,CAAS,GACrBN,EAAkB,EAAK;AAAA,IACzB,KAEa,MAAM,QAAQ,KAAK,GAEzB,MAAM;AACX,MAAAM,EAAU,QAAQ,GAClBT,EAAY,IAAI,GAChBG,EAAkB,EAAI,GACtBE,EAAgB,EAAK;AAAA,IACvB;AAAA,EAAA,GACC,CAACV,GAAQE,CAAO,CAAC,GAGlB,gBAAAe,EAACpB,EAAW,UAAX,EAAoB,OAAO,EAAE,UAAAO,GAAU,gBAAAG,GAAgB,cAAAE,KACrD,iBAAON,KAAa,aACjBA,EAAS,EAAE,UAAAC,GAAU,gBAAAG,GAAgB,cAAAE,EAAa,CAAC,IACnDN,GACN;AAEJ;AChEO,SAASe,IAA+B;AACvC,QAAAC,IAAeC,EAAWvB,CAAU;AAG1C,MAAIsB,MAAiB;AACb,UAAA,IAAI,MAAM,yDAAyD;AAGrE,QAAA,EAAE,UAAAf,GAAU,gBAAAG,EAAA,IAAmBY;AAGrC,MAAIZ;AACK,WAAAY;AAIT,MAAIf,MAAa;AACT,UAAA,IAAI,MAAM,4CAA4C;AAGvD,SAAAe;AACT;ACXO,SAASE,EAAgCC,GAAmC;AAC3E,QAAA,EAAE,UAAAlB,EAAS,IAAIc,EAAY;AAEjC,MAAId,MAAa;AACR,WAAA;AAAA,MACL,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,OAAO,IAAI,QAAQ,MAAM;AAAA,MAAE,CAAA;AAAA,IAC7B;AAGI,QAAAmB,IAASnB,EAAS,UAAakB,CAAQ;AAE7C,MAAI,CAACC;AACH,UAAM,IAAI,MAAM,UAAUD,CAAQ,YAAY;AAGzC,SAAA;AAAA,IACL,QAAAC;AAAA,IACA,WAAW;AAAA,IACX,OAAOA,EAAO,MAAM;AAAA,EACtB;AACF;ACtBO,SAASC,EAAoCF,GAAuC;AACzF,QAAM,EAAE,QAAAC,GAAQ,WAAAE,GAAW,OAAAC,EAAM,IAAIL,EAAaC,CAAQ;AAE1D,MAAI,CAACC;AACI,WAAA;AAAA,MACL,UAAU;AAAA,MACV,WAAAE;AAAA,MACA,OAAAC;AAAA,IACF;AAGE,MAAA,CAACH,EAAO;AACV,UAAM,IAAI,MAAM,UAAUD,CAAQ,gCAAgC;AAG7D,SAAA;AAAA,IACL,UAAUC,EAAO,SAAS;AAAA,IAC1B,WAAAE;AAAA,IACA,OAAAC;AAAA,EACF;AACF;AC7BO,SAASC,IAAqD;AAC7D,QAAA,EAAE,UAAAvB,EAAS,IAAIc,EAAY,GAC3B,CAACU,GAAOC,CAAQ,IAAIvB,EAA+B,IAAI;AAE7D,SAAAO,EAAU,MAAM;AACd,QAAI,CAACT,EAAU;AAGf,IAAAyB,EAASzB,EAAS,SAAW,EAAA,SAAA,CAA2B;AAGxD,UAAM0B,IAAc1B,EAAS,SAAA,EAAW,UAAU,CAAC2B,GAASC,MAAa;AACvE,MAAAH,EAASG,CAAyB;AAAA,IAAA,CACnC;AAED,WAAO,MAAMF,EAAY;AAAA,EAAA,GACxB,CAAC1B,CAAQ,CAAC,GAENwB;AACT;ACnBO,SAASK,IAAiC;AACzC,QAAA,EAAE,UAAA7B,EAAS,IAAIc,EAAY,GAC3B,CAACgB,GAAWC,CAAY,IAAI7B,EAA2B,IAAI;AAEjE,SAAAO,EAAU,MAAM;AACd,QAAI,CAACT,EAAU;AAET,UAAAgC,IAAQhC,EAAS,SAAS;AAGnB,IAAA+B,EAAAC,EAAM,SAAS,EAAE,IAAI;AAGlC,UAAMN,IAAcM,EAAM,UAAU,CAACC,GAAQL,GAAUM,MAAa;AAE9D,MAAAF,EAAM,aAAaC,CAAM,KAAK,CAACE,EAAcP,EAAS,MAAMM,EAAS,IAAI,KAC3EH,EAAaH,EAAS,IAAI;AAAA,IAC5B,CACD;AAED,WAAO,MAAMF,EAAY;AAAA,EAAA,GACxB,CAAC1B,CAAQ,CAAC,GAEN8B;AACT;"}
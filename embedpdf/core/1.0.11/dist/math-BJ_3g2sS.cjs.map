{"version":3,"file":"math-BJ_3g2sS.cjs","sources":["../src/lib/utils/dependency-resolver.ts","../src/lib/types/errors.ts","../src/lib/store/plugin-store.ts","../src/lib/store/actions.ts","../src/lib/store/store.ts","../../models/dist/index.js","../src/lib/store/initial-state.ts","../src/lib/store/reducer.ts","../src/lib/registry/plugin-registry.ts","../src/lib/utils/math.ts"],"sourcesContent":["export class DependencyResolver {\n  private dependencyGraph = new Map<string, Set<string>>();\n\n  addNode(id: string, dependencies: string[] = []) {\n    this.dependencyGraph.set(id, new Set(dependencies));\n  }\n\n  private hasCircularDependencies(): boolean {\n    const visited = new Set<string>();\n    const recursionStack = new Set<string>();\n\n    const dfs = (id: string): boolean => {\n      visited.add(id);\n      recursionStack.add(id);\n\n      const dependencies = this.dependencyGraph.get(id) || new Set();\n      for (const dep of dependencies) {\n        if (!visited.has(dep)) {\n          if (dfs(dep)) return true;\n        } else if (recursionStack.has(dep)) {\n          return true; // Circular dependency found\n        }\n      }\n\n      recursionStack.delete(id);\n      return false;\n    };\n\n    for (const id of this.dependencyGraph.keys()) {\n      if (!visited.has(id)) {\n        if (dfs(id)) return true;\n      }\n    }\n\n    return false;\n  }\n\n  resolveLoadOrder(): string[] {\n    if (this.hasCircularDependencies()) {\n      throw new Error('Circular dependencies detected');\n    }\n\n    const result: string[] = [];\n    const visited = new Set<string>();\n    const temp = new Set<string>();\n\n    const visit = (id: string) => {\n      if (temp.has(id)) throw new Error('Circular dependency');\n      if (visited.has(id)) return;\n\n      temp.add(id);\n\n      const dependencies = this.dependencyGraph.get(id) || new Set();\n      for (const dep of dependencies) {\n        visit(dep);\n      }\n\n      temp.delete(id);\n      visited.add(id);\n      result.push(id);\n    };\n\n    for (const id of this.dependencyGraph.keys()) {\n      if (!visited.has(id)) {\n        visit(id);\n      }\n    }\n\n    return result;\n  }\n}\n","export class PluginRegistrationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PluginRegistrationError';\n  }\n}\n\nexport class PluginNotFoundError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PluginNotFoundError';\n  }\n}\n\nexport class CircularDependencyError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CircularDependencyError';\n  }\n}\n\nexport class CapabilityNotFoundError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CapabilityNotFoundError';\n  }\n}\n\n// You might also want to add:\nexport class CapabilityConflictError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CapabilityConflictError';\n  }\n}\n\nexport class PluginInitializationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PluginInitializationError';\n  }\n}\n\nexport class PluginConfigurationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PluginConfigurationError';\n  }\n}\n","import { Store } from './store';\nimport { Action } from './types';\n\n/**\n * A type-safe store handle for plugins, providing access to plugin-specific state and actions.\n */\nexport class PluginStore<PluginState, PluginAction extends Action> {\n  private store: Store<any, any>;\n  private pluginId: string;\n\n  /**\n   * Initializes the PluginStore with the main store and plugin ID.\n   * @param store The main store instance.\n   * @param pluginId The unique identifier for the plugin.\n   */\n  constructor(store: Store<any, any>, pluginId: string) {\n    this.store = store;\n    this.pluginId = pluginId;\n  }\n\n  /**\n   * Gets the current state of the plugin.\n   * @returns The plugin's state.\n   */\n  getState(): PluginState {\n    return this.store.getState().plugins[this.pluginId] as PluginState;\n  }\n\n  /**\n   * Dispatches an action for the plugin and returns the *new* global state.\n   * If you only need the pluginâ€™s updated state, call `getState()` afterward.\n   * @param action The action to dispatch.\n   * @returns The updated global store state (after plugin reducer).\n   */\n  dispatch(action: PluginAction): PluginState {\n    return this.store.dispatchToPlugin(this.pluginId, action);\n  }\n\n  /**\n   * Subscribes to state changes only for this specific plugin.\n   * You now receive (action, newPluginState, oldPluginState) in the callback.\n   *\n   * @param listener The callback to invoke when plugin state changes.\n   * @returns A function to unsubscribe the listener.\n   */\n  subscribeToState(\n    listener: (action: PluginAction, newState: PluginState, oldState: PluginState) => void,\n  ) {\n    return this.store.subscribeToPlugin(this.pluginId, (action, newPluginState, oldPluginState) => {\n      listener(\n        action as PluginAction,\n        newPluginState as PluginState,\n        oldPluginState as PluginState,\n      );\n    });\n  }\n\n  /**\n   * Subscribes to a specific action type for the plugin.\n   * This still uses the main store's `onAction`, so you get the *global*\n   * old/new store states there. If you specifically want old/new plugin state,\n   * use `subscribeToState` instead.\n   *\n   * @param type The action type to listen for.\n   * @param handler The callback to invoke when the action occurs.\n   * @returns A function to unsubscribe the handler.\n   */\n  onAction<T extends PluginAction['type']>(\n    type: T,\n    handler: (\n      action: Extract<PluginAction, { type: T }>,\n      state: PluginState,\n      oldState: PluginState,\n    ) => void,\n  ) {\n    return this.store.onAction(type, (action, state, oldState) => {\n      handler(\n        action as Extract<PluginAction, { type: T }>,\n        state.plugins[this.pluginId] as PluginState,\n        oldState.plugins[this.pluginId] as PluginState,\n      );\n    });\n  }\n}\n","import { PdfDocumentObject, PdfPageObject, Rotation } from '@embedpdf/models';\n\nexport const LOAD_DOCUMENT = 'LOAD_DOCUMENT';\nexport const SET_DOCUMENT = 'SET_DOCUMENT';\nexport const SET_DOCUMENT_ERROR = 'SET_DOCUMENT_ERROR';\nexport const SET_SCALE = 'SET_SCALE';\nexport const SET_ROTATION = 'SET_ROTATION';\nexport const SET_PAGES = 'SET_PAGES';\n\nexport const CORE_ACTION_TYPES = [\n  LOAD_DOCUMENT,\n  SET_DOCUMENT,\n  SET_DOCUMENT_ERROR,\n  SET_SCALE,\n  SET_ROTATION,\n  SET_PAGES,\n] as const;\n\n// Action Type Interfaces\nexport interface LoadDocumentAction {\n  type: typeof LOAD_DOCUMENT;\n}\n\nexport interface SetDocumentAction {\n  type: typeof SET_DOCUMENT;\n  payload: PdfDocumentObject;\n}\n\nexport interface SetDocumentErrorAction {\n  type: typeof SET_DOCUMENT_ERROR;\n  payload: string;\n}\n\nexport interface SetScaleAction {\n  type: typeof SET_SCALE;\n  payload: number;\n}\n\nexport interface SetRotationAction {\n  type: typeof SET_ROTATION;\n  payload: Rotation;\n}\n\nexport interface SetPagesAction {\n  type: typeof SET_PAGES;\n  payload: PdfPageObject[][];\n}\n\nexport type DocumentAction =\n  | LoadDocumentAction\n  | SetDocumentAction\n  | SetDocumentErrorAction\n  | SetScaleAction\n  | SetRotationAction\n  | SetPagesAction;\n\n// Core actions\nexport type CoreAction = DocumentAction;\n\nexport const loadDocument = (): CoreAction => ({ type: LOAD_DOCUMENT });\nexport const setDocument = (document: PdfDocumentObject): CoreAction => ({\n  type: SET_DOCUMENT,\n  payload: document,\n});\nexport const setDocumentError = (error: string): CoreAction => ({\n  type: SET_DOCUMENT_ERROR,\n  payload: error,\n});\nexport const setScale = (scale: number): CoreAction => ({ type: SET_SCALE, payload: scale });\nexport const setRotation = (rotation: Rotation): CoreAction => ({\n  type: SET_ROTATION,\n  payload: rotation,\n});\nexport const setPages = (pages: PdfPageObject[][]): CoreAction => ({\n  type: SET_PAGES,\n  payload: pages,\n});\n","import { Reducer, Action, StoreState, StoreListener, PluginListener } from './types';\nimport { PluginStore } from './plugin-store';\nimport { CORE_ACTION_TYPES } from './actions';\n\n/**\n * A generic, type-safe store class managing core and plugin states, reducers, and subscriptions.\n * @template CoreState The type of the core state.\n * @template CoreAction The type of actions handled by core reducers (extends Action).\n */\nexport class Store<CoreState, CoreAction extends Action = Action> {\n  private state: StoreState<CoreState>;\n  private coreReducer: Reducer<CoreState, CoreAction>;\n  private pluginReducers: Record<string, Reducer<any, Action>> = {};\n\n  private listeners: StoreListener<CoreState>[] = [];\n  private pluginListeners: Record<string, PluginListener[]> = {};\n\n  /**\n   * Initializes the store with the provided core state.\n   * @param reducer          The core reducer function\n   * @param initialCoreState The initial core state\n   */\n  constructor(\n    reducer: Reducer<CoreState, CoreAction>,\n    public initialCoreState: CoreState,\n  ) {\n    this.state = { core: initialCoreState, plugins: {} };\n    this.coreReducer = reducer;\n  }\n\n  /**\n   * Adds a reducer for a plugin-specific state.\n   * @param pluginId The unique identifier for the plugin.\n   * @param reducer The reducer function for the plugin state.\n   * @param initialState The initial state for the plugin.\n   */\n  addPluginReducer<PluginState>(\n    pluginId: string,\n    reducer: Reducer<PluginState, Action>,\n    initialState: PluginState,\n  ) {\n    this.state.plugins[pluginId] = initialState;\n    this.pluginReducers[pluginId] = reducer;\n  }\n\n  /**\n   * Dispatches an action *only* to the core reducer.\n   * Notifies the global store listeners with (action, newState, oldState).\n   *\n   * @param action The action to dispatch, typed as CoreAction\n   * @returns The updated *global* store state\n   */\n  dispatchToCore(action: CoreAction): StoreState<CoreState> {\n    if (!this.coreReducer) {\n      return this.getState();\n    }\n\n    const oldState = this.getState();\n    // Update core state via its reducer\n    this.state.core = this.coreReducer(this.state.core, action);\n\n    const newState = this.getState();\n    // Notify all main-store subscribers\n    this.listeners.forEach((listener) => listener(action, newState, oldState));\n\n    return newState;\n  }\n\n  /**\n   * Dispatches an action *only* to a specific plugin.\n   * Optionally notifies global store listeners if `notifyGlobal` is true.\n   * Always notifies plugin-specific listeners with (action, newPluginState, oldPluginState).\n   *\n   * @param pluginId   The plugin identifier\n   * @param action     The plugin action to dispatch\n   * @param notifyGlobal Whether to also notify global store listeners\n   * @returns The updated *global* store state\n   */\n  dispatchToPlugin<PluginAction extends Action>(\n    pluginId: string,\n    action: PluginAction,\n    notifyGlobal: boolean = true,\n  ): any {\n    const oldGlobalState = this.getState();\n\n    const reducer = this.pluginReducers[pluginId];\n    if (!reducer) {\n      // No plugin found, just return the old state\n      return oldGlobalState;\n    }\n\n    // Grab the old plugin state\n    const oldPluginState = oldGlobalState.plugins[pluginId];\n    // Reduce to new plugin state\n    const newPluginState = reducer(oldPluginState, action);\n    // Update the store's plugin slice\n    this.state.plugins[pluginId] = newPluginState;\n\n    const newGlobalState = this.getState();\n\n    // If we are notifying the main store subscribers about plugin changes\n    if (notifyGlobal) {\n      this.listeners.forEach((listener) => listener(action, newGlobalState, oldGlobalState));\n    }\n\n    // Notify plugin-specific listeners\n    if (this.pluginListeners[pluginId]) {\n      this.pluginListeners[pluginId].forEach((listener) => {\n        listener(action, newPluginState, oldPluginState);\n      });\n    }\n\n    return newPluginState;\n  }\n\n  /**\n   * Dispatches an action to update the state using:\n   * - the core reducer (if it's a CoreAction)\n   * - *all* plugin reducers (regardless of action type), with no global notify for each plugin\n   *\n   * Returns the new *global* store state after all reducers have processed the action.\n   *\n   * @param action The action to dispatch (can be CoreAction or any Action).\n   */\n  dispatch(action: CoreAction | Action): StoreState<CoreState> {\n    // Keep old state to notify global listeners *once*, after all reducers run.\n    const oldState = this.getState();\n    // 1) Apply core reducer (only if action is a CoreAction)\n    if (this.isCoreAction(action)) {\n      this.state.core = this.coreReducer(this.state.core, action);\n    }\n\n    // 2) Apply plugin reducers (without globally notifying after each plugin)\n    for (const pluginId in this.pluginReducers) {\n      const reducer = this.pluginReducers[pluginId];\n      const oldPluginState = oldState.plugins[pluginId];\n      if (reducer) {\n        this.state.plugins[pluginId] = reducer(oldPluginState, action);\n      }\n      // We do *not* notify global listeners or plugin listeners here,\n      // as that might be undesired \"fan-out\". If you want per-plugin subscription\n      // triggered on every dispatch, you can do so here, but thatâ€™s up to you.\n    }\n\n    // 3) Notify global listeners *once* with the final new state\n    const newState = this.getState();\n    this.listeners.forEach((listener) => listener(action, newState, oldState));\n\n    // 4) Return the new global store state\n    return newState;\n  }\n\n  /**\n   * Returns a shallow copy of the current state.\n   * @returns The current store state.\n   */\n  getState(): StoreState<CoreState> {\n    return {\n      core: { ...this.state.core },\n      plugins: { ...this.state.plugins },\n    };\n  }\n\n  /**\n   * Subscribes a listener to *global* state changes.\n   * The callback signature is now (action, newState, oldState).\n   *\n   * @param listener The callback to invoke on state changes\n   * @returns A function to unsubscribe the listener\n   */\n  subscribe(listener: StoreListener<CoreState>) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter((l) => l !== listener);\n    };\n  }\n\n  /**\n   * Subscribes a listener to *plugin-specific* state changes.\n   * The callback signature is now (action, newPluginState, oldPluginState).\n   *\n   * @param pluginId The unique identifier for the plugin.\n   * @param listener The callback to invoke on plugin state changes.\n   * @returns A function to unsubscribe the listener.\n   */\n  subscribeToPlugin(pluginId: string, listener: PluginListener) {\n    if (!(pluginId in this.state.plugins)) {\n      throw new Error(\n        `Plugin state not found for plugin \"${pluginId}\". Did you forget to call addPluginReducer?`,\n      );\n    }\n\n    if (!this.pluginListeners[pluginId]) {\n      this.pluginListeners[pluginId] = [];\n    }\n    this.pluginListeners[pluginId].push(listener);\n\n    return () => {\n      this.pluginListeners[pluginId] = this.pluginListeners[pluginId].filter((l) => l !== listener);\n      if (this.pluginListeners[pluginId].length === 0) {\n        delete this.pluginListeners[pluginId];\n      }\n    };\n  }\n\n  /**\n   * Subscribes to a specific action type (only from the core's action union).\n   * The callback signature is (action, newState, oldState).\n   *\n   * @param type The action type to listen for.\n   * @param handler The callback to invoke when the action occurs.\n   * @returns A function to unsubscribe the handler.\n   */\n  onAction<T extends CoreAction['type']>(\n    type: T,\n    handler: (\n      action: Extract<CoreAction, { type: T }>,\n      state: StoreState<CoreState>,\n      oldState: StoreState<CoreState>,\n    ) => void,\n  ) {\n    return this.subscribe((action, newState, oldState) => {\n      if (action.type === type) {\n        handler(action as Extract<CoreAction, { type: T }>, newState, oldState);\n      }\n    });\n  }\n\n  /**\n   * Gets a PluginStore handle for a specific plugin.\n   * @param pluginId The unique identifier for the plugin.\n   * @returns A PluginStore instance for the plugin.\n   */\n  getPluginStore<PluginState, PluginAction extends Action>(\n    pluginId: string,\n  ): PluginStore<PluginState, PluginAction> {\n    if (!(pluginId in this.state.plugins)) {\n      throw new Error(\n        `Plugin state not found for plugin \"${pluginId}\". Did you forget to call addPluginReducer?`,\n      );\n    }\n    return new PluginStore<PluginState, PluginAction>(this, pluginId);\n  }\n\n  /**\n   * Helper method to check if an action is a CoreAction.\n   * Adjust if you have a more refined way to differentiate CoreAction vs. any other Action.\n   */\n  public isCoreAction(action: Action): action is CoreAction {\n    // In many codebases you'd do something more robust here\n    // or rely on TypeScript's narrowing logic if possible.\n    return CORE_ACTION_TYPES.includes(action.type as (typeof CORE_ACTION_TYPES)[number]);\n  }\n\n  /**\n   * Destroy the store: drop every listener and plugin reducer\n   */\n  public destroy(): void {\n    // 1. empty listener collections\n    this.listeners.length = 0;\n    for (const id in this.pluginListeners) {\n      this.pluginListeners[id]?.splice?.(0);\n    }\n    this.pluginListeners = {};\n\n    // 2. wipe plugin reducers and states\n    this.pluginReducers = {};\n    this.state.plugins = {};\n\n    // 3. reset core state to initial\n    this.state.core = { ...this.initialCoreState };\n  }\n}\n","// src/geometry.ts\nvar Rotation = /* @__PURE__ */ ((Rotation2) => {\n  Rotation2[Rotation2[\"Degree0\"] = 0] = \"Degree0\";\n  Rotation2[Rotation2[\"Degree90\"] = 1] = \"Degree90\";\n  Rotation2[Rotation2[\"Degree180\"] = 2] = \"Degree180\";\n  Rotation2[Rotation2[\"Degree270\"] = 3] = \"Degree270\";\n  return Rotation2;\n})(Rotation || {});\nfunction toIntPos(p) {\n  return { x: Math.floor(p.x), y: Math.floor(p.y) };\n}\nfunction toIntSize(s) {\n  return { width: Math.ceil(s.width), height: Math.ceil(s.height) };\n}\nfunction toIntRect(r) {\n  return {\n    origin: toIntPos(r.origin),\n    size: toIntSize(r.size)\n  };\n}\nfunction calculateDegree(rotation) {\n  switch (rotation) {\n    case 0 /* Degree0 */:\n      return 0;\n    case 1 /* Degree90 */:\n      return 90;\n    case 2 /* Degree180 */:\n      return 180;\n    case 3 /* Degree270 */:\n      return 270;\n  }\n}\nfunction calculateAngle(rotation) {\n  return calculateDegree(rotation) * Math.PI / 180;\n}\nfunction swap(size) {\n  const { width, height } = size;\n  return {\n    width: height,\n    height: width\n  };\n}\nfunction transformSize(size, rotation, scaleFactor) {\n  size = rotation % 2 === 0 ? size : swap(size);\n  return {\n    width: size.width * scaleFactor,\n    height: size.height * scaleFactor\n  };\n}\nfunction quadToRect(q) {\n  const xs = [q.p1.x, q.p2.x, q.p3.x, q.p4.x];\n  const ys = [q.p1.y, q.p2.y, q.p3.y, q.p4.y];\n  return {\n    origin: { x: Math.min(...xs), y: Math.min(...ys) },\n    size: {\n      width: Math.max(...xs) - Math.min(...xs),\n      height: Math.max(...ys) - Math.min(...ys)\n    }\n  };\n}\nfunction rectToQuad(r) {\n  return {\n    p1: { x: r.origin.x, y: r.origin.y },\n    p2: { x: r.origin.x + r.size.width, y: r.origin.y },\n    p3: { x: r.origin.x + r.size.width, y: r.origin.y + r.size.height },\n    p4: { x: r.origin.x, y: r.origin.y + r.size.height }\n  };\n}\nfunction rotatePosition(containerSize, position, rotation) {\n  let x = position.x;\n  let y = position.y;\n  switch (rotation) {\n    case 0 /* Degree0 */:\n      x = position.x;\n      y = position.y;\n      break;\n    case 1 /* Degree90 */:\n      x = containerSize.height - position.y;\n      y = position.x;\n      break;\n    case 2 /* Degree180 */:\n      x = containerSize.width - position.x;\n      y = containerSize.height - position.y;\n      break;\n    case 3 /* Degree270 */:\n      x = position.y;\n      y = containerSize.width - position.x;\n      break;\n  }\n  return {\n    x,\n    y\n  };\n}\nfunction scalePosition(position, scaleFactor) {\n  return {\n    x: position.x * scaleFactor,\n    y: position.y * scaleFactor\n  };\n}\nfunction transformPosition(containerSize, position, rotation, scaleFactor) {\n  return scalePosition(rotatePosition(containerSize, position, rotation), scaleFactor);\n}\nfunction restorePosition(containerSize, position, rotation, scaleFactor) {\n  return scalePosition(\n    rotatePosition(containerSize, position, (4 - rotation) % 4),\n    1 / scaleFactor\n  );\n}\nfunction rotateRect(containerSize, rect, rotation) {\n  let x = rect.origin.x;\n  let y = rect.origin.y;\n  let size = rect.size;\n  switch (rotation) {\n    case 0 /* Degree0 */:\n      break;\n    case 1 /* Degree90 */:\n      x = containerSize.height - rect.origin.y - rect.size.height;\n      y = rect.origin.x;\n      size = swap(rect.size);\n      break;\n    case 2 /* Degree180 */:\n      x = containerSize.width - rect.origin.x - rect.size.width;\n      y = containerSize.height - rect.origin.y - rect.size.height;\n      break;\n    case 3 /* Degree270 */:\n      x = rect.origin.y;\n      y = containerSize.width - rect.origin.x - rect.size.width;\n      size = swap(rect.size);\n      break;\n  }\n  return {\n    origin: {\n      x,\n      y\n    },\n    size: {\n      width: size.width,\n      height: size.height\n    }\n  };\n}\nfunction scaleRect(rect, scaleFactor) {\n  return {\n    origin: {\n      x: rect.origin.x * scaleFactor,\n      y: rect.origin.y * scaleFactor\n    },\n    size: {\n      width: rect.size.width * scaleFactor,\n      height: rect.size.height * scaleFactor\n    }\n  };\n}\nfunction transformRect(containerSize, rect, rotation, scaleFactor) {\n  return scaleRect(rotateRect(containerSize, rect, rotation), scaleFactor);\n}\nfunction restoreRect(containerSize, rect, rotation, scaleFactor) {\n  return scaleRect(rotateRect(containerSize, rect, (4 - rotation) % 4), 1 / scaleFactor);\n}\nfunction restoreOffset(offset, rotation, scaleFactor) {\n  let offsetX = offset.x;\n  let offsetY = offset.y;\n  switch (rotation) {\n    case 0 /* Degree0 */:\n      offsetX = offset.x / scaleFactor;\n      offsetY = offset.y / scaleFactor;\n      break;\n    case 1 /* Degree90 */:\n      offsetX = offset.y / scaleFactor;\n      offsetY = -offset.x / scaleFactor;\n      break;\n    case 2 /* Degree180 */:\n      offsetX = -offset.x / scaleFactor;\n      offsetY = -offset.y / scaleFactor;\n      break;\n    case 3 /* Degree270 */:\n      offsetX = -offset.y / scaleFactor;\n      offsetY = offset.x / scaleFactor;\n      break;\n  }\n  return {\n    x: offsetX,\n    y: offsetY\n  };\n}\nfunction boundingRect(rects) {\n  if (rects.length === 0) return null;\n  let minX = rects[0].origin.x, minY = rects[0].origin.y, maxX = rects[0].origin.x + rects[0].size.width, maxY = rects[0].origin.y + rects[0].size.height;\n  for (const r of rects) {\n    minX = Math.min(minX, r.origin.x);\n    minY = Math.min(minY, r.origin.y);\n    maxX = Math.max(maxX, r.origin.x + r.size.width);\n    maxY = Math.max(maxY, r.origin.y + r.size.height);\n  }\n  return {\n    origin: {\n      x: minX,\n      y: minY\n    },\n    size: {\n      width: maxX - minX,\n      height: maxY - minY\n    }\n  };\n}\nvar makeMatrix = (rectangle, rotation, scaleFactor) => {\n  const { width, height } = rectangle.size;\n  switch (rotation) {\n    case 0 /* Degree0 */:\n      return {\n        a: scaleFactor,\n        b: 0,\n        c: 0,\n        d: -scaleFactor,\n        e: 0,\n        f: height * scaleFactor\n      };\n    case 1 /* Degree90 */:\n      return {\n        a: 0,\n        b: scaleFactor,\n        c: scaleFactor,\n        d: 0,\n        e: 0,\n        f: 0\n      };\n    case 2 /* Degree180 */:\n      return {\n        a: -scaleFactor,\n        b: 0,\n        c: 0,\n        d: scaleFactor,\n        e: width * scaleFactor,\n        f: 0\n      };\n    case 3 /* Degree270 */:\n      return {\n        a: 0,\n        b: -scaleFactor,\n        c: -scaleFactor,\n        d: 0,\n        e: height * scaleFactor,\n        f: width * scaleFactor\n      };\n  }\n};\n\n// src/logger.ts\nvar NoopLogger = class {\n  /** {@inheritDoc Logger.debug} */\n  debug() {\n  }\n  /** {@inheritDoc Logger.info} */\n  info() {\n  }\n  /** {@inheritDoc Logger.warn} */\n  warn() {\n  }\n  /** {@inheritDoc Logger.error} */\n  error() {\n  }\n  /** {@inheritDoc Logger.perf} */\n  perf() {\n  }\n};\nvar ConsoleLogger = class {\n  /** {@inheritDoc Logger.debug} */\n  debug(source, category, ...args) {\n    console.debug(`${source}.${category}`, ...args);\n  }\n  /** {@inheritDoc Logger.info} */\n  info(source, category, ...args) {\n    console.info(`${source}.${category}`, ...args);\n  }\n  /** {@inheritDoc Logger.warn} */\n  warn(source, category, ...args) {\n    console.warn(`${source}.${category}`, ...args);\n  }\n  /** {@inheritDoc Logger.error} */\n  error(source, category, ...args) {\n    console.error(`${source}.${category}`, ...args);\n  }\n  /** {@inheritDoc Logger.perf} */\n  perf(source, category, event, phase, ...args) {\n    console.info(`${source}.${category}.${event}.${phase}`, ...args);\n  }\n};\nvar LogLevel = /* @__PURE__ */ ((LogLevel2) => {\n  LogLevel2[LogLevel2[\"Debug\"] = 0] = \"Debug\";\n  LogLevel2[LogLevel2[\"Info\"] = 1] = \"Info\";\n  LogLevel2[LogLevel2[\"Warn\"] = 2] = \"Warn\";\n  LogLevel2[LogLevel2[\"Error\"] = 3] = \"Error\";\n  return LogLevel2;\n})(LogLevel || {});\nvar LevelLogger = class {\n  /**\n   * create new LevelLogger\n   * @param logger - the original logger\n   * @param level - log level that used for filtering, all logs lower than this level will be filtered out\n   */\n  constructor(logger, level) {\n    this.logger = logger;\n    this.level = level;\n  }\n  /** {@inheritDoc Logger.debug} */\n  debug(source, category, ...args) {\n    if (this.level <= 0 /* Debug */) {\n      this.logger.debug(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.info} */\n  info(source, category, ...args) {\n    if (this.level <= 1 /* Info */) {\n      this.logger.info(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.warn} */\n  warn(source, category, ...args) {\n    if (this.level <= 2 /* Warn */) {\n      this.logger.warn(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.error} */\n  error(source, category, ...args) {\n    if (this.level <= 3 /* Error */) {\n      this.logger.error(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.perf} */\n  perf(source, category, event, phase, ...args) {\n    this.logger.perf(source, category, event, phase, ...args);\n  }\n};\nvar PerfLogger = class {\n  /**\n   * create new PerfLogger\n   */\n  constructor() {\n  }\n  /** {@inheritDoc Logger.debug} */\n  debug(source, category, ...args) {\n  }\n  /** {@inheritDoc Logger.info} */\n  info(source, category, ...args) {\n  }\n  /** {@inheritDoc Logger.warn} */\n  warn(source, category, ...args) {\n  }\n  /** {@inheritDoc Logger.error} */\n  error(source, category, ...args) {\n  }\n  /** {@inheritDoc Logger.perf} */\n  perf(source, category, event, phase, identifier, ...args) {\n    switch (phase) {\n      case \"Begin\":\n        window.performance.mark(`${source}.${category}.${event}.${phase}.${identifier}`, {\n          detail: args\n        });\n        break;\n      case \"End\":\n        window.performance.mark(`${source}.${category}.${event}.${phase}.${identifier}`, {\n          detail: args\n        });\n        window.performance.measure(\n          `${source}.${category}.${event}.Measure.${identifier}`,\n          `${source}.${category}.${event}.Begin.${identifier}`,\n          `${source}.${category}.${event}.End.${identifier}`\n        );\n        break;\n    }\n  }\n};\nvar AllLogger = class {\n  /**\n   * create new PerfLogger\n   */\n  constructor(loggers) {\n    this.loggers = loggers;\n  }\n  /** {@inheritDoc Logger.debug} */\n  debug(source, category, ...args) {\n    for (const logger of this.loggers) {\n      logger.debug(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.info} */\n  info(source, category, ...args) {\n    for (const logger of this.loggers) {\n      logger.info(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.warn} */\n  warn(source, category, ...args) {\n    for (const logger of this.loggers) {\n      logger.warn(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.error} */\n  error(source, category, ...args) {\n    for (const logger of this.loggers) {\n      logger.error(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.perf} */\n  perf(source, category, event, phase, ...args) {\n    for (const logger of this.loggers) {\n      logger.perf(source, category, event, phase, ...args);\n    }\n  }\n};\n\n// src/task.ts\nvar TaskStage = /* @__PURE__ */ ((TaskStage2) => {\n  TaskStage2[TaskStage2[\"Pending\"] = 0] = \"Pending\";\n  TaskStage2[TaskStage2[\"Resolved\"] = 1] = \"Resolved\";\n  TaskStage2[TaskStage2[\"Rejected\"] = 2] = \"Rejected\";\n  TaskStage2[TaskStage2[\"Aborted\"] = 3] = \"Aborted\";\n  return TaskStage2;\n})(TaskStage || {});\nvar TaskAbortedError = class extends Error {\n  constructor(reason) {\n    super(`Task aborted: ${JSON.stringify(reason)}`);\n    this.name = \"TaskAbortedError\";\n  }\n};\nvar TaskRejectedError = class extends Error {\n  constructor(reason) {\n    super(`Task rejected: ${JSON.stringify(reason)}`);\n    this.name = \"TaskRejectedError\";\n  }\n};\nvar Task = class _Task {\n  constructor() {\n    this.state = {\n      stage: 0 /* Pending */\n    };\n    /**\n     * callbacks that will be executed when task is resolved\n     */\n    this.resolvedCallbacks = [];\n    /**\n     * callbacks that will be executed when task is rejected\n     */\n    this.rejectedCallbacks = [];\n    /**\n     * Promise that will be resolved when task is settled\n     */\n    this._promise = null;\n  }\n  /**\n   * Convert task to promise\n   * @returns promise that will be resolved when task is settled\n   */\n  toPromise() {\n    if (!this._promise) {\n      this._promise = new Promise((resolve, reject) => {\n        this.wait(\n          (result) => resolve(result),\n          (error) => {\n            if (error.type === \"abort\") {\n              reject(new TaskAbortedError(error.reason));\n            } else {\n              reject(new TaskRejectedError(error.reason));\n            }\n          }\n        );\n      });\n    }\n    return this._promise;\n  }\n  /**\n   * wait for task to be settled\n   * @param resolvedCallback - callback for resolved value\n   * @param rejectedCallback - callback for rejected value\n   */\n  wait(resolvedCallback, rejectedCallback) {\n    switch (this.state.stage) {\n      case 0 /* Pending */:\n        this.resolvedCallbacks.push(resolvedCallback);\n        this.rejectedCallbacks.push(rejectedCallback);\n        break;\n      case 1 /* Resolved */:\n        resolvedCallback(this.state.result);\n        break;\n      case 2 /* Rejected */:\n        rejectedCallback({\n          type: \"reject\",\n          reason: this.state.reason\n        });\n        break;\n      case 3 /* Aborted */:\n        rejectedCallback({\n          type: \"abort\",\n          reason: this.state.reason\n        });\n        break;\n    }\n  }\n  /**\n   * resolve task with specific result\n   * @param result - result value\n   */\n  resolve(result) {\n    if (this.state.stage === 0 /* Pending */) {\n      this.state = {\n        stage: 1 /* Resolved */,\n        result\n      };\n      for (const resolvedCallback of this.resolvedCallbacks) {\n        try {\n          resolvedCallback(result);\n        } catch (e) {\n        }\n      }\n      this.resolvedCallbacks = [];\n      this.rejectedCallbacks = [];\n    }\n  }\n  /**\n   * reject task with specific reason\n   * @param reason - abort reason\n   *\n   */\n  reject(reason) {\n    if (this.state.stage === 0 /* Pending */) {\n      this.state = {\n        stage: 2 /* Rejected */,\n        reason\n      };\n      for (const rejectedCallback of this.rejectedCallbacks) {\n        try {\n          rejectedCallback({\n            type: \"reject\",\n            reason\n          });\n        } catch (e) {\n        }\n      }\n      this.resolvedCallbacks = [];\n      this.rejectedCallbacks = [];\n    }\n  }\n  /**\n   * abort task with specific reason\n   * @param reason - abort reason\n   */\n  abort(reason) {\n    if (this.state.stage === 0 /* Pending */) {\n      this.state = {\n        stage: 3 /* Aborted */,\n        reason\n      };\n      for (const rejectedCallback of this.rejectedCallbacks) {\n        try {\n          rejectedCallback({\n            type: \"abort\",\n            reason\n          });\n        } catch (e) {\n        }\n      }\n      this.resolvedCallbacks = [];\n      this.rejectedCallbacks = [];\n    }\n  }\n  /**\n   * fail task with a TaskError from another task\n   * This is a convenience method for error propagation between tasks\n   * @param error - TaskError from another task\n   */\n  fail(error) {\n    if (error.type === \"abort\") {\n      this.abort(error.reason);\n    } else {\n      this.reject(error.reason);\n    }\n  }\n  /**\n   * Static method to wait for all tasks to resolve\n   * Returns a new task that resolves with an array of all results\n   * Rejects immediately if any task fails\n   *\n   * @param tasks - array of tasks to wait for\n   * @returns new task that resolves when all input tasks resolve\n   * @public\n   */\n  static all(tasks) {\n    const combinedTask = new _Task();\n    if (tasks.length === 0) {\n      combinedTask.resolve([]);\n      return combinedTask;\n    }\n    const results = new Array(tasks.length);\n    let resolvedCount = 0;\n    let isSettled = false;\n    tasks.forEach((task, index) => {\n      task.wait(\n        (result) => {\n          if (isSettled) return;\n          results[index] = result;\n          resolvedCount++;\n          if (resolvedCount === tasks.length) {\n            isSettled = true;\n            combinedTask.resolve(results);\n          }\n        },\n        (error) => {\n          if (isSettled) return;\n          isSettled = true;\n          if (error.type === \"abort\") {\n            combinedTask.abort(error.reason);\n          } else {\n            combinedTask.reject(error.reason);\n          }\n        }\n      );\n    });\n    return combinedTask;\n  }\n  /**\n   * Static method to wait for all tasks to settle (resolve, reject, or abort)\n   * Always resolves with an array of settlement results\n   *\n   * @param tasks - array of tasks to wait for\n   * @returns new task that resolves when all input tasks settle\n   * @public\n   */\n  static allSettled(tasks) {\n    const combinedTask = new _Task();\n    if (tasks.length === 0) {\n      combinedTask.resolve([]);\n      return combinedTask;\n    }\n    const results = new Array(tasks.length);\n    let settledCount = 0;\n    tasks.forEach((task, index) => {\n      task.wait(\n        (result) => {\n          results[index] = { status: \"resolved\", value: result };\n          settledCount++;\n          if (settledCount === tasks.length) {\n            combinedTask.resolve(results);\n          }\n        },\n        (error) => {\n          results[index] = {\n            status: error.type === \"abort\" ? \"aborted\" : \"rejected\",\n            reason: error.reason\n          };\n          settledCount++;\n          if (settledCount === tasks.length) {\n            combinedTask.resolve(results);\n          }\n        }\n      );\n    });\n    return combinedTask;\n  }\n  /**\n   * Static method that resolves/rejects with the first task that settles\n   *\n   * @param tasks - array of tasks to race\n   * @returns new task that settles with the first input task that settles\n   * @public\n   */\n  static race(tasks) {\n    const combinedTask = new _Task();\n    if (tasks.length === 0) {\n      combinedTask.reject(\"No tasks provided\");\n      return combinedTask;\n    }\n    let isSettled = false;\n    tasks.forEach((task) => {\n      task.wait(\n        (result) => {\n          if (isSettled) return;\n          isSettled = true;\n          combinedTask.resolve(result);\n        },\n        (error) => {\n          if (isSettled) return;\n          isSettled = true;\n          if (error.type === \"abort\") {\n            combinedTask.abort(error.reason);\n          } else {\n            combinedTask.reject(error.reason);\n          }\n        }\n      );\n    });\n    return combinedTask;\n  }\n  /**\n   * Utility to track progress of multiple tasks\n   *\n   * @param tasks - array of tasks to track\n   * @param onProgress - callback called when any task completes\n   * @returns new task that resolves when all input tasks resolve\n   * @public\n   */\n  static withProgress(tasks, onProgress) {\n    const combinedTask = _Task.all(tasks);\n    if (onProgress) {\n      let completedCount = 0;\n      tasks.forEach((task) => {\n        task.wait(\n          () => {\n            completedCount++;\n            onProgress(completedCount, tasks.length);\n          },\n          () => {\n            completedCount++;\n            onProgress(completedCount, tasks.length);\n          }\n        );\n      });\n    }\n    return combinedTask;\n  }\n};\n\n// src/pdf.ts\nvar PdfSoftHyphenMarker = \"\\xAD\";\nvar PdfZeroWidthSpace = \"\\u200B\";\nvar PdfWordJoiner = \"\\u2060\";\nvar PdfBomOrZwnbsp = \"\\uFEFF\";\nvar PdfNonCharacterFFFE = \"\\uFFFE\";\nvar PdfNonCharacterFFFF = \"\\uFFFF\";\nvar PdfUnwantedTextMarkers = Object.freeze([\n  PdfSoftHyphenMarker,\n  PdfZeroWidthSpace,\n  PdfWordJoiner,\n  PdfBomOrZwnbsp,\n  PdfNonCharacterFFFE,\n  PdfNonCharacterFFFF\n]);\nvar PdfUnwantedTextRegex = new RegExp(`[${PdfUnwantedTextMarkers.join(\"\")}]`, \"g\");\nfunction stripPdfUnwantedMarkers(text) {\n  return text.replace(PdfUnwantedTextRegex, \"\");\n}\nvar PdfZoomMode = /* @__PURE__ */ ((PdfZoomMode2) => {\n  PdfZoomMode2[PdfZoomMode2[\"Unknown\"] = 0] = \"Unknown\";\n  PdfZoomMode2[PdfZoomMode2[\"XYZ\"] = 1] = \"XYZ\";\n  PdfZoomMode2[PdfZoomMode2[\"FitPage\"] = 2] = \"FitPage\";\n  PdfZoomMode2[PdfZoomMode2[\"FitHorizontal\"] = 3] = \"FitHorizontal\";\n  PdfZoomMode2[PdfZoomMode2[\"FitVertical\"] = 4] = \"FitVertical\";\n  PdfZoomMode2[PdfZoomMode2[\"FitRectangle\"] = 5] = \"FitRectangle\";\n  return PdfZoomMode2;\n})(PdfZoomMode || {});\nvar PdfBlendMode = /* @__PURE__ */ ((PdfBlendMode2) => {\n  PdfBlendMode2[PdfBlendMode2[\"Normal\"] = 0] = \"Normal\";\n  PdfBlendMode2[PdfBlendMode2[\"Multiply\"] = 1] = \"Multiply\";\n  PdfBlendMode2[PdfBlendMode2[\"Screen\"] = 2] = \"Screen\";\n  PdfBlendMode2[PdfBlendMode2[\"Overlay\"] = 3] = \"Overlay\";\n  PdfBlendMode2[PdfBlendMode2[\"Darken\"] = 4] = \"Darken\";\n  PdfBlendMode2[PdfBlendMode2[\"Lighten\"] = 5] = \"Lighten\";\n  PdfBlendMode2[PdfBlendMode2[\"ColorDodge\"] = 6] = \"ColorDodge\";\n  PdfBlendMode2[PdfBlendMode2[\"ColorBurn\"] = 7] = \"ColorBurn\";\n  PdfBlendMode2[PdfBlendMode2[\"HardLight\"] = 8] = \"HardLight\";\n  PdfBlendMode2[PdfBlendMode2[\"SoftLight\"] = 9] = \"SoftLight\";\n  PdfBlendMode2[PdfBlendMode2[\"Difference\"] = 10] = \"Difference\";\n  PdfBlendMode2[PdfBlendMode2[\"Exclusion\"] = 11] = \"Exclusion\";\n  PdfBlendMode2[PdfBlendMode2[\"Hue\"] = 12] = \"Hue\";\n  PdfBlendMode2[PdfBlendMode2[\"Saturation\"] = 13] = \"Saturation\";\n  PdfBlendMode2[PdfBlendMode2[\"Color\"] = 14] = \"Color\";\n  PdfBlendMode2[PdfBlendMode2[\"Luminosity\"] = 15] = \"Luminosity\";\n  return PdfBlendMode2;\n})(PdfBlendMode || {});\nvar MixedBlendMode = Symbol(\"mixed\");\nvar BLEND_MODE_INFOS = Object.freeze([\n  { id: 0 /* Normal */, label: \"Normal\", css: \"normal\" },\n  { id: 1 /* Multiply */, label: \"Multiply\", css: \"multiply\" },\n  { id: 2 /* Screen */, label: \"Screen\", css: \"screen\" },\n  { id: 3 /* Overlay */, label: \"Overlay\", css: \"overlay\" },\n  { id: 4 /* Darken */, label: \"Darken\", css: \"darken\" },\n  { id: 5 /* Lighten */, label: \"Lighten\", css: \"lighten\" },\n  { id: 6 /* ColorDodge */, label: \"Color Dodge\", css: \"color-dodge\" },\n  { id: 7 /* ColorBurn */, label: \"Color Burn\", css: \"color-burn\" },\n  { id: 8 /* HardLight */, label: \"Hard Light\", css: \"hard-light\" },\n  { id: 9 /* SoftLight */, label: \"Soft Light\", css: \"soft-light\" },\n  { id: 10 /* Difference */, label: \"Difference\", css: \"difference\" },\n  { id: 11 /* Exclusion */, label: \"Exclusion\", css: \"exclusion\" },\n  { id: 12 /* Hue */, label: \"Hue\", css: \"hue\" },\n  { id: 13 /* Saturation */, label: \"Saturation\", css: \"saturation\" },\n  { id: 14 /* Color */, label: \"Color\", css: \"color\" },\n  { id: 15 /* Luminosity */, label: \"Luminosity\", css: \"luminosity\" }\n]);\nvar enumToInfo = BLEND_MODE_INFOS.reduce(\n  (m, info) => {\n    m[info.id] = info;\n    return m;\n  },\n  {}\n);\nvar cssToEnum = BLEND_MODE_INFOS.reduce((m, info) => {\n  m[info.css] = info.id;\n  return m;\n}, {});\nfunction getBlendModeInfo(mode) {\n  return enumToInfo[mode] ?? enumToInfo[0 /* Normal */];\n}\nfunction blendModeToCss(mode) {\n  return getBlendModeInfo(mode).css;\n}\nfunction cssToBlendMode(value) {\n  return cssToEnum[value];\n}\nfunction blendModeLabel(mode) {\n  return getBlendModeInfo(mode).label;\n}\nfunction reduceBlendModes(modes) {\n  if (!modes.length) return 0 /* Normal */;\n  const first = modes[0];\n  return modes.every((m) => m === first) ? first : MixedBlendMode;\n}\nvar blendModeSelectOptions = BLEND_MODE_INFOS.map((info) => ({\n  value: info.id,\n  label: info.label\n}));\nfunction uiBlendModeDisplay(value) {\n  return value === MixedBlendMode ? \"(mixed)\" : blendModeLabel(value);\n}\nvar PdfActionType = /* @__PURE__ */ ((PdfActionType2) => {\n  PdfActionType2[PdfActionType2[\"Unsupported\"] = 0] = \"Unsupported\";\n  PdfActionType2[PdfActionType2[\"Goto\"] = 1] = \"Goto\";\n  PdfActionType2[PdfActionType2[\"RemoteGoto\"] = 2] = \"RemoteGoto\";\n  PdfActionType2[PdfActionType2[\"URI\"] = 3] = \"URI\";\n  PdfActionType2[PdfActionType2[\"LaunchAppOrOpenFile\"] = 4] = \"LaunchAppOrOpenFile\";\n  return PdfActionType2;\n})(PdfActionType || {});\nvar PdfAnnotationSubtype = /* @__PURE__ */ ((PdfAnnotationSubtype2) => {\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"TEXT\"] = 1] = \"TEXT\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"LINK\"] = 2] = \"LINK\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"FREETEXT\"] = 3] = \"FREETEXT\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"LINE\"] = 4] = \"LINE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"SQUARE\"] = 5] = \"SQUARE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"CIRCLE\"] = 6] = \"CIRCLE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"POLYGON\"] = 7] = \"POLYGON\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"POLYLINE\"] = 8] = \"POLYLINE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"HIGHLIGHT\"] = 9] = \"HIGHLIGHT\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"UNDERLINE\"] = 10] = \"UNDERLINE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"SQUIGGLY\"] = 11] = \"SQUIGGLY\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"STRIKEOUT\"] = 12] = \"STRIKEOUT\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"STAMP\"] = 13] = \"STAMP\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"CARET\"] = 14] = \"CARET\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"INK\"] = 15] = \"INK\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"POPUP\"] = 16] = \"POPUP\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"FILEATTACHMENT\"] = 17] = \"FILEATTACHMENT\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"SOUND\"] = 18] = \"SOUND\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"MOVIE\"] = 19] = \"MOVIE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"WIDGET\"] = 20] = \"WIDGET\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"SCREEN\"] = 21] = \"SCREEN\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"PRINTERMARK\"] = 22] = \"PRINTERMARK\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"TRAPNET\"] = 23] = \"TRAPNET\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"WATERMARK\"] = 24] = \"WATERMARK\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"THREED\"] = 25] = \"THREED\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"RICHMEDIA\"] = 26] = \"RICHMEDIA\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"XFAWIDGET\"] = 27] = \"XFAWIDGET\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"REDACT\"] = 28] = \"REDACT\";\n  return PdfAnnotationSubtype2;\n})(PdfAnnotationSubtype || {});\nvar PdfAnnotationSubtypeName = {\n  [0 /* UNKNOWN */]: \"unknow\",\n  [1 /* TEXT */]: \"text\",\n  [2 /* LINK */]: \"link\",\n  [3 /* FREETEXT */]: \"freetext\",\n  [4 /* LINE */]: \"line\",\n  [5 /* SQUARE */]: \"square\",\n  [6 /* CIRCLE */]: \"circle\",\n  [7 /* POLYGON */]: \"polygon\",\n  [8 /* POLYLINE */]: \"polyline\",\n  [9 /* HIGHLIGHT */]: \"highlight\",\n  [10 /* UNDERLINE */]: \"underline\",\n  [11 /* SQUIGGLY */]: \"squiggly\",\n  [12 /* STRIKEOUT */]: \"strikeout\",\n  [13 /* STAMP */]: \"stamp\",\n  [14 /* CARET */]: \"caret\",\n  [15 /* INK */]: \"ink\",\n  [16 /* POPUP */]: \"popup\",\n  [17 /* FILEATTACHMENT */]: \"fileattachment\",\n  [18 /* SOUND */]: \"sound\",\n  [19 /* MOVIE */]: \"movie\",\n  [20 /* WIDGET */]: \"widget\",\n  [21 /* SCREEN */]: \"screen\",\n  [22 /* PRINTERMARK */]: \"printermark\",\n  [23 /* TRAPNET */]: \"trapnet\",\n  [24 /* WATERMARK */]: \"watermark\",\n  [25 /* THREED */]: \"threed\",\n  [26 /* RICHMEDIA */]: \"richmedia\",\n  [27 /* XFAWIDGET */]: \"xfawidget\",\n  [28 /* REDACT */]: \"redact\"\n};\nvar PdfAnnotationObjectStatus = /* @__PURE__ */ ((PdfAnnotationObjectStatus2) => {\n  PdfAnnotationObjectStatus2[PdfAnnotationObjectStatus2[\"Created\"] = 0] = \"Created\";\n  PdfAnnotationObjectStatus2[PdfAnnotationObjectStatus2[\"Committed\"] = 1] = \"Committed\";\n  return PdfAnnotationObjectStatus2;\n})(PdfAnnotationObjectStatus || {});\nvar AppearanceMode = /* @__PURE__ */ ((AppearanceMode2) => {\n  AppearanceMode2[AppearanceMode2[\"Normal\"] = 0] = \"Normal\";\n  AppearanceMode2[AppearanceMode2[\"Rollover\"] = 1] = \"Rollover\";\n  AppearanceMode2[AppearanceMode2[\"Down\"] = 2] = \"Down\";\n  return AppearanceMode2;\n})(AppearanceMode || {});\nvar PdfAnnotationState = /* @__PURE__ */ ((PdfAnnotationState2) => {\n  PdfAnnotationState2[\"Marked\"] = \"Marked\";\n  PdfAnnotationState2[\"Unmarked\"] = \"Unmarked\";\n  PdfAnnotationState2[\"Accepted\"] = \"Accepted\";\n  PdfAnnotationState2[\"Rejected\"] = \"Rejected\";\n  PdfAnnotationState2[\"Complete\"] = \"Complete\";\n  PdfAnnotationState2[\"Cancelled\"] = \"Cancelled\";\n  PdfAnnotationState2[\"None\"] = \"None\";\n  return PdfAnnotationState2;\n})(PdfAnnotationState || {});\nvar PdfAnnotationStateModel = /* @__PURE__ */ ((PdfAnnotationStateModel2) => {\n  PdfAnnotationStateModel2[\"Marked\"] = \"Marked\";\n  PdfAnnotationStateModel2[\"Reviewed\"] = \"Reviewed\";\n  return PdfAnnotationStateModel2;\n})(PdfAnnotationStateModel || {});\nvar PDF_FORM_FIELD_TYPE = /* @__PURE__ */ ((PDF_FORM_FIELD_TYPE2) => {\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"PUSHBUTTON\"] = 1] = \"PUSHBUTTON\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"CHECKBOX\"] = 2] = \"CHECKBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"RADIOBUTTON\"] = 3] = \"RADIOBUTTON\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"COMBOBOX\"] = 4] = \"COMBOBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"LISTBOX\"] = 5] = \"LISTBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"TEXTFIELD\"] = 6] = \"TEXTFIELD\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"SIGNATURE\"] = 7] = \"SIGNATURE\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA\"] = 8] = \"XFA\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_CHECKBOX\"] = 9] = \"XFA_CHECKBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_COMBOBOX\"] = 10] = \"XFA_COMBOBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_IMAGEFIELD\"] = 11] = \"XFA_IMAGEFIELD\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_LISTBOX\"] = 12] = \"XFA_LISTBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_PUSHBUTTON\"] = 13] = \"XFA_PUSHBUTTON\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_SIGNATURE\"] = 14] = \"XFA_SIGNATURE\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_TEXTFIELD\"] = 15] = \"XFA_TEXTFIELD\";\n  return PDF_FORM_FIELD_TYPE2;\n})(PDF_FORM_FIELD_TYPE || {});\nvar PdfAnnotationColorType = /* @__PURE__ */ ((PdfAnnotationColorType2) => {\n  PdfAnnotationColorType2[PdfAnnotationColorType2[\"Color\"] = 0] = \"Color\";\n  PdfAnnotationColorType2[PdfAnnotationColorType2[\"InteriorColor\"] = 1] = \"InteriorColor\";\n  return PdfAnnotationColorType2;\n})(PdfAnnotationColorType || {});\nvar PdfAnnotationBorderStyle = /* @__PURE__ */ ((PdfAnnotationBorderStyle2) => {\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"SOLID\"] = 1] = \"SOLID\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"DASHED\"] = 2] = \"DASHED\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"BEVELED\"] = 3] = \"BEVELED\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"INSET\"] = 4] = \"INSET\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"UNDERLINE\"] = 5] = \"UNDERLINE\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"CLOUDY\"] = 6] = \"CLOUDY\";\n  return PdfAnnotationBorderStyle2;\n})(PdfAnnotationBorderStyle || {});\nvar PdfAnnotationFlags = /* @__PURE__ */ ((PdfAnnotationFlags2) => {\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"NONE\"] = 0] = \"NONE\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"INVISIBLE\"] = 1] = \"INVISIBLE\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"HIDDEN\"] = 2] = \"HIDDEN\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"PRINT\"] = 4] = \"PRINT\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"NO_ZOOM\"] = 8] = \"NO_ZOOM\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"NO_ROTATE\"] = 16] = \"NO_ROTATE\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"NO_VIEW\"] = 32] = \"NO_VIEW\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"READ_ONLY\"] = 64] = \"READ_ONLY\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"LOCKED\"] = 128] = \"LOCKED\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"TOGGLE_NOVIEW\"] = 256] = \"TOGGLE_NOVIEW\";\n  return PdfAnnotationFlags2;\n})(PdfAnnotationFlags || {});\nvar PDF_FORM_FIELD_FLAG = /* @__PURE__ */ ((PDF_FORM_FIELD_FLAG2) => {\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"NONE\"] = 0] = \"NONE\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"READONLY\"] = 1] = \"READONLY\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"REQUIRED\"] = 2] = \"REQUIRED\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"NOEXPORT\"] = 4] = \"NOEXPORT\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"TEXT_MULTIPLINE\"] = 4096] = \"TEXT_MULTIPLINE\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"TEXT_PASSWORD\"] = 8192] = \"TEXT_PASSWORD\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"CHOICE_COMBO\"] = 131072] = \"CHOICE_COMBO\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"CHOICE_EDIT\"] = 262144] = \"CHOICE_EDIT\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"CHOICE_MULTL_SELECT\"] = 2097152] = \"CHOICE_MULTL_SELECT\";\n  return PDF_FORM_FIELD_FLAG2;\n})(PDF_FORM_FIELD_FLAG || {});\nvar PdfPageObjectType = /* @__PURE__ */ ((PdfPageObjectType2) => {\n  PdfPageObjectType2[PdfPageObjectType2[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  PdfPageObjectType2[PdfPageObjectType2[\"TEXT\"] = 1] = \"TEXT\";\n  PdfPageObjectType2[PdfPageObjectType2[\"PATH\"] = 2] = \"PATH\";\n  PdfPageObjectType2[PdfPageObjectType2[\"IMAGE\"] = 3] = \"IMAGE\";\n  PdfPageObjectType2[PdfPageObjectType2[\"SHADING\"] = 4] = \"SHADING\";\n  PdfPageObjectType2[PdfPageObjectType2[\"FORM\"] = 5] = \"FORM\";\n  return PdfPageObjectType2;\n})(PdfPageObjectType || {});\nvar PdfAnnotationFlagName = Object.freeze({\n  [1 /* INVISIBLE */]: \"invisible\",\n  [2 /* HIDDEN */]: \"hidden\",\n  [4 /* PRINT */]: \"print\",\n  [8 /* NO_ZOOM */]: \"noZoom\",\n  [16 /* NO_ROTATE */]: \"noRotate\",\n  [32 /* NO_VIEW */]: \"noView\",\n  [64 /* READ_ONLY */]: \"readOnly\",\n  [128 /* LOCKED */]: \"locked\",\n  [256 /* TOGGLE_NOVIEW */]: \"toggleNoView\"\n});\nvar PdfAnnotationFlagValue = Object.entries(\n  PdfAnnotationFlagName\n).reduce(\n  (acc, [bit, name]) => {\n    acc[name] = Number(bit);\n    return acc;\n  },\n  {}\n);\nfunction flagsToNames(raw) {\n  return Object.keys(PdfAnnotationFlagName).filter((flag) => (raw & flag) !== 0).map((flag) => PdfAnnotationFlagName[flag]);\n}\nfunction namesToFlags(names) {\n  return names.reduce(\n    (mask, name) => mask | PdfAnnotationFlagValue[name],\n    0 /* NONE */\n  );\n}\nvar PdfSegmentObjectType = /* @__PURE__ */ ((PdfSegmentObjectType2) => {\n  PdfSegmentObjectType2[PdfSegmentObjectType2[\"UNKNOWN\"] = -1] = \"UNKNOWN\";\n  PdfSegmentObjectType2[PdfSegmentObjectType2[\"LINETO\"] = 0] = \"LINETO\";\n  PdfSegmentObjectType2[PdfSegmentObjectType2[\"BEZIERTO\"] = 1] = \"BEZIERTO\";\n  PdfSegmentObjectType2[PdfSegmentObjectType2[\"MOVETO\"] = 2] = \"MOVETO\";\n  return PdfSegmentObjectType2;\n})(PdfSegmentObjectType || {});\nvar PdfEngineFeature = /* @__PURE__ */ ((PdfEngineFeature2) => {\n  PdfEngineFeature2[PdfEngineFeature2[\"RenderPage\"] = 0] = \"RenderPage\";\n  PdfEngineFeature2[PdfEngineFeature2[\"RenderPageRect\"] = 1] = \"RenderPageRect\";\n  PdfEngineFeature2[PdfEngineFeature2[\"Thumbnails\"] = 2] = \"Thumbnails\";\n  PdfEngineFeature2[PdfEngineFeature2[\"Bookmarks\"] = 3] = \"Bookmarks\";\n  PdfEngineFeature2[PdfEngineFeature2[\"Annotations\"] = 4] = \"Annotations\";\n  return PdfEngineFeature2;\n})(PdfEngineFeature || {});\nvar PdfEngineOperation = /* @__PURE__ */ ((PdfEngineOperation2) => {\n  PdfEngineOperation2[PdfEngineOperation2[\"Create\"] = 0] = \"Create\";\n  PdfEngineOperation2[PdfEngineOperation2[\"Read\"] = 1] = \"Read\";\n  PdfEngineOperation2[PdfEngineOperation2[\"Update\"] = 2] = \"Update\";\n  PdfEngineOperation2[PdfEngineOperation2[\"Delete\"] = 3] = \"Delete\";\n  return PdfEngineOperation2;\n})(PdfEngineOperation || {});\nvar MatchFlag = /* @__PURE__ */ ((MatchFlag2) => {\n  MatchFlag2[MatchFlag2[\"None\"] = 0] = \"None\";\n  MatchFlag2[MatchFlag2[\"MatchCase\"] = 1] = \"MatchCase\";\n  MatchFlag2[MatchFlag2[\"MatchWholeWord\"] = 2] = \"MatchWholeWord\";\n  MatchFlag2[MatchFlag2[\"MatchConsecutive\"] = 4] = \"MatchConsecutive\";\n  return MatchFlag2;\n})(MatchFlag || {});\nfunction unionFlags(flags) {\n  return flags.reduce((flag, currFlag) => {\n    return flag | currFlag;\n  }, 0 /* None */);\n}\nfunction compareSearchTarget(targetA, targetB) {\n  const flagA = unionFlags(targetA.flags);\n  const flagB = unionFlags(targetB.flags);\n  return flagA === flagB && targetA.keyword === targetB.keyword;\n}\nvar PdfPermission = /* @__PURE__ */ ((PdfPermission2) => {\n  PdfPermission2[PdfPermission2[\"PrintDocument\"] = 8] = \"PrintDocument\";\n  PdfPermission2[PdfPermission2[\"ModifyContent\"] = 16] = \"ModifyContent\";\n  PdfPermission2[PdfPermission2[\"CopyOrExtract\"] = 32] = \"CopyOrExtract\";\n  PdfPermission2[PdfPermission2[\"AddOrModifyTextAnnot\"] = 64] = \"AddOrModifyTextAnnot\";\n  PdfPermission2[PdfPermission2[\"FillInExistingForm\"] = 512] = \"FillInExistingForm\";\n  PdfPermission2[PdfPermission2[\"ExtractTextOrGraphics\"] = 1024] = \"ExtractTextOrGraphics\";\n  PdfPermission2[PdfPermission2[\"AssembleDocument\"] = 2048] = \"AssembleDocument\";\n  PdfPermission2[PdfPermission2[\"PrintHighQuality\"] = 4096] = \"PrintHighQuality\";\n  return PdfPermission2;\n})(PdfPermission || {});\nvar PdfPageFlattenFlag = /* @__PURE__ */ ((PdfPageFlattenFlag2) => {\n  PdfPageFlattenFlag2[PdfPageFlattenFlag2[\"Display\"] = 0] = \"Display\";\n  PdfPageFlattenFlag2[PdfPageFlattenFlag2[\"Print\"] = 1] = \"Print\";\n  return PdfPageFlattenFlag2;\n})(PdfPageFlattenFlag || {});\nvar PdfPageFlattenResult = /* @__PURE__ */ ((PdfPageFlattenResult2) => {\n  PdfPageFlattenResult2[PdfPageFlattenResult2[\"Fail\"] = 0] = \"Fail\";\n  PdfPageFlattenResult2[PdfPageFlattenResult2[\"Success\"] = 1] = \"Success\";\n  PdfPageFlattenResult2[PdfPageFlattenResult2[\"NothingToDo\"] = 2] = \"NothingToDo\";\n  return PdfPageFlattenResult2;\n})(PdfPageFlattenResult || {});\nvar PdfErrorCode = /* @__PURE__ */ ((PdfErrorCode2) => {\n  PdfErrorCode2[PdfErrorCode2[\"Ok\"] = 0] = \"Ok\";\n  PdfErrorCode2[PdfErrorCode2[\"Unknown\"] = 1] = \"Unknown\";\n  PdfErrorCode2[PdfErrorCode2[\"NotFound\"] = 2] = \"NotFound\";\n  PdfErrorCode2[PdfErrorCode2[\"WrongFormat\"] = 3] = \"WrongFormat\";\n  PdfErrorCode2[PdfErrorCode2[\"Password\"] = 4] = \"Password\";\n  PdfErrorCode2[PdfErrorCode2[\"Security\"] = 5] = \"Security\";\n  PdfErrorCode2[PdfErrorCode2[\"PageError\"] = 6] = \"PageError\";\n  PdfErrorCode2[PdfErrorCode2[\"XFALoad\"] = 7] = \"XFALoad\";\n  PdfErrorCode2[PdfErrorCode2[\"XFALayout\"] = 8] = \"XFALayout\";\n  PdfErrorCode2[PdfErrorCode2[\"Cancelled\"] = 9] = \"Cancelled\";\n  PdfErrorCode2[PdfErrorCode2[\"Initialization\"] = 10] = \"Initialization\";\n  PdfErrorCode2[PdfErrorCode2[\"NotReady\"] = 11] = \"NotReady\";\n  PdfErrorCode2[PdfErrorCode2[\"NotSupport\"] = 12] = \"NotSupport\";\n  PdfErrorCode2[PdfErrorCode2[\"LoadDoc\"] = 13] = \"LoadDoc\";\n  PdfErrorCode2[PdfErrorCode2[\"DocNotOpen\"] = 14] = \"DocNotOpen\";\n  PdfErrorCode2[PdfErrorCode2[\"CantCloseDoc\"] = 15] = \"CantCloseDoc\";\n  PdfErrorCode2[PdfErrorCode2[\"CantCreateNewDoc\"] = 16] = \"CantCreateNewDoc\";\n  PdfErrorCode2[PdfErrorCode2[\"CantImportPages\"] = 17] = \"CantImportPages\";\n  PdfErrorCode2[PdfErrorCode2[\"CantCreateAnnot\"] = 18] = \"CantCreateAnnot\";\n  PdfErrorCode2[PdfErrorCode2[\"CantSetAnnotRect\"] = 19] = \"CantSetAnnotRect\";\n  PdfErrorCode2[PdfErrorCode2[\"CantSetAnnotContent\"] = 20] = \"CantSetAnnotContent\";\n  PdfErrorCode2[PdfErrorCode2[\"CantRemoveInkList\"] = 21] = \"CantRemoveInkList\";\n  PdfErrorCode2[PdfErrorCode2[\"CantAddInkStoke\"] = 22] = \"CantAddInkStoke\";\n  PdfErrorCode2[PdfErrorCode2[\"CantReadAttachmentSize\"] = 23] = \"CantReadAttachmentSize\";\n  PdfErrorCode2[PdfErrorCode2[\"CantReadAttachmentContent\"] = 24] = \"CantReadAttachmentContent\";\n  PdfErrorCode2[PdfErrorCode2[\"CantFocusAnnot\"] = 25] = \"CantFocusAnnot\";\n  PdfErrorCode2[PdfErrorCode2[\"CantSelectText\"] = 26] = \"CantSelectText\";\n  PdfErrorCode2[PdfErrorCode2[\"CantSelectOption\"] = 27] = \"CantSelectOption\";\n  PdfErrorCode2[PdfErrorCode2[\"CantCheckField\"] = 28] = \"CantCheckField\";\n  return PdfErrorCode2;\n})(PdfErrorCode || {});\nvar PdfTaskHelper = class {\n  /**\n   * Create a task\n   * @returns new task\n   */\n  static create() {\n    return new Task();\n  }\n  /**\n   * Create a task that has been resolved with value\n   * @param result - resolved value\n   * @returns resolved task\n   */\n  static resolve(result) {\n    const task = new Task();\n    task.resolve(result);\n    return task;\n  }\n  /**\n   * Create a task that has been rejected with error\n   * @param reason - rejected error\n   * @returns rejected task\n   */\n  static reject(reason) {\n    const task = new Task();\n    task.reject(reason);\n    return task;\n  }\n  /**\n   * Create a task that has been aborted with error\n   * @param reason - aborted error\n   * @returns aborted task\n   */\n  static abort(reason) {\n    const task = new Task();\n    task.reject(reason);\n    return task;\n  }\n};\n\n// src/color.ts\nfunction pdfAlphaColorToWebAlphaColor(c) {\n  const clamp = (n) => Math.max(0, Math.min(255, n));\n  const toHex = (n) => clamp(n).toString(16).padStart(2, \"0\");\n  const color = `#${toHex(c.red)}${toHex(c.green)}${toHex(c.blue)}`;\n  const opacity = clamp(c.alpha) / 255;\n  return { color, opacity };\n}\nfunction webAlphaColorToPdfAlphaColor({ color, opacity }) {\n  if (/^#?[0-9a-f]{3}$/i.test(color)) {\n    color = color.replace(/^#?([0-9a-f])([0-9a-f])([0-9a-f])$/i, \"#$1$1$2$2$3$3\").toLowerCase();\n  }\n  const [, r, g, b] = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(color) ?? (() => {\n    throw new Error(`Invalid hex colour: \\u201C${color}\\u201D`);\n  })();\n  const clamp = (n, hi = 255) => Math.max(0, Math.min(hi, n));\n  return {\n    red: parseInt(r, 16),\n    green: parseInt(g, 16),\n    blue: parseInt(b, 16),\n    alpha: clamp(Math.round(opacity * 255))\n  };\n}\n\n// src/date.ts\nfunction pdfDateToDate(pdf) {\n  if (!pdf?.startsWith(\"D:\") || pdf.length < 16) return;\n  const y = +pdf.slice(2, 6);\n  const mo = +pdf.slice(6, 8) - 1;\n  const d = +pdf.slice(8, 10);\n  const H = +pdf.slice(10, 12);\n  const M = +pdf.slice(12, 14);\n  const S = +pdf.slice(14, 16);\n  return new Date(Date.UTC(y, mo, d, H, M, S));\n}\nfunction dateToPdfDate(date = /* @__PURE__ */ new Date()) {\n  const z = (n, len = 2) => n.toString().padStart(len, \"0\");\n  const YYYY = date.getUTCFullYear();\n  const MM = z(date.getUTCMonth() + 1);\n  const DD = z(date.getUTCDate());\n  const HH = z(date.getUTCHours());\n  const mm = z(date.getUTCMinutes());\n  const SS = z(date.getUTCSeconds());\n  return `D:${YYYY}${MM}${DD}${HH}${mm}${SS}`;\n}\n\n// src/index.ts\nfunction ignore() {\n}\nexport {\n  AllLogger,\n  AppearanceMode,\n  ConsoleLogger,\n  LevelLogger,\n  LogLevel,\n  MatchFlag,\n  MixedBlendMode,\n  NoopLogger,\n  PDF_FORM_FIELD_FLAG,\n  PDF_FORM_FIELD_TYPE,\n  PdfActionType,\n  PdfAnnotationBorderStyle,\n  PdfAnnotationColorType,\n  PdfAnnotationFlagName,\n  PdfAnnotationFlags,\n  PdfAnnotationObjectStatus,\n  PdfAnnotationState,\n  PdfAnnotationStateModel,\n  PdfAnnotationSubtype,\n  PdfAnnotationSubtypeName,\n  PdfBlendMode,\n  PdfBomOrZwnbsp,\n  PdfEngineFeature,\n  PdfEngineOperation,\n  PdfErrorCode,\n  PdfNonCharacterFFFE,\n  PdfNonCharacterFFFF,\n  PdfPageFlattenFlag,\n  PdfPageFlattenResult,\n  PdfPageObjectType,\n  PdfPermission,\n  PdfSegmentObjectType,\n  PdfSoftHyphenMarker,\n  PdfTaskHelper,\n  PdfUnwantedTextMarkers,\n  PdfUnwantedTextRegex,\n  PdfWordJoiner,\n  PdfZeroWidthSpace,\n  PdfZoomMode,\n  PerfLogger,\n  Rotation,\n  Task,\n  TaskAbortedError,\n  TaskRejectedError,\n  TaskStage,\n  blendModeLabel,\n  blendModeSelectOptions,\n  blendModeToCss,\n  boundingRect,\n  calculateAngle,\n  calculateDegree,\n  compareSearchTarget,\n  cssToBlendMode,\n  dateToPdfDate,\n  flagsToNames,\n  getBlendModeInfo,\n  ignore,\n  makeMatrix,\n  namesToFlags,\n  pdfAlphaColorToWebAlphaColor,\n  pdfDateToDate,\n  quadToRect,\n  rectToQuad,\n  reduceBlendModes,\n  restoreOffset,\n  restorePosition,\n  restoreRect,\n  rotatePosition,\n  rotateRect,\n  scalePosition,\n  scaleRect,\n  stripPdfUnwantedMarkers,\n  swap,\n  toIntPos,\n  toIntRect,\n  toIntSize,\n  transformPosition,\n  transformRect,\n  transformSize,\n  uiBlendModeDisplay,\n  unionFlags,\n  webAlphaColorToPdfAlphaColor\n};\n//# sourceMappingURL=index.js.map","import { PdfDocumentObject, PdfPageObject, Rotation } from '@embedpdf/models';\nimport { PluginRegistryConfig } from '../types/plugin';\n\nexport interface CoreState {\n  scale: number;\n  rotation: Rotation;\n  document: PdfDocumentObject | null;\n  pages: PdfPageObject[][];\n  loading: boolean;\n  error: string | null;\n}\n\nexport const initialCoreState: (config?: PluginRegistryConfig) => CoreState = (config) => ({\n  scale: config?.scale ?? 1,\n  rotation: config?.rotation ?? Rotation.Degree0,\n  document: null,\n  pages: [],\n  loading: false,\n  error: null,\n});\n","import { Reducer } from './types';\nimport { CoreState } from './initial-state';\nimport {\n  CoreAction,\n  LOAD_DOCUMENT,\n  SET_DOCUMENT,\n  SET_DOCUMENT_ERROR,\n  SET_PAGES,\n  SET_ROTATION,\n  SET_SCALE,\n} from './actions';\n\nexport const coreReducer: Reducer<CoreState, CoreAction> = (state, action): CoreState => {\n  switch (action.type) {\n    case LOAD_DOCUMENT:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n\n    case SET_DOCUMENT:\n      return {\n        ...state,\n        document: action.payload,\n        pages: action.payload.pages.map((page) => [page]),\n        loading: false,\n        error: null,\n      };\n\n    case SET_ROTATION:\n      return {\n        ...state,\n        rotation: action.payload,\n      };\n\n    case SET_PAGES:\n      return {\n        ...state,\n        pages: action.payload,\n      };\n\n    case SET_DOCUMENT_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n\n    case SET_SCALE:\n      return {\n        ...state,\n        scale: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { DependencyResolver } from '../utils/dependency-resolver';\nimport {\n  IPlugin,\n  PluginBatchRegistration,\n  PluginManifest,\n  PluginStatus,\n  PluginPackage,\n  PluginRegistryConfig,\n} from '../types/plugin';\nimport {\n  PluginRegistrationError,\n  PluginNotFoundError,\n  CircularDependencyError,\n  CapabilityNotFoundError,\n  PluginConfigurationError,\n} from '../types/errors';\nimport { ignore, PdfEngine, Rotation } from '@embedpdf/models';\nimport { Action, CoreState, Store, initialCoreState, Reducer } from '../store';\nimport { CoreAction } from '../store/actions';\nimport { coreReducer } from '../store/reducer';\n\n// Define a more flexible generic type for plugin registrations\ninterface PluginRegistration {\n  // Use existential types for the plugin package to allow accepting any plugin type\n  package: PluginPackage<any, any, any, any>;\n  config?: any;\n}\n\nexport class PluginRegistry {\n  private plugins: Map<string, IPlugin> = new Map();\n  private manifests: Map<string, PluginManifest> = new Map();\n  private capabilities: Map<string, string> = new Map(); // capability -> pluginId\n  private status: Map<string, PluginStatus> = new Map();\n  private resolver: DependencyResolver;\n  private configurations: Map<string, unknown> = new Map();\n  private engine: PdfEngine;\n  private engineInitialized = false;\n  private store: Store<CoreState, CoreAction>;\n  private initPromise: Promise<void> | null = null;\n\n  private pendingRegistrations: PluginRegistration[] = [];\n  private processingRegistrations: PluginRegistration[] = [];\n  private initialized = false;\n  private isInitializing = false;\n  private initialCoreState: CoreState;\n  private pluginsReadyPromise: Promise<void> | null = null;\n  private destroyed = false;\n\n  constructor(engine: PdfEngine, config?: PluginRegistryConfig) {\n    this.resolver = new DependencyResolver();\n    this.engine = engine;\n    this.initialCoreState = initialCoreState(config);\n    this.store = new Store<CoreState, CoreAction>(coreReducer, this.initialCoreState);\n  }\n\n  /**\n   * Ensure engine is initialized before proceeding\n   */\n  private async ensureEngineInitialized(): Promise<void> {\n    if (this.engineInitialized) {\n      return;\n    }\n\n    if (this.engine.initialize) {\n      const task = this.engine.initialize();\n      await task.toPromise();\n      this.engineInitialized = true;\n    } else {\n      this.engineInitialized = true;\n    }\n  }\n\n  /**\n   * Register a plugin without initializing it\n   */\n  registerPlugin<\n    TPlugin extends IPlugin<TConfig>,\n    TConfig = unknown,\n    TState = unknown,\n    TAction extends Action = Action,\n  >(\n    pluginPackage: PluginPackage<TPlugin, TConfig, TState, TAction>,\n    config?: Partial<TConfig>,\n  ): void {\n    if (this.initialized && !this.isInitializing) {\n      throw new PluginRegistrationError('Cannot register plugins after initialization');\n    }\n\n    this.validateManifest(pluginPackage.manifest);\n\n    // Use appropriate typing for store methods\n    this.store.addPluginReducer(\n      pluginPackage.manifest.id,\n      // We need one type assertion here since we can't fully reconcile TAction with Action\n      // due to TypeScript's type system limitations with generic variance\n      pluginPackage.reducer as Reducer<TState, Action>,\n      'function' === typeof pluginPackage.initialState\n        ? (pluginPackage.initialState as (coreState: CoreState, config: TConfig) => TState)(\n            this.initialCoreState,\n            {\n              ...pluginPackage.manifest.defaultConfig,\n              ...config,\n            },\n          )\n        : pluginPackage.initialState,\n    );\n\n    this.pendingRegistrations.push({\n      package: pluginPackage,\n      config,\n    });\n  }\n\n  /**\n   * Get the central store instance\n   */\n  getStore(): Store<CoreState, CoreAction> {\n    return this.store;\n  }\n\n  /**\n   * Get the engine instance\n   */\n  getEngine(): PdfEngine {\n    return this.engine;\n  }\n\n  /**\n   * Get a promise that resolves when all plugins are ready\n   */\n  public pluginsReady(): Promise<void> {\n    // Re-use the same promise every time itâ€™s asked for\n    if (this.pluginsReadyPromise) {\n      return this.pluginsReadyPromise;\n    }\n\n    // Build the promise the *first* time itâ€™s requested\n    this.pluginsReadyPromise = (async () => {\n      // 1. Wait until the registry itself has finished initialising\n      if (!this.initialized) {\n        await this.initialize();\n      }\n\n      // 2. Wait for every pluginâ€™s ready() promise (if it has one)\n      const readyPromises = Array.from(this.plugins.values()).map((p) =>\n        typeof p.ready === 'function' ? p.ready() : Promise.resolve(),\n      );\n\n      await Promise.all(readyPromises); // resolves when the slowest is done\n    })();\n\n    return this.pluginsReadyPromise;\n  }\n\n  /**\n   * INITIALISE THE REGISTRY â€“ runs once no-matter-how-many calls   *\n   */\n  async initialize(): Promise<void> {\n    if (this.destroyed) {\n      throw new PluginRegistrationError('Registry has been destroyed');\n    }\n\n    // If an initialisation is already in-flight (or finished)\n    // return the very same promise so callers can await it.\n    if (this.initPromise) {\n      return this.initPromise;\n    }\n\n    // Wrap your existing body in a single promise and cache it\n    this.initPromise = (async () => {\n      if (this.initialized) {\n        throw new PluginRegistrationError('Registry is already initialized');\n      }\n\n      this.isInitializing = true;\n\n      try {\n        /* ---------------- original body starts ------------------ */\n        await this.ensureEngineInitialized();\n        // Check if destroyed after engine initialization\n        if (this.destroyed) {\n          return;\n        }\n\n        while (this.pendingRegistrations.length > 0) {\n          // Check if destroyed before processing each batch\n          if (this.destroyed) {\n            return;\n          }\n          this.processingRegistrations = [...this.pendingRegistrations];\n          this.pendingRegistrations = [];\n\n          for (const reg of this.processingRegistrations) {\n            const dependsOn = new Set<string>();\n            const allDeps = [...reg.package.manifest.requires, ...reg.package.manifest.optional];\n            for (const cap of allDeps) {\n              const provider = this.processingRegistrations.find((r) =>\n                r.package.manifest.provides.includes(cap),\n              );\n              if (provider) dependsOn.add(provider.package.manifest.id);\n            }\n            this.resolver.addNode(reg.package.manifest.id, [...dependsOn]);\n          }\n\n          const loadOrder = this.resolver.resolveLoadOrder();\n          for (const id of loadOrder) {\n            const reg = this.processingRegistrations.find((r) => r.package.manifest.id === id)!;\n            await this.initializePlugin(reg.package.manifest, reg.package.create, reg.config);\n          }\n\n          this.processingRegistrations = [];\n          this.resolver = new DependencyResolver();\n        }\n\n        for (const plugin of this.plugins.values()) {\n          await plugin.postInitialize?.().catch((e) => {\n            console.error(`Error in postInitialize for plugin ${plugin.id}`, e);\n            this.status.set(plugin.id, 'error');\n          });\n        }\n\n        this.initialized = true;\n        /* ----------------- original body ends ------------------- */\n      } catch (err) {\n        if (err instanceof Error) {\n          throw new CircularDependencyError(\n            `Failed to resolve plugin dependencies: ${err.message}`,\n          );\n        }\n        throw err;\n      } finally {\n        this.isInitializing = false;\n      }\n    })();\n\n    return this.initPromise;\n  }\n\n  /**\n   * Initialize a single plugin with all necessary checks\n   */\n  private async initializePlugin<TConfig>(\n    manifest: PluginManifest<TConfig>,\n    packageCreator: (\n      registry: PluginRegistry,\n      engine: PdfEngine,\n      config?: TConfig,\n    ) => IPlugin<TConfig>,\n    config?: Partial<TConfig>,\n  ): Promise<void> {\n    const finalConfig = {\n      ...manifest.defaultConfig,\n      ...config,\n    };\n\n    this.validateConfig(manifest.id, finalConfig, manifest.defaultConfig);\n\n    // Create plugin instance during initialization\n    const plugin = packageCreator(this, this.engine, finalConfig);\n    this.validatePlugin(plugin);\n\n    // Verify all required capabilities are available\n    for (const capability of manifest.requires) {\n      if (!this.capabilities.has(capability)) {\n        throw new PluginRegistrationError(\n          `Missing required capability: ${capability} for plugin ${manifest.id}`,\n        );\n      }\n    }\n\n    // Optional capabilities can be null, so we don't throw errors for them\n    for (const capability of manifest.optional) {\n      if (this.capabilities.has(capability)) {\n        // Optional capability is available, but we don't require it\n        console.debug(`Optional capability ${capability} is available for plugin ${manifest.id}`);\n      }\n    }\n\n    console.log('initializePlugin', manifest.id, manifest.provides);\n\n    // Register provided capabilities\n    for (const capability of manifest.provides) {\n      if (this.capabilities.has(capability)) {\n        throw new PluginRegistrationError(\n          `Capability ${capability} is already provided by plugin ${this.capabilities.get(capability)}`,\n        );\n      }\n      this.capabilities.set(capability, manifest.id);\n    }\n\n    // Store plugin and manifest\n    this.plugins.set(manifest.id, plugin);\n    this.manifests.set(manifest.id, manifest);\n    this.status.set(manifest.id, 'registered');\n    this.configurations.set(manifest.id, finalConfig);\n\n    try {\n      if (plugin.initialize) {\n        await plugin.initialize(finalConfig);\n      }\n      this.status.set(manifest.id, 'active');\n    } catch (error) {\n      // Cleanup on initialization failure\n      this.plugins.delete(manifest.id);\n      this.manifests.delete(manifest.id);\n      console.log('initializePlugin failed', manifest.id, manifest.provides);\n      manifest.provides.forEach((cap) => this.capabilities.delete(cap));\n      throw error;\n    }\n  }\n\n  getPluginConfig<TConfig>(pluginId: string): TConfig {\n    const config = this.configurations.get(pluginId);\n    if (!config) {\n      throw new PluginNotFoundError(`Configuration for plugin ${pluginId} not found`);\n    }\n    return config as TConfig;\n  }\n\n  private validateConfig(pluginId: string, config: unknown, defaultConfig: unknown): void {\n    // Check all required fields exist\n    const requiredKeys = Object.keys(defaultConfig as object);\n    const missingKeys = requiredKeys.filter((key) => !(config as object).hasOwnProperty(key));\n\n    if (missingKeys.length > 0) {\n      throw new PluginConfigurationError(\n        `Missing required configuration keys for plugin ${pluginId}: ${missingKeys.join(', ')}`,\n      );\n    }\n\n    // You could add more validation here:\n    // - Type checking\n    // - Value range validation\n    // - Format validation\n    // etc.\n  }\n\n  async updatePluginConfig<TConfig>(pluginId: string, config: Partial<TConfig>): Promise<void> {\n    const plugin = this.getPlugin(pluginId);\n\n    if (!plugin) {\n      throw new PluginNotFoundError(`Plugin ${pluginId} not found`);\n    }\n\n    const manifest = this.manifests.get(pluginId);\n    const currentConfig = this.configurations.get(pluginId);\n\n    if (!manifest || !currentConfig) {\n      throw new PluginNotFoundError(`Plugin ${pluginId} not found`);\n    }\n\n    // Merge new config with current\n    const newConfig = {\n      ...currentConfig,\n      ...config,\n    };\n\n    // Validate new configuration\n    this.validateConfig(pluginId, newConfig, manifest.defaultConfig);\n\n    // Store new configuration\n    this.configurations.set(pluginId, newConfig);\n\n    // Reinitialize plugin if needed\n    if (plugin.initialize) {\n      await plugin.initialize(newConfig);\n    }\n  }\n\n  /**\n   * Register multiple plugins at once\n   */\n  registerPluginBatch(registrations: PluginBatchRegistration<IPlugin<any>, any, any, any>[]): void {\n    for (const reg of registrations) {\n      this.registerPlugin(reg.package, reg.config);\n    }\n  }\n\n  /**\n   * Unregister a plugin\n   */\n  async unregisterPlugin(pluginId: string): Promise<void> {\n    const plugin = this.plugins.get(pluginId);\n    if (!plugin) {\n      throw new PluginNotFoundError(`Plugin ${pluginId} is not registered`);\n    }\n\n    const manifest = this.manifests.get(pluginId);\n    if (!manifest) {\n      throw new PluginNotFoundError(`Manifest for plugin ${pluginId} not found`);\n    }\n\n    // Check if any other plugins depend on this one\n    for (const [otherId, otherManifest] of this.manifests.entries()) {\n      if (otherId === pluginId) continue;\n\n      const dependsOnThis = [...otherManifest.requires, ...otherManifest.optional].some((cap) =>\n        manifest.provides.includes(cap),\n      );\n\n      if (dependsOnThis) {\n        throw new PluginRegistrationError(\n          `Cannot unregister plugin ${pluginId}: plugin ${otherId} depends on it`,\n        );\n      }\n    }\n\n    // Cleanup plugin\n    try {\n      if (plugin.destroy) {\n        await plugin.destroy();\n      }\n\n      // Remove capabilities\n      for (const capability of manifest.provides) {\n        this.capabilities.delete(capability);\n      }\n\n      // Remove plugin and manifest\n      this.plugins.delete(pluginId);\n      this.manifests.delete(pluginId);\n      this.status.delete(pluginId);\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Failed to unregister plugin ${pluginId}: ${error.message}`);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Get a plugin instance\n   * @param pluginId The ID of the plugin to get\n   * @returns The plugin instance or null if not found\n   */\n  getPlugin<T extends IPlugin>(pluginId: string): T | null {\n    const plugin = this.plugins.get(pluginId);\n    if (!plugin) {\n      return null;\n    }\n    return plugin as T;\n  }\n\n  /**\n   * Get a plugin that provides a specific capability\n   * @param capability The capability to get a provider for\n   * @returns The plugin providing the capability or null if not found\n   */\n  getCapabilityProvider(capability: string): IPlugin | null {\n    const pluginId = this.capabilities.get(capability);\n    if (!pluginId) {\n      return null;\n    }\n    return this.getPlugin(pluginId);\n  }\n\n  /**\n   * Check if a capability is available\n   */\n  hasCapability(capability: string): boolean {\n    return this.capabilities.has(capability);\n  }\n\n  /**\n   * Get all registered plugins\n   */\n  getAllPlugins(): IPlugin[] {\n    return Array.from(this.plugins.values());\n  }\n\n  /**\n   * Get plugin status\n   */\n  getPluginStatus(pluginId: string): PluginStatus {\n    const status = this.status.get(pluginId);\n    if (!status) {\n      throw new PluginNotFoundError(`Plugin ${pluginId} not found`);\n    }\n    return status;\n  }\n\n  /**\n   * Validate plugin object\n   */\n  private validatePlugin(plugin: IPlugin): void {\n    if (!plugin.id) {\n      throw new PluginRegistrationError('Plugin must have an id');\n    }\n  }\n\n  /**\n   * Validate plugin manifest\n   */\n  private validateManifest(manifest: PluginManifest): void {\n    if (!manifest.id) {\n      throw new PluginRegistrationError('Manifest must have an id');\n    }\n    if (!manifest.name) {\n      throw new PluginRegistrationError('Manifest must have a name');\n    }\n    if (!manifest.version) {\n      throw new PluginRegistrationError('Manifest must have a version');\n    }\n    if (!Array.isArray(manifest.provides)) {\n      throw new PluginRegistrationError('Manifest must have a provides array');\n    }\n    if (!Array.isArray(manifest.requires)) {\n      throw new PluginRegistrationError('Manifest must have a requires array');\n    }\n    if (!Array.isArray(manifest.optional)) {\n      throw new PluginRegistrationError('Manifest must have an optional array');\n    }\n  }\n\n  isDestroyed(): boolean {\n    return this.destroyed;\n  }\n\n  /**\n   * DESTROY EVERYTHING â€“ waits for any ongoing initialise(), once  *\n   */\n  async destroy(): Promise<void> {\n    if (this.destroyed) throw new PluginRegistrationError('Registry has already been destroyed');\n    this.destroyed = true;\n\n    // If initialisation is still underway, wait (success OR failure)\n    try {\n      await this.initPromise;\n    } catch {\n      /* ignore â€“ still need to clean up */\n    }\n\n    /* ------- original teardown, unchanged except the guard ------ */\n    for (const plugin of Array.from(this.plugins.values()).reverse()) {\n      await plugin.destroy?.();\n    }\n\n    this.store.destroy();\n\n    this.plugins.clear();\n    this.manifests.clear();\n    this.capabilities.clear();\n    this.status.clear();\n    this.pendingRegistrations.length = 0;\n    this.processingRegistrations.length = 0;\n  }\n}\n","/**\n * Restrict a numeric value to the inclusive rangeÂ [min,Â max].\n *\n * @example\n *   clamp( 5, 0, 10)  // 5\n *   clamp(-3, 0, 10)  // 0\n *   clamp(17, 0, 10)  // 10\n */\nexport function clamp(value: number, min: number, max: number): number {\n  return value < min ? min : value > max ? max : value;\n}\n\n/**\n * Deeply compares two values (objects, arrays, primitives)\n * with the following rules:\n *  - Objects are compared ignoring property order.\n *  - Arrays are compared ignoring element order (multiset comparison).\n *  - Primitives are compared by strict equality.\n *  - null/undefined are treated as normal primitives.\n *\n * @param a First value\n * @param b Second value\n * @param visited Used internally to detect cycles\n */\nexport function arePropsEqual(a: any, b: any, visited?: Set<any>): boolean {\n  // Quick path for reference equality or same primitive\n  if (a === b) {\n    return true;\n  }\n\n  // Handle null/undefined mismatch\n  if (a == null || b == null) {\n    // If one is null/undefined and the other isn't, no match\n    return a === b;\n  }\n\n  // Check types\n  const aType = typeof a;\n  const bType = typeof b;\n  if (aType !== bType) return false;\n\n  // If they are both objects or arrays, handle recursively\n  if (aType === 'object') {\n    // Optionally handle cyclical references\n    if (!visited) visited = new Set();\n    const pairId = getPairId(a, b);\n    if (visited.has(pairId)) {\n      // Already compared these two objects => assume true to avoid infinite recursion\n      // or return false if you want to treat cycles as inequality\n      return true;\n    }\n    visited.add(pairId);\n\n    const aIsArray = Array.isArray(a);\n    const bIsArray = Array.isArray(b);\n    if (aIsArray && bIsArray) {\n      // Compare as arrays ignoring order\n      return arraysEqualUnordered(a, b, visited);\n    } else if (!aIsArray && !bIsArray) {\n      // Compare as plain objects (order of properties doesn't matter)\n      return objectsEqual(a, b, visited);\n    } else {\n      // One is array, the other is object => not equal\n      return false;\n    }\n  }\n\n  // If both are function, symbol, etc. - typically we might say false\n  // But you can decide your own logic for function or symbol equality\n  return false;\n}\n\nfunction getPairId(a: any, b: any) {\n  // Could do something more advanced. This is a cheap approach:\n  // e.g. use the memory reference or an object identity approach\n  return `${objectId(a)}__${objectId(b)}`;\n}\n\n/**\n * If you want stable object IDs, you'd need a WeakMap to store them.\n * This simplistic approach just calls toString on the object.\n */\nlet objectIdCounter = 0;\nconst objectIds = new WeakMap<object, number>();\n\nfunction objectId(obj: object): number {\n  if (!objectIds.has(obj)) {\n    objectIds.set(obj, ++objectIdCounter);\n  }\n  return objectIds.get(obj)!;\n}\n\nfunction arraysEqualUnordered(a: any[], b: any[], visited?: Set<any>): boolean {\n  if (a.length !== b.length) return false;\n\n  const used = new Array<boolean>(b.length).fill(false);\n\n  // For each element in a, find an unused matching element in b\n  outer: for (let i = 0; i < a.length; i++) {\n    const elemA = a[i];\n    for (let j = 0; j < b.length; j++) {\n      if (used[j]) continue; // already used that slot\n      if (arePropsEqual(elemA, b[j], visited)) {\n        used[j] = true;\n        continue outer; // found match for a[i], proceed\n      }\n    }\n    // If we never found a match\n    return false;\n  }\n\n  return true;\n}\n\nfunction objectsEqual(a: object, b: object, visited?: Set<any>): boolean {\n  // Get all prop keys\n  const aKeys = Object.keys(a).sort();\n  const bKeys = Object.keys(b).sort();\n  if (aKeys.length !== bKeys.length) return false;\n\n  // Compare each property name\n  for (let i = 0; i < aKeys.length; i++) {\n    if (aKeys[i] !== bKeys[i]) return false;\n  }\n\n  // Compare each property value\n  for (const key of aKeys) {\n    // @ts-ignore\n    const valA = a[key];\n    // @ts-ignore\n    const valB = b[key];\n    if (!arePropsEqual(valA, valB, visited)) {\n      return false;\n    }\n  }\n  return true;\n}\n"],"names":["DependencyResolver","id","dependencies","visited","recursionStack","dfs","dep","result","temp","visit","PluginRegistrationError","message","PluginNotFoundError","CircularDependencyError","CapabilityNotFoundError","CapabilityConflictError","PluginInitializationError","PluginConfigurationError","PluginStore","store","pluginId","action","listener","newPluginState","oldPluginState","type","handler","state","oldState","LOAD_DOCUMENT","SET_DOCUMENT","SET_DOCUMENT_ERROR","SET_SCALE","SET_ROTATION","SET_PAGES","CORE_ACTION_TYPES","loadDocument","setDocument","document","setDocumentError","error","setScale","scale","setRotation","rotation","setPages","pages","Store","reducer","initialCoreState","initialState","newState","notifyGlobal","oldGlobalState","newGlobalState","l","_b","_a","Rotation","Rotation2","swap","size","width","height","transformSize","scaleFactor","PdfSoftHyphenMarker","PdfZeroWidthSpace","PdfWordJoiner","PdfBomOrZwnbsp","PdfNonCharacterFFFE","PdfNonCharacterFFFF","PdfUnwantedTextMarkers","BLEND_MODE_INFOS","m","info","PdfAnnotationFlagName","acc","bit","name","config","coreReducer","page","PluginRegistry","engine","pluginPackage","readyPromises","p","reg","dependsOn","allDeps","cap","provider","r","loadOrder","plugin","e","err","manifest","packageCreator","finalConfig","capability","defaultConfig","missingKeys","key","currentConfig","newConfig","registrations","otherId","otherManifest","status","clamp","value","min","max","arePropsEqual","a","b","aType","pairId","getPairId","aIsArray","bIsArray","arraysEqualUnordered","objectsEqual","objectId","objectIdCounter","objectIds","obj","used","outer","i","elemA","j","aKeys","bKeys","valA","valB"],"mappings":"aAAO,MAAMA,CAAmB,CAAzB,aAAA,CACL,KAAQ,oBAAsB,GAAyB,CAEvD,QAAQC,EAAYC,EAAyB,GAAI,CAC/C,KAAK,gBAAgB,IAAID,EAAI,IAAI,IAAIC,CAAY,CAAC,CACpD,CAEQ,yBAAmC,CACzC,MAAMC,MAAc,IACdC,MAAqB,IAErBC,EAAOJ,GAAwB,CACnCE,EAAQ,IAAIF,CAAE,EACdG,EAAe,IAAIH,CAAE,EAErB,MAAMC,EAAe,KAAK,gBAAgB,IAAID,CAAE,OAAS,IACzD,UAAWK,KAAOJ,EAChB,GAAKC,EAAQ,IAAIG,CAAG,GAEpB,GAAWF,EAAe,IAAIE,CAAG,EAC/B,MAAO,WAFHD,EAAIC,CAAG,EAAG,MAAO,GAMzB,OAAAF,EAAe,OAAOH,CAAE,EACjB,EACT,EAEA,UAAWA,KAAM,KAAK,gBAAgB,KAAA,EACpC,GAAI,CAACE,EAAQ,IAAIF,CAAE,GACbI,EAAIJ,CAAE,EAAG,MAAO,GAIxB,MAAO,EACT,CAEA,kBAA6B,CAC3B,GAAI,KAAK,0BACP,MAAM,IAAI,MAAM,gCAAgC,EAGlD,MAAMM,EAAmB,CAAA,EACnBJ,MAAc,IACdK,MAAW,IAEXC,EAASR,GAAe,CAC5B,GAAIO,EAAK,IAAIP,CAAE,EAAG,MAAM,IAAI,MAAM,qBAAqB,EACvD,GAAIE,EAAQ,IAAIF,CAAE,EAAG,OAErBO,EAAK,IAAIP,CAAE,EAEX,MAAMC,EAAe,KAAK,gBAAgB,IAAID,CAAE,OAAS,IACzD,UAAWK,KAAOJ,EAChBO,EAAMH,CAAG,EAGXE,EAAK,OAAOP,CAAE,EACdE,EAAQ,IAAIF,CAAE,EACdM,EAAO,KAAKN,CAAE,CAChB,EAEA,UAAWA,KAAM,KAAK,gBAAgB,KAAA,EAC/BE,EAAQ,IAAIF,CAAE,GACjBQ,EAAMR,CAAE,EAIZ,OAAOM,CACT,CACF,CCtEO,MAAMG,UAAgC,KAAM,CACjD,YAAYC,EAAiB,CAC3B,MAAMA,CAAO,EACb,KAAK,KAAO,yBACd,CACF,CAEO,MAAMC,UAA4B,KAAM,CAC7C,YAAYD,EAAiB,CAC3B,MAAMA,CAAO,EACb,KAAK,KAAO,qBACd,CACF,CAEO,MAAME,UAAgC,KAAM,CACjD,YAAYF,EAAiB,CAC3B,MAAMA,CAAO,EACb,KAAK,KAAO,yBACd,CACF,CAEO,MAAMG,UAAgC,KAAM,CACjD,YAAYH,EAAiB,CAC3B,MAAMA,CAAO,EACb,KAAK,KAAO,yBACd,CACF,CAGO,MAAMI,UAAgC,KAAM,CACjD,YAAYJ,EAAiB,CAC3B,MAAMA,CAAO,EACb,KAAK,KAAO,yBACd,CACF,CAEO,MAAMK,UAAkC,KAAM,CACnD,YAAYL,EAAiB,CAC3B,MAAMA,CAAO,EACb,KAAK,KAAO,2BACd,CACF,CAEO,MAAMM,UAAiC,KAAM,CAClD,YAAYN,EAAiB,CAC3B,MAAMA,CAAO,EACb,KAAK,KAAO,0BACd,CACF,CC1CO,MAAMO,CAAsD,CASjE,YAAYC,EAAwBC,EAAkB,CACpD,KAAK,MAAQD,EACb,KAAK,SAAWC,CAClB,CAMA,UAAwB,CACtB,OAAO,KAAK,MAAM,SAAA,EAAW,QAAQ,KAAK,QAAQ,CACpD,CAQA,SAASC,EAAmC,CAC1C,OAAO,KAAK,MAAM,iBAAiB,KAAK,SAAUA,CAAM,CAC1D,CASA,iBACEC,EACA,CACA,OAAO,KAAK,MAAM,kBAAkB,KAAK,SAAU,CAACD,EAAQE,EAAgBC,IAAmB,CAC7FF,EACED,EACAE,EACAC,CAAA,CAEJ,CAAC,CACH,CAYA,SACEC,EACAC,EAKA,CACA,OAAO,KAAK,MAAM,SAASD,EAAM,CAACJ,EAAQM,EAAOC,IAAa,CAC5DF,EACEL,EACAM,EAAM,QAAQ,KAAK,QAAQ,EAC3BC,EAAS,QAAQ,KAAK,QAAQ,CAAA,CAElC,CAAC,CACH,CACF,CCjFO,MAAMC,EAAgB,gBAChBC,EAAe,eACfC,EAAqB,qBACrBC,EAAY,YACZC,EAAe,eACfC,EAAY,YAEZC,EAAoB,CAC/BN,EACAC,EACAC,EACAC,EACAC,EACAC,CACF,EA2CaE,EAAe,KAAmB,CAAE,KAAMP,CAAA,GAC1CQ,EAAeC,IAA6C,CACvE,KAAMR,EACN,QAASQ,CACX,GACaC,EAAoBC,IAA+B,CAC9D,KAAMT,EACN,QAASS,CACX,GACaC,EAAYC,IAA+B,CAAE,KAAMV,EAAW,QAASU,CAAA,GACvEC,EAAeC,IAAoC,CAC9D,KAAMX,EACN,QAASW,CACX,GACaC,EAAYC,IAA0C,CACjE,KAAMZ,EACN,QAASY,CACX,GCnEO,MAAMC,CAAqD,CAahE,YACEC,EACOC,EACP,CADO,KAAA,iBAAAA,EAZT,KAAQ,eAAuD,CAAA,EAE/D,KAAQ,UAAwC,CAAA,EAChD,KAAQ,gBAAoD,CAAA,EAW1D,KAAK,MAAQ,CAAE,KAAMA,EAAkB,QAAS,CAAA,CAAC,EACjD,KAAK,YAAcD,CACrB,CAQA,iBACE5B,EACA4B,EACAE,EACA,CACA,KAAK,MAAM,QAAQ9B,CAAQ,EAAI8B,EAC/B,KAAK,eAAe9B,CAAQ,EAAI4B,CAClC,CASA,eAAe3B,EAA2C,CACxD,GAAI,CAAC,KAAK,YACR,OAAO,KAAK,SAAA,EAGd,MAAMO,EAAW,KAAK,SAAA,EAEtB,KAAK,MAAM,KAAO,KAAK,YAAY,KAAK,MAAM,KAAMP,CAAM,EAE1D,MAAM8B,EAAW,KAAK,SAAA,EAEtB,YAAK,UAAU,QAAS7B,GAAaA,EAASD,EAAQ8B,EAAUvB,CAAQ,CAAC,EAElEuB,CACT,CAYA,iBACE/B,EACAC,EACA+B,EAAwB,GACnB,CACL,MAAMC,EAAiB,KAAK,SAAA,EAEtBL,EAAU,KAAK,eAAe5B,CAAQ,EAC5C,GAAI,CAAC4B,EAEH,OAAOK,EAIT,MAAM7B,EAAiB6B,EAAe,QAAQjC,CAAQ,EAEhDG,EAAiByB,EAAQxB,EAAgBH,CAAM,EAErD,KAAK,MAAM,QAAQD,CAAQ,EAAIG,EAE/B,MAAM+B,EAAiB,KAAK,SAAA,EAG5B,OAAIF,GACF,KAAK,UAAU,QAAS9B,GAAaA,EAASD,EAAQiC,EAAgBD,CAAc,CAAC,EAInF,KAAK,gBAAgBjC,CAAQ,GAC/B,KAAK,gBAAgBA,CAAQ,EAAE,QAASE,GAAa,CACnDA,EAASD,EAAQE,EAAgBC,CAAc,CACjD,CAAC,EAGID,CACT,CAWA,SAASF,EAAoD,CAE3D,MAAMO,EAAW,KAAK,SAAA,EAElB,KAAK,aAAaP,CAAM,IAC1B,KAAK,MAAM,KAAO,KAAK,YAAY,KAAK,MAAM,KAAMA,CAAM,GAI5D,UAAWD,KAAY,KAAK,eAAgB,CAC1C,MAAM4B,EAAU,KAAK,eAAe5B,CAAQ,EACtCI,EAAiBI,EAAS,QAAQR,CAAQ,EAC5C4B,IACF,KAAK,MAAM,QAAQ5B,CAAQ,EAAI4B,EAAQxB,EAAgBH,CAAM,EAKjE,CAGA,MAAM8B,EAAW,KAAK,SAAA,EACtB,YAAK,UAAU,QAAS7B,GAAaA,EAASD,EAAQ8B,EAAUvB,CAAQ,CAAC,EAGlEuB,CACT,CAMA,UAAkC,CAChC,MAAO,CACL,KAAM,CAAE,GAAG,KAAK,MAAM,IAAA,EACtB,QAAS,CAAE,GAAG,KAAK,MAAM,OAAA,CAAQ,CAErC,CASA,UAAU7B,EAAoC,CAC5C,YAAK,UAAU,KAAKA,CAAQ,EACrB,IAAM,CACX,KAAK,UAAY,KAAK,UAAU,OAAQiC,GAAMA,IAAMjC,CAAQ,CAC9D,CACF,CAUA,kBAAkBF,EAAkBE,EAA0B,CAC5D,GAAI,EAAEF,KAAY,KAAK,MAAM,SAC3B,MAAM,IAAI,MACR,sCAAsCA,CAAQ,6CAAA,EAIlD,OAAK,KAAK,gBAAgBA,CAAQ,IAChC,KAAK,gBAAgBA,CAAQ,EAAI,CAAA,GAEnC,KAAK,gBAAgBA,CAAQ,EAAE,KAAKE,CAAQ,EAErC,IAAM,CACX,KAAK,gBAAgBF,CAAQ,EAAI,KAAK,gBAAgBA,CAAQ,EAAE,OAAQmC,GAAMA,IAAMjC,CAAQ,EACxF,KAAK,gBAAgBF,CAAQ,EAAE,SAAW,GAC5C,OAAO,KAAK,gBAAgBA,CAAQ,CAExC,CACF,CAUA,SACEK,EACAC,EAKA,CACA,OAAO,KAAK,UAAU,CAACL,EAAQ8B,EAAUvB,IAAa,CAChDP,EAAO,OAASI,GAClBC,EAAQL,EAA4C8B,EAAUvB,CAAQ,CAE1E,CAAC,CACH,CAOA,eACER,EACwC,CACxC,GAAI,EAAEA,KAAY,KAAK,MAAM,SAC3B,MAAM,IAAI,MACR,sCAAsCA,CAAQ,6CAAA,EAGlD,OAAO,IAAIF,EAAuC,KAAME,CAAQ,CAClE,CAMO,aAAaC,EAAsC,CAGxD,OAAOc,EAAkB,SAASd,EAAO,IAA0C,CACrF,CAKO,SAAgB,SAErB,KAAK,UAAU,OAAS,EACxB,UAAWpB,KAAM,KAAK,iBACpBuD,GAAAC,EAAA,KAAK,gBAAgBxD,CAAE,IAAvB,YAAAwD,EAA0B,SAA1B,MAAAD,EAAA,KAAAC,EAAmC,GAErC,KAAK,gBAAkB,CAAA,EAGvB,KAAK,eAAiB,CAAA,EACtB,KAAK,MAAM,QAAU,CAAA,EAGrB,KAAK,MAAM,KAAO,CAAE,GAAG,KAAK,gBAAA,CAC9B,CACF,CC/QA,IAAIC,GAA6BC,IAC/BA,EAAUA,EAAU,QAAa,CAAC,EAAI,UACtCA,EAAUA,EAAU,SAAc,CAAC,EAAI,WACvCA,EAAUA,EAAU,UAAe,CAAC,EAAI,YACxCA,EAAUA,EAAU,UAAe,CAAC,EAAI,YACjCA,IACND,GAAY,CAAA,CAAE,EA4BjB,SAASE,EAAKC,EAAM,CAClB,KAAM,CAAE,MAAAC,EAAO,OAAAC,CAAM,EAAKF,EAC1B,MAAO,CACL,MAAOE,EACP,OAAQD,CACZ,CACA,CACA,SAASE,EAAcH,EAAMjB,EAAUqB,EAAa,CAClD,OAAAJ,EAAOjB,EAAW,IAAM,EAAIiB,EAAOD,EAAKC,CAAI,EACrC,CACL,MAAOA,EAAK,MAAQI,EACpB,OAAQJ,EAAK,OAASI,CAC1B,CACA,CAmqBA,IAAIC,EAAsB,IACtBC,EAAoB,IACpBC,EAAgB,IAChBC,EAAiB,SACjBC,EAAsB,IACtBC,EAAsB,IACtBC,EAAyB,OAAO,OAAO,CACzCN,EACAC,EACAC,EACAC,EACAC,EACAC,CACF,CAAC,EAC0B,IAAI,OAAO,IAAIC,EAAuB,KAAK,EAAE,CAAC,IAAK,GAAG,EAiCjF,IAAIC,EAAmB,OAAO,OAAO,CACnC,CAAE,GAAI,EAAgB,MAAO,SAAU,IAAK,QAAQ,EACpD,CAAE,GAAI,EAAkB,MAAO,WAAY,IAAK,UAAU,EAC1D,CAAE,GAAI,EAAgB,MAAO,SAAU,IAAK,QAAQ,EACpD,CAAE,GAAI,EAAiB,MAAO,UAAW,IAAK,SAAS,EACvD,CAAE,GAAI,EAAgB,MAAO,SAAU,IAAK,QAAQ,EACpD,CAAE,GAAI,EAAiB,MAAO,UAAW,IAAK,SAAS,EACvD,CAAE,GAAI,EAAoB,MAAO,cAAe,IAAK,aAAa,EAClE,CAAE,GAAI,EAAmB,MAAO,aAAc,IAAK,YAAY,EAC/D,CAAE,GAAI,EAAmB,MAAO,aAAc,IAAK,YAAY,EAC/D,CAAE,GAAI,EAAmB,MAAO,aAAc,IAAK,YAAY,EAC/D,CAAE,GAAI,GAAqB,MAAO,aAAc,IAAK,YAAY,EACjE,CAAE,GAAI,GAAoB,MAAO,YAAa,IAAK,WAAW,EAC9D,CAAE,GAAI,GAAc,MAAO,MAAO,IAAK,KAAK,EAC5C,CAAE,GAAI,GAAqB,MAAO,aAAc,IAAK,YAAY,EACjE,CAAE,GAAI,GAAgB,MAAO,QAAS,IAAK,OAAO,EAClD,CAAE,GAAI,GAAqB,MAAO,aAAc,IAAK,YAAY,CACnE,CAAC,EACgBA,EAAiB,OAChC,CAACC,EAAGC,KACFD,EAAEC,EAAK,EAAE,EAAIA,EACND,GAET,CAAA,CACF,EACgBD,EAAiB,OAAO,CAACC,EAAGC,KAC1CD,EAAEC,EAAK,GAAG,EAAIA,EAAK,GACZD,GACN,CAAA,CAAE,EAkBwBD,EAAiB,IAAKE,IAAU,CAC3D,MAAOA,EAAK,GACZ,MAAOA,EAAK,KACd,EAAE,EAyKF,IAAIC,EAAwB,OAAO,OAAO,CACvC,EAAoB,YACpB,EAAiB,SACjB,EAAgB,QAChB,EAAkB,SAClB,GAAqB,WACrB,GAAmB,SACnB,GAAqB,WACrB,IAAmB,SACnB,IAA0B,cAC7B,CAAC,EAC4B,OAAO,QAClCA,CACF,EAAE,OACA,CAACC,EAAK,CAACC,EAAKC,CAAI,KACdF,EAAIE,CAAI,EAAI,OAAOD,CAAG,EACfD,GAET,CAAA,CACF,ECn+BO,MAAM5B,EAAkE+B,IAAY,CACzF,OAAOA,GAAA,YAAAA,EAAQ,QAAS,EACxB,UAAUA,GAAA,YAAAA,EAAQ,WAAYtB,EAAS,QACvC,SAAU,KACV,MAAO,CAAA,EACP,QAAS,GACT,MAAO,IACT,GCPauB,EAA8C,CAACtD,EAAON,IAAsB,CACvF,OAAQA,EAAO,KAAA,CACb,KAAKQ,EACH,MAAO,CACL,GAAGF,EACH,QAAS,GACT,MAAO,IAAA,EAGX,KAAKG,EACH,MAAO,CACL,GAAGH,EACH,SAAUN,EAAO,QACjB,MAAOA,EAAO,QAAQ,MAAM,IAAK6D,GAAS,CAACA,CAAI,CAAC,EAChD,QAAS,GACT,MAAO,IAAA,EAGX,KAAKjD,EACH,MAAO,CACL,GAAGN,EACH,SAAUN,EAAO,OAAA,EAGrB,KAAKa,EACH,MAAO,CACL,GAAGP,EACH,MAAON,EAAO,OAAA,EAGlB,KAAKU,EACH,MAAO,CACL,GAAGJ,EACH,QAAS,GACT,MAAON,EAAO,OAAA,EAGlB,KAAKW,EACH,MAAO,CACL,GAAGL,EACH,MAAON,EAAO,OAAA,EAGlB,QACE,OAAOM,CAAA,CAEb,EC9BO,MAAMwD,CAAe,CAoB1B,YAAYC,EAAmBJ,EAA+B,CAnB9D,KAAQ,YAAoC,IAC5C,KAAQ,cAA6C,IACrD,KAAQ,iBAAwC,IAChD,KAAQ,WAAwC,IAEhD,KAAQ,mBAA2C,IAEnD,KAAQ,kBAAoB,GAE5B,KAAQ,YAAoC,KAE5C,KAAQ,qBAA6C,CAAA,EACrD,KAAQ,wBAAgD,CAAA,EACxD,KAAQ,YAAc,GACtB,KAAQ,eAAiB,GAEzB,KAAQ,oBAA4C,KACpD,KAAQ,UAAY,GAGlB,KAAK,SAAW,IAAIhF,EACpB,KAAK,OAASoF,EACd,KAAK,iBAAmBnC,EAAiB+B,CAAM,EAC/C,KAAK,MAAQ,IAAIjC,EAA6BkC,EAAa,KAAK,gBAAgB,CAClF,CAKA,MAAc,yBAAyC,CACjD,KAAK,oBAIL,KAAK,OAAO,YAEd,MADa,KAAK,OAAO,WAAA,EACd,UAAA,EACX,KAAK,kBAAoB,IAEzB,KAAK,kBAAoB,GAE7B,CAKA,eAMEI,EACAL,EACM,CACN,GAAI,KAAK,aAAe,CAAC,KAAK,eAC5B,MAAM,IAAItE,EAAwB,8CAA8C,EAGlF,KAAK,iBAAiB2E,EAAc,QAAQ,EAG5C,KAAK,MAAM,iBACTA,EAAc,SAAS,GAGvBA,EAAc,QACC,OAAOA,EAAc,cAApC,WACKA,EAAc,aACb,KAAK,iBACL,CACE,GAAGA,EAAc,SAAS,cAC1B,GAAGL,CAAA,CACL,EAEFK,EAAc,YAAA,EAGpB,KAAK,qBAAqB,KAAK,CAC7B,QAASA,EACT,OAAAL,CAAA,CACD,CACH,CAKA,UAAyC,CACvC,OAAO,KAAK,KACd,CAKA,WAAuB,CACrB,OAAO,KAAK,MACd,CAKO,cAA8B,CAEnC,OAAI,KAAK,oBACA,KAAK,qBAId,KAAK,qBAAuB,SAAY,CAEjC,KAAK,aACR,MAAM,KAAK,WAAA,EAIb,MAAMM,EAAgB,MAAM,KAAK,KAAK,QAAQ,OAAA,CAAQ,EAAE,IAAKC,GAC3D,OAAOA,EAAE,OAAU,WAAaA,EAAE,QAAU,QAAQ,QAAA,CAAQ,EAG9D,MAAM,QAAQ,IAAID,CAAa,CACjC,GAAA,EAEO,KAAK,oBACd,CAKA,MAAM,YAA4B,CAChC,GAAI,KAAK,UACP,MAAM,IAAI5E,EAAwB,6BAA6B,EAKjE,OAAI,KAAK,YACA,KAAK,aAId,KAAK,aAAe,SAAY,OAC9B,GAAI,KAAK,YACP,MAAM,IAAIA,EAAwB,iCAAiC,EAGrE,KAAK,eAAiB,GAEtB,GAAI,CAIF,GAFA,MAAM,KAAK,wBAAA,EAEP,KAAK,UACP,OAGF,KAAO,KAAK,qBAAqB,OAAS,GAAG,CAE3C,GAAI,KAAK,UACP,OAEF,KAAK,wBAA0B,CAAC,GAAG,KAAK,oBAAoB,EAC5D,KAAK,qBAAuB,CAAA,EAE5B,UAAW8E,KAAO,KAAK,wBAAyB,CAC9C,MAAMC,MAAgB,IAChBC,EAAU,CAAC,GAAGF,EAAI,QAAQ,SAAS,SAAU,GAAGA,EAAI,QAAQ,SAAS,QAAQ,EACnF,UAAWG,KAAOD,EAAS,CACzB,MAAME,EAAW,KAAK,wBAAwB,KAAMC,GAClDA,EAAE,QAAQ,SAAS,SAAS,SAASF,CAAG,CAAA,EAEtCC,GAAUH,EAAU,IAAIG,EAAS,QAAQ,SAAS,EAAE,CAC1D,CACA,KAAK,SAAS,QAAQJ,EAAI,QAAQ,SAAS,GAAI,CAAC,GAAGC,CAAS,CAAC,CAC/D,CAEA,MAAMK,EAAY,KAAK,SAAS,iBAAA,EAChC,UAAW7F,KAAM6F,EAAW,CAC1B,MAAMN,EAAM,KAAK,wBAAwB,KAAMK,GAAMA,EAAE,QAAQ,SAAS,KAAO5F,CAAE,EACjF,MAAM,KAAK,iBAAiBuF,EAAI,QAAQ,SAAUA,EAAI,QAAQ,OAAQA,EAAI,MAAM,CAClF,CAEA,KAAK,wBAA0B,CAAA,EAC/B,KAAK,SAAW,IAAIxF,CACtB,CAEA,UAAW+F,KAAU,KAAK,QAAQ,OAAA,EAChC,OAAMtC,EAAAsC,EAAO,iBAAP,YAAAtC,EAAA,KAAAsC,GAA0B,MAAOC,GAAM,CAC3C,QAAQ,MAAM,sCAAsCD,EAAO,EAAE,GAAIC,CAAC,EAClE,KAAK,OAAO,IAAID,EAAO,GAAI,OAAO,CACpC,IAGF,KAAK,YAAc,EAErB,OAASE,EAAK,CACZ,MAAIA,aAAe,MACX,IAAIpF,EACR,0CAA0CoF,EAAI,OAAO,EAAA,EAGnDA,CACR,QAAA,CACE,KAAK,eAAiB,EACxB,CACF,GAAA,EAEO,KAAK,YACd,CAKA,MAAc,iBACZC,EACAC,EAKAnB,EACe,CACf,MAAMoB,EAAc,CAClB,GAAGF,EAAS,cACZ,GAAGlB,CAAA,EAGL,KAAK,eAAekB,EAAS,GAAIE,EAAaF,EAAS,aAAa,EAGpE,MAAMH,EAASI,EAAe,KAAM,KAAK,OAAQC,CAAW,EAC5D,KAAK,eAAeL,CAAM,EAG1B,UAAWM,KAAcH,EAAS,SAChC,GAAI,CAAC,KAAK,aAAa,IAAIG,CAAU,EACnC,MAAM,IAAI3F,EACR,gCAAgC2F,CAAU,eAAeH,EAAS,EAAE,EAAA,EAM1E,UAAWG,KAAcH,EAAS,SAC5B,KAAK,aAAa,IAAIG,CAAU,GAElC,QAAQ,MAAM,uBAAuBA,CAAU,4BAA4BH,EAAS,EAAE,EAAE,EAI5F,QAAQ,IAAI,mBAAoBA,EAAS,GAAIA,EAAS,QAAQ,EAG9D,UAAWG,KAAcH,EAAS,SAAU,CAC1C,GAAI,KAAK,aAAa,IAAIG,CAAU,EAClC,MAAM,IAAI3F,EACR,cAAc2F,CAAU,kCAAkC,KAAK,aAAa,IAAIA,CAAU,CAAC,EAAA,EAG/F,KAAK,aAAa,IAAIA,EAAYH,EAAS,EAAE,CAC/C,CAGA,KAAK,QAAQ,IAAIA,EAAS,GAAIH,CAAM,EACpC,KAAK,UAAU,IAAIG,EAAS,GAAIA,CAAQ,EACxC,KAAK,OAAO,IAAIA,EAAS,GAAI,YAAY,EACzC,KAAK,eAAe,IAAIA,EAAS,GAAIE,CAAW,EAEhD,GAAI,CACEL,EAAO,YACT,MAAMA,EAAO,WAAWK,CAAW,EAErC,KAAK,OAAO,IAAIF,EAAS,GAAI,QAAQ,CACvC,OAAS1D,EAAO,CAEd,WAAK,QAAQ,OAAO0D,EAAS,EAAE,EAC/B,KAAK,UAAU,OAAOA,EAAS,EAAE,EACjC,QAAQ,IAAI,0BAA2BA,EAAS,GAAIA,EAAS,QAAQ,EACrEA,EAAS,SAAS,QAASP,GAAQ,KAAK,aAAa,OAAOA,CAAG,CAAC,EAC1DnD,CACR,CACF,CAEA,gBAAyBpB,EAA2B,CAClD,MAAM4D,EAAS,KAAK,eAAe,IAAI5D,CAAQ,EAC/C,GAAI,CAAC4D,EACH,MAAM,IAAIpE,EAAoB,4BAA4BQ,CAAQ,YAAY,EAEhF,OAAO4D,CACT,CAEQ,eAAe5D,EAAkB4D,EAAiBsB,EAA8B,CAGtF,MAAMC,EADe,OAAO,KAAKD,CAAuB,EACvB,OAAQE,GAAQ,CAAExB,EAAkB,eAAewB,CAAG,CAAC,EAExF,GAAID,EAAY,OAAS,EACvB,MAAM,IAAItF,EACR,kDAAkDG,CAAQ,KAAKmF,EAAY,KAAK,IAAI,CAAC,EAAA,CAS3F,CAEA,MAAM,mBAA4BnF,EAAkB4D,EAAyC,CAC3F,MAAMe,EAAS,KAAK,UAAU3E,CAAQ,EAEtC,GAAI,CAAC2E,EACH,MAAM,IAAInF,EAAoB,UAAUQ,CAAQ,YAAY,EAG9D,MAAM8E,EAAW,KAAK,UAAU,IAAI9E,CAAQ,EACtCqF,EAAgB,KAAK,eAAe,IAAIrF,CAAQ,EAEtD,GAAI,CAAC8E,GAAY,CAACO,EAChB,MAAM,IAAI7F,EAAoB,UAAUQ,CAAQ,YAAY,EAI9D,MAAMsF,EAAY,CAChB,GAAGD,EACH,GAAGzB,CAAA,EAIL,KAAK,eAAe5D,EAAUsF,EAAWR,EAAS,aAAa,EAG/D,KAAK,eAAe,IAAI9E,EAAUsF,CAAS,EAGvCX,EAAO,YACT,MAAMA,EAAO,WAAWW,CAAS,CAErC,CAKA,oBAAoBC,EAA6E,CAC/F,UAAWnB,KAAOmB,EAChB,KAAK,eAAenB,EAAI,QAASA,EAAI,MAAM,CAE/C,CAKA,MAAM,iBAAiBpE,EAAiC,CACtD,MAAM2E,EAAS,KAAK,QAAQ,IAAI3E,CAAQ,EACxC,GAAI,CAAC2E,EACH,MAAM,IAAInF,EAAoB,UAAUQ,CAAQ,oBAAoB,EAGtE,MAAM8E,EAAW,KAAK,UAAU,IAAI9E,CAAQ,EAC5C,GAAI,CAAC8E,EACH,MAAM,IAAItF,EAAoB,uBAAuBQ,CAAQ,YAAY,EAI3E,SAAW,CAACwF,EAASC,CAAa,IAAK,KAAK,UAAU,UAAW,CAC/D,GAAID,IAAYxF,EAAU,SAM1B,GAJsB,CAAC,GAAGyF,EAAc,SAAU,GAAGA,EAAc,QAAQ,EAAE,KAAMlB,GACjFO,EAAS,SAAS,SAASP,CAAG,CAAA,EAI9B,MAAM,IAAIjF,EACR,4BAA4BU,CAAQ,YAAYwF,CAAO,gBAAA,CAG7D,CAGA,GAAI,CACEb,EAAO,SACT,MAAMA,EAAO,QAAA,EAIf,UAAWM,KAAcH,EAAS,SAChC,KAAK,aAAa,OAAOG,CAAU,EAIrC,KAAK,QAAQ,OAAOjF,CAAQ,EAC5B,KAAK,UAAU,OAAOA,CAAQ,EAC9B,KAAK,OAAO,OAAOA,CAAQ,CAC7B,OAASoB,EAAO,CACd,MAAIA,aAAiB,MACb,IAAI,MAAM,+BAA+BpB,CAAQ,KAAKoB,EAAM,OAAO,EAAE,EAEvEA,CACR,CACF,CAOA,UAA6BpB,EAA4B,CACvD,MAAM2E,EAAS,KAAK,QAAQ,IAAI3E,CAAQ,EACxC,OAAK2E,GACI,IAGX,CAOA,sBAAsBM,EAAoC,CACxD,MAAMjF,EAAW,KAAK,aAAa,IAAIiF,CAAU,EACjD,OAAKjF,EAGE,KAAK,UAAUA,CAAQ,EAFrB,IAGX,CAKA,cAAciF,EAA6B,CACzC,OAAO,KAAK,aAAa,IAAIA,CAAU,CACzC,CAKA,eAA2B,CACzB,OAAO,MAAM,KAAK,KAAK,QAAQ,QAAQ,CACzC,CAKA,gBAAgBjF,EAAgC,CAC9C,MAAM0F,EAAS,KAAK,OAAO,IAAI1F,CAAQ,EACvC,GAAI,CAAC0F,EACH,MAAM,IAAIlG,EAAoB,UAAUQ,CAAQ,YAAY,EAE9D,OAAO0F,CACT,CAKQ,eAAef,EAAuB,CAC5C,GAAI,CAACA,EAAO,GACV,MAAM,IAAIrF,EAAwB,wBAAwB,CAE9D,CAKQ,iBAAiBwF,EAAgC,CACvD,GAAI,CAACA,EAAS,GACZ,MAAM,IAAIxF,EAAwB,0BAA0B,EAE9D,GAAI,CAACwF,EAAS,KACZ,MAAM,IAAIxF,EAAwB,2BAA2B,EAE/D,GAAI,CAACwF,EAAS,QACZ,MAAM,IAAIxF,EAAwB,8BAA8B,EAElE,GAAI,CAAC,MAAM,QAAQwF,EAAS,QAAQ,EAClC,MAAM,IAAIxF,EAAwB,qCAAqC,EAEzE,GAAI,CAAC,MAAM,QAAQwF,EAAS,QAAQ,EAClC,MAAM,IAAIxF,EAAwB,qCAAqC,EAEzE,GAAI,CAAC,MAAM,QAAQwF,EAAS,QAAQ,EAClC,MAAM,IAAIxF,EAAwB,sCAAsC,CAE5E,CAEA,aAAuB,CACrB,OAAO,KAAK,SACd,CAKA,MAAM,SAAyB,OAC7B,GAAI,KAAK,UAAW,MAAM,IAAIA,EAAwB,qCAAqC,EAC3F,KAAK,UAAY,GAGjB,GAAI,CACF,MAAM,KAAK,WACb,MAAQ,CAER,CAGA,UAAWqF,KAAU,MAAM,KAAK,KAAK,QAAQ,OAAA,CAAQ,EAAE,UACrD,OAAMtC,EAAAsC,EAAO,UAAP,YAAAtC,EAAA,KAAAsC,IAGR,KAAK,MAAM,QAAA,EAEX,KAAK,QAAQ,MAAA,EACb,KAAK,UAAU,MAAA,EACf,KAAK,aAAa,MAAA,EAClB,KAAK,OAAO,MAAA,EACZ,KAAK,qBAAqB,OAAS,EACnC,KAAK,wBAAwB,OAAS,CACxC,CACF,CC1hBO,SAASgB,EAAMC,EAAeC,EAAaC,EAAqB,CACrE,OAAOF,EAAQC,EAAMA,EAAMD,EAAQE,EAAMA,EAAMF,CACjD,CAcO,SAASG,EAAcC,EAAQC,EAAQlH,EAA6B,CAEzE,GAAIiH,IAAMC,EACR,MAAO,GAIT,GAAID,GAAK,MAAQC,GAAK,KAEpB,OAAOD,IAAMC,EAIf,MAAMC,EAAQ,OAAOF,EAErB,GAAIE,IADU,OAAOD,EACA,MAAO,GAG5B,GAAIC,IAAU,SAAU,CAEjBnH,IAASA,EAAU,IAAI,KAC5B,MAAMoH,EAASC,EAAUJ,EAAGC,CAAC,EAC7B,GAAIlH,EAAQ,IAAIoH,CAAM,EAGpB,MAAO,GAETpH,EAAQ,IAAIoH,CAAM,EAElB,MAAME,EAAW,MAAM,QAAQL,CAAC,EAC1BM,EAAW,MAAM,QAAQL,CAAC,EAChC,OAAII,GAAYC,EAEPC,GAAqBP,EAAGC,EAAGlH,CAAO,EAChC,CAACsH,GAAY,CAACC,EAEhBE,GAAaR,EAAGC,EAAGlH,CAAO,EAG1B,EAEX,CAIA,MAAO,EACT,CAEA,SAASqH,EAAUJ,EAAQC,EAAQ,CAGjC,MAAO,GAAGQ,EAAST,CAAC,CAAC,KAAKS,EAASR,CAAC,CAAC,EACvC,CAMA,IAAIS,EAAkB,EACtB,MAAMC,MAAgB,QAEtB,SAASF,EAASG,EAAqB,CACrC,OAAKD,EAAU,IAAIC,CAAG,GACpBD,EAAU,IAAIC,EAAK,EAAEF,CAAe,EAE/BC,EAAU,IAAIC,CAAG,CAC1B,CAEA,SAASL,GAAqBP,EAAUC,EAAUlH,EAA6B,CAC7E,GAAIiH,EAAE,SAAWC,EAAE,OAAQ,MAAO,GAElC,MAAMY,EAAO,IAAI,MAAeZ,EAAE,MAAM,EAAE,KAAK,EAAK,EAGpDa,UAAgBC,EAAI,EAAGA,EAAIf,EAAE,OAAQe,IAAK,CACxC,MAAMC,EAAQhB,EAAEe,CAAC,EACjB,QAASE,EAAI,EAAGA,EAAIhB,EAAE,OAAQgB,IAC5B,GAAI,CAAAJ,EAAKI,CAAC,GACNlB,EAAciB,EAAOf,EAAEgB,CAAC,EAAGlI,CAAO,EAAG,CACvC8H,EAAKI,CAAC,EAAI,GACV,SAASH,CACX,CAGF,MAAO,EACT,CAEA,MAAO,EACT,CAEA,SAASN,GAAaR,EAAWC,EAAWlH,EAA6B,CAEvE,MAAMmI,EAAQ,OAAO,KAAKlB,CAAC,EAAE,KAAA,EACvBmB,EAAQ,OAAO,KAAKlB,CAAC,EAAE,KAAA,EAC7B,GAAIiB,EAAM,SAAWC,EAAM,OAAQ,MAAO,GAG1C,QAASJ,EAAI,EAAGA,EAAIG,EAAM,OAAQH,IAChC,GAAIG,EAAMH,CAAC,IAAMI,EAAMJ,CAAC,EAAG,MAAO,GAIpC,UAAW3B,KAAO8B,EAAO,CAEvB,MAAME,EAAOpB,EAAEZ,CAAG,EAEZiC,EAAOpB,EAAEb,CAAG,EAClB,GAAI,CAACW,EAAcqB,EAAMC,EAAMtI,CAAO,EACpC,MAAO,EAEX,CACA,MAAO,EACT"}
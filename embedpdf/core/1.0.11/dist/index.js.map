{"version":3,"file":"index.js","sources":["../src/lib/store/selectors.ts","../src/lib/utils/plugin-helpers.ts","../src/lib/base/base-plugin.ts","../src/lib/utils/event-control.ts","../src/lib/utils/eventing.ts","../src/lib/utils/typed-object.ts"],"sourcesContent":["import { CoreState } from './initial-state';\nimport { transformSize, PdfPageObjectWithRotatedSize } from '@embedpdf/models';\n\nexport const getPagesWithRotatedSize = (state: CoreState): PdfPageObjectWithRotatedSize[][] => {\n  return state.pages.map((page) =>\n    page.map((p) => ({\n      ...p,\n      rotatedSize: transformSize(p.size, state.rotation, 1),\n    })),\n  );\n};\n","import { Action } from '../store';\nimport { IPlugin, PluginBatchRegistration, PluginPackage } from '../types/plugin';\n\n/**\n * Helper function to create a properly typed plugin registration\n */\nexport function createPluginRegistration<\n  T extends IPlugin<TConfig>,\n  TConfig,\n  TState,\n  TAction extends Action,\n>(\n  pluginPackage: PluginPackage<T, TConfig, TState, TAction>,\n  config?: Partial<TConfig>,\n): PluginBatchRegistration<T, TConfig, any, any> {\n  return {\n    package: pluginPackage,\n    config,\n  };\n}\n","import { IPlugin } from '../types/plugin';\nimport { PluginRegistry } from '../registry/plugin-registry';\nimport { Action, CoreAction, CoreState, PluginStore, Store, StoreState } from '../store';\n\nexport interface StateChangeHandler<TState> {\n  (state: TState): void;\n}\n\nexport abstract class BasePlugin<\n  TConfig = unknown,\n  TCapability = unknown,\n  TState = unknown,\n  TAction extends Action = Action,\n> implements IPlugin<TConfig>\n{\n  static readonly id: string;\n\n  protected pluginStore: PluginStore<TState, TAction>;\n  protected coreStore: Store<CoreState, CoreAction>;\n  // Track debounced actions\n  private debouncedActions: Record<string, number> = {};\n  private unsubscribeFromState: (() => void) | null = null;\n  private unsubscribeFromCoreStore: (() => void) | null = null;\n\n  private _capability?: Readonly<TCapability>;\n\n  private readyPromise: Promise<void>;\n  private readyResolve!: () => void;\n\n  constructor(\n    public readonly id: string,\n    protected registry: PluginRegistry,\n  ) {\n    if (id !== (this.constructor as typeof BasePlugin).id) {\n      throw new Error(\n        `Plugin ID mismatch: ${id} !== ${(this.constructor as typeof BasePlugin).id}`,\n      );\n    }\n    this.coreStore = this.registry.getStore();\n    this.pluginStore = this.coreStore.getPluginStore<TState, TAction>(this.id);\n    this.unsubscribeFromState = this.pluginStore.subscribeToState((action, newState, oldState) => {\n      this.onStoreUpdated(oldState, newState);\n    });\n    this.unsubscribeFromCoreStore = this.coreStore.subscribe((action, newState, oldState) => {\n      this.onCoreStoreUpdated(oldState, newState);\n    });\n\n    // Initialize ready state\n    this.readyPromise = new Promise((resolve) => {\n      this.readyResolve = resolve;\n    });\n    // By default, plugins are ready immediately\n    this.readyResolve();\n  }\n\n  /** Construct the public capability (called once & cached). */\n  protected abstract buildCapability(): TCapability;\n\n  public provides(): Readonly<TCapability> {\n    if (!this._capability) {\n      const cap = this.buildCapability();\n\n      this._capability = Object.freeze(cap);\n    }\n    return this._capability;\n  }\n\n  /**\n   * Initialize plugin with config\n   */\n  abstract initialize(config: TConfig): Promise<void>;\n\n  /**\n   *  Get a copy of the current state\n   */\n  protected get state(): Readonly<TState> {\n    return this.pluginStore.getState();\n  }\n\n  /**\n   *  Get a copy of the current core state\n   */\n  protected get coreState(): Readonly<StoreState<CoreState>> {\n    return this.coreStore.getState();\n  }\n\n  /**\n   * @deprecated  use `this.state` Get a copy of the current state\n   */\n  protected getState(): TState {\n    return this.pluginStore.getState();\n  }\n\n  /**\n   * @deprecated  use `this.coreState` Get a copy of the current core state\n   */\n  protected getCoreState(): StoreState<CoreState> {\n    return this.coreStore.getState();\n  }\n\n  /**\n   * Core Dispatch\n   */\n  protected dispatchCoreAction(action: CoreAction): StoreState<CoreState> {\n    return this.coreStore.dispatchToCore(action);\n  }\n\n  /**\n   * Dispatch an action to all plugins\n   */\n  protected dispatchToAllPlugins(action: TAction): StoreState<CoreState> {\n    return this.coreStore.dispatch(action);\n  }\n\n  /**\n   * Dispatch an action\n   */\n  protected dispatch(action: TAction): TState {\n    return this.pluginStore.dispatch(action);\n  }\n\n  /**\n   * Dispatch an action with debouncing to prevent rapid repeated calls\n   * @param action The action to dispatch\n   * @param debounceTime Time in ms to debounce (default: 100ms)\n   * @returns boolean indicating whether the action was dispatched or debounced\n   */\n  protected debouncedDispatch(action: TAction, debounceTime: number = 100): boolean {\n    const now = Date.now();\n    const lastActionTime = this.debouncedActions[action.type] || 0;\n\n    if (now - lastActionTime >= debounceTime) {\n      this.debouncedActions[action.type] = now;\n      this.dispatch(action);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Subscribe to state changes\n   */\n  protected subscribe(listener: (action: TAction, state: TState) => void): () => void {\n    return this.pluginStore.subscribeToState(listener);\n  }\n\n  /**\n   * Subscribe to core store changes\n   */\n  protected subscribeToCoreStore(\n    listener: (action: Action, state: StoreState<CoreState>) => void,\n  ): () => void {\n    return this.coreStore.subscribe(listener);\n  }\n\n  /**\n   * Called when the plugin store state is updated\n   * @param oldState Previous state\n   * @param newState New state\n   */\n  protected onStoreUpdated(oldState: TState, newState: TState): void {\n    // Default implementation does nothing - can be overridden by plugins\n  }\n\n  /**\n   * Called when the core store state is updated\n   * @param oldState Previous state\n   * @param newState New state\n   */\n  protected onCoreStoreUpdated(\n    oldState: StoreState<CoreState>,\n    newState: StoreState<CoreState>,\n  ): void {\n    // Default implementation does nothing - can be overridden by plugins\n  }\n\n  /**\n   * Cleanup method to be called when plugin is being destroyed\n   */\n  public destroy(): void {\n    if (this.unsubscribeFromState) {\n      this.unsubscribeFromState();\n      this.unsubscribeFromState = null;\n    }\n    if (this.unsubscribeFromCoreStore) {\n      this.unsubscribeFromCoreStore();\n      this.unsubscribeFromCoreStore = null;\n    }\n  }\n\n  /**\n   * Returns a promise that resolves when the plugin is ready\n   */\n  public ready(): Promise<void> {\n    return this.readyPromise;\n  }\n\n  /**\n   * Mark the plugin as ready\n   */\n  protected markReady(): void {\n    this.readyResolve();\n  }\n\n  /**\n   * Reset the ready state (useful for plugins that need to reinitialize)\n   */\n  protected resetReady(): void {\n    this.readyPromise = new Promise((resolve) => {\n      this.readyResolve = resolve;\n    });\n  }\n}\n","export type EventHandler<T> = (data: T) => void;\n\nexport interface BaseEventControlOptions {\n  wait: number;\n}\n\nexport interface DebounceOptions extends BaseEventControlOptions {\n  mode: 'debounce';\n}\n\nexport interface ThrottleOptions extends BaseEventControlOptions {\n  mode: 'throttle';\n  throttleMode?: 'leading-trailing' | 'trailing';\n}\n\nexport type EventControlOptions = DebounceOptions | ThrottleOptions;\n\nexport class EventControl<T> {\n  private timeoutId?: number;\n  private lastRun: number = 0;\n\n  constructor(\n    private handler: EventHandler<T>,\n    private options: EventControlOptions,\n  ) {}\n\n  handle = (data: T): void => {\n    if (this.options.mode === 'debounce') {\n      this.debounce(data);\n    } else {\n      this.throttle(data);\n    }\n  };\n\n  private debounce(data: T): void {\n    if (this.timeoutId) {\n      window.clearTimeout(this.timeoutId);\n    }\n\n    this.timeoutId = window.setTimeout(() => {\n      this.handler(data);\n      this.timeoutId = undefined;\n    }, this.options.wait);\n  }\n\n  private throttle(data: T): void {\n    if (this.options.mode === 'debounce') return;\n\n    const now = Date.now();\n    const throttleMode = this.options.throttleMode || 'leading-trailing';\n\n    if (now - this.lastRun >= this.options.wait) {\n      if (throttleMode === 'leading-trailing') {\n        this.handler(data);\n      }\n      this.lastRun = now;\n    }\n\n    // Always schedule the trailing execution\n    if (this.timeoutId) {\n      window.clearTimeout(this.timeoutId);\n    }\n\n    this.timeoutId = window.setTimeout(\n      () => {\n        this.handler(data);\n        this.lastRun = Date.now();\n        this.timeoutId = undefined;\n      },\n      this.options.wait - (now - this.lastRun),\n    );\n  }\n\n  destroy(): void {\n    if (this.timeoutId) {\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n}\n","import { EventControl, EventControlOptions } from './event-control';\nimport { arePropsEqual } from './math';\n\n/* ------------------------------------------------------------------ */\n/* basic types                                                        */\n/* ------------------------------------------------------------------ */\nexport type Listener<T = any> = (value: T) => void;\nexport type Unsubscribe = () => void;\n\n/* ------------------------------------------------------------------ */\n/* EventListener                                                      */\n/* ------------------------------------------------------------------ */\nexport type EventListener<T> =\n  | ((listener: Listener<T>) => Unsubscribe)\n  | ((listener: Listener<T>, options?: EventControlOptions) => Unsubscribe);\n\n/* ------------------------------------------------------------ */\n/* helpers for typing `.on()` with an optional second argument  */\n/* ------------------------------------------------------------ */\nexport type EventHook<T = any> = EventListener<T>;\n/* ------------------------------------------------------------------ */\n/* minimal “dumb” emitter (no value cache, no equality)               */\n/* ------------------------------------------------------------------ */\nexport interface Emitter<T = any> {\n  emit(value?: T): void;\n  on(listener: Listener<T>): Unsubscribe;\n  off(listener: Listener<T>): void;\n  clear(): void;\n}\n\nexport function createEmitter<T = any>(): Emitter<T> {\n  const listeners = new Set<Listener<T>>();\n\n  const on: EventHook<T> = (l: Listener<T>) => {\n    listeners.add(l);\n    return () => listeners.delete(l);\n  };\n\n  return {\n    emit: (v = undefined as T) => listeners.forEach((l) => l(v)),\n    on,\n    off: (l) => listeners.delete(l),\n    clear: () => listeners.clear(),\n  };\n}\n\n/* ------------------------------------------------------------ */\n/* public interface                                              */\n/* ------------------------------------------------------------ */\nexport interface BehaviorEmitter<T = any> extends Omit<Emitter<T>, 'on' | 'off'> {\n  readonly value?: T;\n  on: EventHook<T>;\n  off(listener: Listener<T>): void;\n  select<U>(selector: (v: T) => U, equality?: (a: U, b: U) => boolean): EventHook<U>;\n}\n\n/* ------------------------------------------------------------ */\n/* implementation                                               */\n/* ------------------------------------------------------------ */\nexport function createBehaviorEmitter<T = any>(\n  initial?: T,\n  equality: (a: T, b: T) => boolean = arePropsEqual,\n): BehaviorEmitter<T> {\n  const listeners = new Set<Listener<T>>();\n  const proxyMap = new Map<Listener<T>, { wrapped: Listener<T>; destroy: () => void }>();\n  let _value = initial; // cached value\n\n  /* -------------- helpers ----------------------------------- */\n  const notify = (v: T) => listeners.forEach((l) => l(v));\n\n  const baseOn: EventHook<T> = (listener: Listener<T>, options?: EventControlOptions) => {\n    /* wrap & remember if we have control options ------------------ */\n    let realListener = listener;\n    let destroy = () => {};\n\n    if (options) {\n      const ctl = new EventControl(listener, options);\n      realListener = ctl.handle as Listener<T>;\n      destroy = () => ctl.destroy();\n      proxyMap.set(listener, { wrapped: realListener, destroy });\n    }\n\n    /* immediate replay of last value ------------------------------ */\n    if (_value !== undefined) realListener(_value);\n\n    listeners.add(realListener);\n\n    return () => {\n      listeners.delete(realListener);\n      destroy();\n      proxyMap.delete(listener);\n    };\n  };\n\n  /* -------------- public object ------------------------------ */\n  return {\n    /* emitter behaviour ---------------------------------------- */\n    get value() {\n      return _value;\n    },\n\n    emit(v = undefined as T) {\n      if (_value === undefined || !equality(_value, v)) {\n        _value = v;\n        notify(v);\n      }\n    },\n\n    on: baseOn,\n    off(listener: Listener<T>) {\n      /* did we wrap this listener? */\n      const proxy = proxyMap.get(listener);\n      if (proxy) {\n        listeners.delete(proxy.wrapped);\n        proxy.destroy();\n        proxyMap.delete(listener);\n      } else {\n        listeners.delete(listener);\n      }\n    },\n\n    clear() {\n      listeners.clear();\n      proxyMap.forEach((p) => p.destroy());\n      proxyMap.clear();\n    },\n\n    /* derived hook --------------------------------------------- */\n    select<U>(selector: (v: T) => U, eq: (a: U, b: U) => boolean = arePropsEqual): EventHook<U> {\n      return (listener: Listener<U>, options?: EventControlOptions) => {\n        let prev: U | undefined;\n\n        /* replay */\n        if (_value !== undefined) {\n          const mapped = selector(_value);\n          prev = mapped;\n          listener(mapped);\n        }\n\n        /* subscribe to parent */\n        return baseOn(\n          (next) => {\n            const mapped = selector(next);\n            if (prev === undefined || !eq(prev, mapped)) {\n              prev = mapped;\n              listener(mapped);\n            }\n          },\n          options as EventControlOptions | undefined,\n        ); // pass control opts straight through\n      };\n    },\n  };\n}\n","/* ------------------------------------------------------------------ */\n/*  enumEntries – iterate over enum-keyed Records with strong typing  */\n/* ------------------------------------------------------------------ */\n\ntype EnumKey = string | number;\n\n/**\n * Iterate over a Record whose keys are enum members (numeric or string),\n * getting back a fully-typed `[key, value]` tuple array.\n *\n * Usage:\n *   for (const [subtype, defaults] of enumEntries(this.state.toolDefaults)) {\n *     // subtype is inferred as keyof ToolDefaultsBySubtype\n *   }\n */\nexport function enumEntries<E extends EnumKey, V>(record: Record<E, V>): Array<[E, V]> {\n  // Tell TS the values are V (not unknown) *before* we map.\n  return (Object.entries(record) as [string, V][]).map(([k, v]) => {\n    // Numeric enums come out of Object.entries as \"0\", \"1\", …  → convert.\n    const maybeNum = Number(k);\n    const typedKey: E =\n      Number.isFinite(maybeNum) && k.trim() !== '' // looks like a number?\n        ? (maybeNum as unknown as E) // numeric enum key\n        : (k as unknown as E); // string enum key\n\n    return [typedKey, v]; // v is already typed as V\n  });\n}\n"],"names":["getPagesWithRotatedSize","state","page","p","transformSize","createPluginRegistration","pluginPackage","config","BasePlugin","id","registry","action","newState","oldState","resolve","cap","debounceTime","now","lastActionTime","listener","EventControl","handler","options","data","throttleMode","createEmitter","listeners","v","l","createBehaviorEmitter","initial","equality","arePropsEqual","proxyMap","_value","notify","baseOn","realListener","destroy","ctl","proxy","selector","eq","prev","mapped","next","enumEntries","record","k","maybeNum"],"mappings":"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"}
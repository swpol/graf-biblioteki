{"version":3,"sources":["../src/index.ts","../../core/src/lib/utils/dependency-resolver.ts","../../core/src/lib/types/errors.ts","../../core/src/lib/store/plugin-store.ts","../../core/src/lib/store/actions.ts","../../core/src/lib/store/store.ts","../../models/dist/index.js","../../core/src/lib/store/initial-state.ts","../../core/src/lib/store/reducer.ts","../../core/src/lib/registry/plugin-registry.ts","../../core/src/lib/utils/math.ts","../../core/src/lib/store/selectors.ts","../../core/src/lib/utils/plugin-helpers.ts","../../core/src/lib/base/base-plugin.ts","../../core/src/lib/utils/event-control.ts","../../core/src/lib/utils/eventing.ts","../../core/src/lib/utils/typed-object.ts","../src/lib/ui-component.ts","../src/lib/actions.ts","../src/lib/reducer.ts","../src/lib/utils.ts","../src/lib/menu/utils.ts","../src/lib/menu/menu-manager.ts","../src/lib/icons/icon-manager.ts","../src/lib/ui-plugin.ts","../src/lib/manifest.ts","../src/lib/menu/types.ts","../src/lib/index.ts"],"sourcesContent":["export * from './lib';\n","export class DependencyResolver {\n  private dependencyGraph = new Map<string, Set<string>>();\n\n  addNode(id: string, dependencies: string[] = []) {\n    this.dependencyGraph.set(id, new Set(dependencies));\n  }\n\n  private hasCircularDependencies(): boolean {\n    const visited = new Set<string>();\n    const recursionStack = new Set<string>();\n\n    const dfs = (id: string): boolean => {\n      visited.add(id);\n      recursionStack.add(id);\n\n      const dependencies = this.dependencyGraph.get(id) || new Set();\n      for (const dep of dependencies) {\n        if (!visited.has(dep)) {\n          if (dfs(dep)) return true;\n        } else if (recursionStack.has(dep)) {\n          return true; // Circular dependency found\n        }\n      }\n\n      recursionStack.delete(id);\n      return false;\n    };\n\n    for (const id of this.dependencyGraph.keys()) {\n      if (!visited.has(id)) {\n        if (dfs(id)) return true;\n      }\n    }\n\n    return false;\n  }\n\n  resolveLoadOrder(): string[] {\n    if (this.hasCircularDependencies()) {\n      throw new Error('Circular dependencies detected');\n    }\n\n    const result: string[] = [];\n    const visited = new Set<string>();\n    const temp = new Set<string>();\n\n    const visit = (id: string) => {\n      if (temp.has(id)) throw new Error('Circular dependency');\n      if (visited.has(id)) return;\n\n      temp.add(id);\n\n      const dependencies = this.dependencyGraph.get(id) || new Set();\n      for (const dep of dependencies) {\n        visit(dep);\n      }\n\n      temp.delete(id);\n      visited.add(id);\n      result.push(id);\n    };\n\n    for (const id of this.dependencyGraph.keys()) {\n      if (!visited.has(id)) {\n        visit(id);\n      }\n    }\n\n    return result;\n  }\n}\n","export class PluginRegistrationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PluginRegistrationError';\n  }\n}\n\nexport class PluginNotFoundError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PluginNotFoundError';\n  }\n}\n\nexport class CircularDependencyError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CircularDependencyError';\n  }\n}\n\nexport class CapabilityNotFoundError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CapabilityNotFoundError';\n  }\n}\n\n// You might also want to add:\nexport class CapabilityConflictError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CapabilityConflictError';\n  }\n}\n\nexport class PluginInitializationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PluginInitializationError';\n  }\n}\n\nexport class PluginConfigurationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PluginConfigurationError';\n  }\n}\n","import { Store } from './store';\nimport { Action } from './types';\n\n/**\n * A type-safe store handle for plugins, providing access to plugin-specific state and actions.\n */\nexport class PluginStore<PluginState, PluginAction extends Action> {\n  private store: Store<any, any>;\n  private pluginId: string;\n\n  /**\n   * Initializes the PluginStore with the main store and plugin ID.\n   * @param store The main store instance.\n   * @param pluginId The unique identifier for the plugin.\n   */\n  constructor(store: Store<any, any>, pluginId: string) {\n    this.store = store;\n    this.pluginId = pluginId;\n  }\n\n  /**\n   * Gets the current state of the plugin.\n   * @returns The plugin's state.\n   */\n  getState(): PluginState {\n    return this.store.getState().plugins[this.pluginId] as PluginState;\n  }\n\n  /**\n   * Dispatches an action for the plugin and returns the *new* global state.\n   * If you only need the plugin’s updated state, call `getState()` afterward.\n   * @param action The action to dispatch.\n   * @returns The updated global store state (after plugin reducer).\n   */\n  dispatch(action: PluginAction): PluginState {\n    return this.store.dispatchToPlugin(this.pluginId, action);\n  }\n\n  /**\n   * Subscribes to state changes only for this specific plugin.\n   * You now receive (action, newPluginState, oldPluginState) in the callback.\n   *\n   * @param listener The callback to invoke when plugin state changes.\n   * @returns A function to unsubscribe the listener.\n   */\n  subscribeToState(\n    listener: (action: PluginAction, newState: PluginState, oldState: PluginState) => void,\n  ) {\n    return this.store.subscribeToPlugin(this.pluginId, (action, newPluginState, oldPluginState) => {\n      listener(\n        action as PluginAction,\n        newPluginState as PluginState,\n        oldPluginState as PluginState,\n      );\n    });\n  }\n\n  /**\n   * Subscribes to a specific action type for the plugin.\n   * This still uses the main store's `onAction`, so you get the *global*\n   * old/new store states there. If you specifically want old/new plugin state,\n   * use `subscribeToState` instead.\n   *\n   * @param type The action type to listen for.\n   * @param handler The callback to invoke when the action occurs.\n   * @returns A function to unsubscribe the handler.\n   */\n  onAction<T extends PluginAction['type']>(\n    type: T,\n    handler: (\n      action: Extract<PluginAction, { type: T }>,\n      state: PluginState,\n      oldState: PluginState,\n    ) => void,\n  ) {\n    return this.store.onAction(type, (action, state, oldState) => {\n      handler(\n        action as Extract<PluginAction, { type: T }>,\n        state.plugins[this.pluginId] as PluginState,\n        oldState.plugins[this.pluginId] as PluginState,\n      );\n    });\n  }\n}\n","import { PdfDocumentObject, PdfPageObject, Rotation } from '@embedpdf/models';\n\nexport const LOAD_DOCUMENT = 'LOAD_DOCUMENT';\nexport const SET_DOCUMENT = 'SET_DOCUMENT';\nexport const SET_DOCUMENT_ERROR = 'SET_DOCUMENT_ERROR';\nexport const SET_SCALE = 'SET_SCALE';\nexport const SET_ROTATION = 'SET_ROTATION';\nexport const SET_PAGES = 'SET_PAGES';\n\nexport const CORE_ACTION_TYPES = [\n  LOAD_DOCUMENT,\n  SET_DOCUMENT,\n  SET_DOCUMENT_ERROR,\n  SET_SCALE,\n  SET_ROTATION,\n  SET_PAGES,\n] as const;\n\n// Action Type Interfaces\nexport interface LoadDocumentAction {\n  type: typeof LOAD_DOCUMENT;\n}\n\nexport interface SetDocumentAction {\n  type: typeof SET_DOCUMENT;\n  payload: PdfDocumentObject;\n}\n\nexport interface SetDocumentErrorAction {\n  type: typeof SET_DOCUMENT_ERROR;\n  payload: string;\n}\n\nexport interface SetScaleAction {\n  type: typeof SET_SCALE;\n  payload: number;\n}\n\nexport interface SetRotationAction {\n  type: typeof SET_ROTATION;\n  payload: Rotation;\n}\n\nexport interface SetPagesAction {\n  type: typeof SET_PAGES;\n  payload: PdfPageObject[][];\n}\n\nexport type DocumentAction =\n  | LoadDocumentAction\n  | SetDocumentAction\n  | SetDocumentErrorAction\n  | SetScaleAction\n  | SetRotationAction\n  | SetPagesAction;\n\n// Core actions\nexport type CoreAction = DocumentAction;\n\nexport const loadDocument = (): CoreAction => ({ type: LOAD_DOCUMENT });\nexport const setDocument = (document: PdfDocumentObject): CoreAction => ({\n  type: SET_DOCUMENT,\n  payload: document,\n});\nexport const setDocumentError = (error: string): CoreAction => ({\n  type: SET_DOCUMENT_ERROR,\n  payload: error,\n});\nexport const setScale = (scale: number): CoreAction => ({ type: SET_SCALE, payload: scale });\nexport const setRotation = (rotation: Rotation): CoreAction => ({\n  type: SET_ROTATION,\n  payload: rotation,\n});\nexport const setPages = (pages: PdfPageObject[][]): CoreAction => ({\n  type: SET_PAGES,\n  payload: pages,\n});\n","import { Reducer, Action, StoreState, StoreListener, PluginListener } from './types';\nimport { PluginStore } from './plugin-store';\nimport { CORE_ACTION_TYPES } from './actions';\n\n/**\n * A generic, type-safe store class managing core and plugin states, reducers, and subscriptions.\n * @template CoreState The type of the core state.\n * @template CoreAction The type of actions handled by core reducers (extends Action).\n */\nexport class Store<CoreState, CoreAction extends Action = Action> {\n  private state: StoreState<CoreState>;\n  private coreReducer: Reducer<CoreState, CoreAction>;\n  private pluginReducers: Record<string, Reducer<any, Action>> = {};\n\n  private listeners: StoreListener<CoreState>[] = [];\n  private pluginListeners: Record<string, PluginListener[]> = {};\n\n  /**\n   * Initializes the store with the provided core state.\n   * @param reducer          The core reducer function\n   * @param initialCoreState The initial core state\n   */\n  constructor(\n    reducer: Reducer<CoreState, CoreAction>,\n    public initialCoreState: CoreState,\n  ) {\n    this.state = { core: initialCoreState, plugins: {} };\n    this.coreReducer = reducer;\n  }\n\n  /**\n   * Adds a reducer for a plugin-specific state.\n   * @param pluginId The unique identifier for the plugin.\n   * @param reducer The reducer function for the plugin state.\n   * @param initialState The initial state for the plugin.\n   */\n  addPluginReducer<PluginState>(\n    pluginId: string,\n    reducer: Reducer<PluginState, Action>,\n    initialState: PluginState,\n  ) {\n    this.state.plugins[pluginId] = initialState;\n    this.pluginReducers[pluginId] = reducer;\n  }\n\n  /**\n   * Dispatches an action *only* to the core reducer.\n   * Notifies the global store listeners with (action, newState, oldState).\n   *\n   * @param action The action to dispatch, typed as CoreAction\n   * @returns The updated *global* store state\n   */\n  dispatchToCore(action: CoreAction): StoreState<CoreState> {\n    if (!this.coreReducer) {\n      return this.getState();\n    }\n\n    const oldState = this.getState();\n    // Update core state via its reducer\n    this.state.core = this.coreReducer(this.state.core, action);\n\n    const newState = this.getState();\n    // Notify all main-store subscribers\n    this.listeners.forEach((listener) => listener(action, newState, oldState));\n\n    return newState;\n  }\n\n  /**\n   * Dispatches an action *only* to a specific plugin.\n   * Optionally notifies global store listeners if `notifyGlobal` is true.\n   * Always notifies plugin-specific listeners with (action, newPluginState, oldPluginState).\n   *\n   * @param pluginId   The plugin identifier\n   * @param action     The plugin action to dispatch\n   * @param notifyGlobal Whether to also notify global store listeners\n   * @returns The updated *global* store state\n   */\n  dispatchToPlugin<PluginAction extends Action>(\n    pluginId: string,\n    action: PluginAction,\n    notifyGlobal: boolean = true,\n  ): any {\n    const oldGlobalState = this.getState();\n\n    const reducer = this.pluginReducers[pluginId];\n    if (!reducer) {\n      // No plugin found, just return the old state\n      return oldGlobalState;\n    }\n\n    // Grab the old plugin state\n    const oldPluginState = oldGlobalState.plugins[pluginId];\n    // Reduce to new plugin state\n    const newPluginState = reducer(oldPluginState, action);\n    // Update the store's plugin slice\n    this.state.plugins[pluginId] = newPluginState;\n\n    const newGlobalState = this.getState();\n\n    // If we are notifying the main store subscribers about plugin changes\n    if (notifyGlobal) {\n      this.listeners.forEach((listener) => listener(action, newGlobalState, oldGlobalState));\n    }\n\n    // Notify plugin-specific listeners\n    if (this.pluginListeners[pluginId]) {\n      this.pluginListeners[pluginId].forEach((listener) => {\n        listener(action, newPluginState, oldPluginState);\n      });\n    }\n\n    return newPluginState;\n  }\n\n  /**\n   * Dispatches an action to update the state using:\n   * - the core reducer (if it's a CoreAction)\n   * - *all* plugin reducers (regardless of action type), with no global notify for each plugin\n   *\n   * Returns the new *global* store state after all reducers have processed the action.\n   *\n   * @param action The action to dispatch (can be CoreAction or any Action).\n   */\n  dispatch(action: CoreAction | Action): StoreState<CoreState> {\n    // Keep old state to notify global listeners *once*, after all reducers run.\n    const oldState = this.getState();\n    // 1) Apply core reducer (only if action is a CoreAction)\n    if (this.isCoreAction(action)) {\n      this.state.core = this.coreReducer(this.state.core, action);\n    }\n\n    // 2) Apply plugin reducers (without globally notifying after each plugin)\n    for (const pluginId in this.pluginReducers) {\n      const reducer = this.pluginReducers[pluginId];\n      const oldPluginState = oldState.plugins[pluginId];\n      if (reducer) {\n        this.state.plugins[pluginId] = reducer(oldPluginState, action);\n      }\n      // We do *not* notify global listeners or plugin listeners here,\n      // as that might be undesired \"fan-out\". If you want per-plugin subscription\n      // triggered on every dispatch, you can do so here, but that’s up to you.\n    }\n\n    // 3) Notify global listeners *once* with the final new state\n    const newState = this.getState();\n    this.listeners.forEach((listener) => listener(action, newState, oldState));\n\n    // 4) Return the new global store state\n    return newState;\n  }\n\n  /**\n   * Returns a shallow copy of the current state.\n   * @returns The current store state.\n   */\n  getState(): StoreState<CoreState> {\n    return {\n      core: { ...this.state.core },\n      plugins: { ...this.state.plugins },\n    };\n  }\n\n  /**\n   * Subscribes a listener to *global* state changes.\n   * The callback signature is now (action, newState, oldState).\n   *\n   * @param listener The callback to invoke on state changes\n   * @returns A function to unsubscribe the listener\n   */\n  subscribe(listener: StoreListener<CoreState>) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter((l) => l !== listener);\n    };\n  }\n\n  /**\n   * Subscribes a listener to *plugin-specific* state changes.\n   * The callback signature is now (action, newPluginState, oldPluginState).\n   *\n   * @param pluginId The unique identifier for the plugin.\n   * @param listener The callback to invoke on plugin state changes.\n   * @returns A function to unsubscribe the listener.\n   */\n  subscribeToPlugin(pluginId: string, listener: PluginListener) {\n    if (!(pluginId in this.state.plugins)) {\n      throw new Error(\n        `Plugin state not found for plugin \"${pluginId}\". Did you forget to call addPluginReducer?`,\n      );\n    }\n\n    if (!this.pluginListeners[pluginId]) {\n      this.pluginListeners[pluginId] = [];\n    }\n    this.pluginListeners[pluginId].push(listener);\n\n    return () => {\n      this.pluginListeners[pluginId] = this.pluginListeners[pluginId].filter((l) => l !== listener);\n      if (this.pluginListeners[pluginId].length === 0) {\n        delete this.pluginListeners[pluginId];\n      }\n    };\n  }\n\n  /**\n   * Subscribes to a specific action type (only from the core's action union).\n   * The callback signature is (action, newState, oldState).\n   *\n   * @param type The action type to listen for.\n   * @param handler The callback to invoke when the action occurs.\n   * @returns A function to unsubscribe the handler.\n   */\n  onAction<T extends CoreAction['type']>(\n    type: T,\n    handler: (\n      action: Extract<CoreAction, { type: T }>,\n      state: StoreState<CoreState>,\n      oldState: StoreState<CoreState>,\n    ) => void,\n  ) {\n    return this.subscribe((action, newState, oldState) => {\n      if (action.type === type) {\n        handler(action as Extract<CoreAction, { type: T }>, newState, oldState);\n      }\n    });\n  }\n\n  /**\n   * Gets a PluginStore handle for a specific plugin.\n   * @param pluginId The unique identifier for the plugin.\n   * @returns A PluginStore instance for the plugin.\n   */\n  getPluginStore<PluginState, PluginAction extends Action>(\n    pluginId: string,\n  ): PluginStore<PluginState, PluginAction> {\n    if (!(pluginId in this.state.plugins)) {\n      throw new Error(\n        `Plugin state not found for plugin \"${pluginId}\". Did you forget to call addPluginReducer?`,\n      );\n    }\n    return new PluginStore<PluginState, PluginAction>(this, pluginId);\n  }\n\n  /**\n   * Helper method to check if an action is a CoreAction.\n   * Adjust if you have a more refined way to differentiate CoreAction vs. any other Action.\n   */\n  public isCoreAction(action: Action): action is CoreAction {\n    // In many codebases you'd do something more robust here\n    // or rely on TypeScript's narrowing logic if possible.\n    return CORE_ACTION_TYPES.includes(action.type as (typeof CORE_ACTION_TYPES)[number]);\n  }\n\n  /**\n   * Destroy the store: drop every listener and plugin reducer\n   */\n  public destroy(): void {\n    // 1. empty listener collections\n    this.listeners.length = 0;\n    for (const id in this.pluginListeners) {\n      this.pluginListeners[id]?.splice?.(0);\n    }\n    this.pluginListeners = {};\n\n    // 2. wipe plugin reducers and states\n    this.pluginReducers = {};\n    this.state.plugins = {};\n\n    // 3. reset core state to initial\n    this.state.core = { ...this.initialCoreState };\n  }\n}\n","// src/geometry.ts\nvar Rotation = /* @__PURE__ */ ((Rotation2) => {\n  Rotation2[Rotation2[\"Degree0\"] = 0] = \"Degree0\";\n  Rotation2[Rotation2[\"Degree90\"] = 1] = \"Degree90\";\n  Rotation2[Rotation2[\"Degree180\"] = 2] = \"Degree180\";\n  Rotation2[Rotation2[\"Degree270\"] = 3] = \"Degree270\";\n  return Rotation2;\n})(Rotation || {});\nfunction toIntPos(p) {\n  return { x: Math.floor(p.x), y: Math.floor(p.y) };\n}\nfunction toIntSize(s) {\n  return { width: Math.ceil(s.width), height: Math.ceil(s.height) };\n}\nfunction toIntRect(r) {\n  return {\n    origin: toIntPos(r.origin),\n    size: toIntSize(r.size)\n  };\n}\nfunction calculateDegree(rotation) {\n  switch (rotation) {\n    case 0 /* Degree0 */:\n      return 0;\n    case 1 /* Degree90 */:\n      return 90;\n    case 2 /* Degree180 */:\n      return 180;\n    case 3 /* Degree270 */:\n      return 270;\n  }\n}\nfunction calculateAngle(rotation) {\n  return calculateDegree(rotation) * Math.PI / 180;\n}\nfunction swap(size) {\n  const { width, height } = size;\n  return {\n    width: height,\n    height: width\n  };\n}\nfunction transformSize(size, rotation, scaleFactor) {\n  size = rotation % 2 === 0 ? size : swap(size);\n  return {\n    width: size.width * scaleFactor,\n    height: size.height * scaleFactor\n  };\n}\nfunction quadToRect(q) {\n  const xs = [q.p1.x, q.p2.x, q.p3.x, q.p4.x];\n  const ys = [q.p1.y, q.p2.y, q.p3.y, q.p4.y];\n  return {\n    origin: { x: Math.min(...xs), y: Math.min(...ys) },\n    size: {\n      width: Math.max(...xs) - Math.min(...xs),\n      height: Math.max(...ys) - Math.min(...ys)\n    }\n  };\n}\nfunction rectToQuad(r) {\n  return {\n    p1: { x: r.origin.x, y: r.origin.y },\n    p2: { x: r.origin.x + r.size.width, y: r.origin.y },\n    p3: { x: r.origin.x + r.size.width, y: r.origin.y + r.size.height },\n    p4: { x: r.origin.x, y: r.origin.y + r.size.height }\n  };\n}\nfunction rotatePosition(containerSize, position, rotation) {\n  let x = position.x;\n  let y = position.y;\n  switch (rotation) {\n    case 0 /* Degree0 */:\n      x = position.x;\n      y = position.y;\n      break;\n    case 1 /* Degree90 */:\n      x = containerSize.height - position.y;\n      y = position.x;\n      break;\n    case 2 /* Degree180 */:\n      x = containerSize.width - position.x;\n      y = containerSize.height - position.y;\n      break;\n    case 3 /* Degree270 */:\n      x = position.y;\n      y = containerSize.width - position.x;\n      break;\n  }\n  return {\n    x,\n    y\n  };\n}\nfunction scalePosition(position, scaleFactor) {\n  return {\n    x: position.x * scaleFactor,\n    y: position.y * scaleFactor\n  };\n}\nfunction transformPosition(containerSize, position, rotation, scaleFactor) {\n  return scalePosition(rotatePosition(containerSize, position, rotation), scaleFactor);\n}\nfunction restorePosition(containerSize, position, rotation, scaleFactor) {\n  return scalePosition(\n    rotatePosition(containerSize, position, (4 - rotation) % 4),\n    1 / scaleFactor\n  );\n}\nfunction rotateRect(containerSize, rect, rotation) {\n  let x = rect.origin.x;\n  let y = rect.origin.y;\n  let size = rect.size;\n  switch (rotation) {\n    case 0 /* Degree0 */:\n      break;\n    case 1 /* Degree90 */:\n      x = containerSize.height - rect.origin.y - rect.size.height;\n      y = rect.origin.x;\n      size = swap(rect.size);\n      break;\n    case 2 /* Degree180 */:\n      x = containerSize.width - rect.origin.x - rect.size.width;\n      y = containerSize.height - rect.origin.y - rect.size.height;\n      break;\n    case 3 /* Degree270 */:\n      x = rect.origin.y;\n      y = containerSize.width - rect.origin.x - rect.size.width;\n      size = swap(rect.size);\n      break;\n  }\n  return {\n    origin: {\n      x,\n      y\n    },\n    size: {\n      width: size.width,\n      height: size.height\n    }\n  };\n}\nfunction scaleRect(rect, scaleFactor) {\n  return {\n    origin: {\n      x: rect.origin.x * scaleFactor,\n      y: rect.origin.y * scaleFactor\n    },\n    size: {\n      width: rect.size.width * scaleFactor,\n      height: rect.size.height * scaleFactor\n    }\n  };\n}\nfunction transformRect(containerSize, rect, rotation, scaleFactor) {\n  return scaleRect(rotateRect(containerSize, rect, rotation), scaleFactor);\n}\nfunction restoreRect(containerSize, rect, rotation, scaleFactor) {\n  return scaleRect(rotateRect(containerSize, rect, (4 - rotation) % 4), 1 / scaleFactor);\n}\nfunction restoreOffset(offset, rotation, scaleFactor) {\n  let offsetX = offset.x;\n  let offsetY = offset.y;\n  switch (rotation) {\n    case 0 /* Degree0 */:\n      offsetX = offset.x / scaleFactor;\n      offsetY = offset.y / scaleFactor;\n      break;\n    case 1 /* Degree90 */:\n      offsetX = offset.y / scaleFactor;\n      offsetY = -offset.x / scaleFactor;\n      break;\n    case 2 /* Degree180 */:\n      offsetX = -offset.x / scaleFactor;\n      offsetY = -offset.y / scaleFactor;\n      break;\n    case 3 /* Degree270 */:\n      offsetX = -offset.y / scaleFactor;\n      offsetY = offset.x / scaleFactor;\n      break;\n  }\n  return {\n    x: offsetX,\n    y: offsetY\n  };\n}\nfunction boundingRect(rects) {\n  if (rects.length === 0) return null;\n  let minX = rects[0].origin.x, minY = rects[0].origin.y, maxX = rects[0].origin.x + rects[0].size.width, maxY = rects[0].origin.y + rects[0].size.height;\n  for (const r of rects) {\n    minX = Math.min(minX, r.origin.x);\n    minY = Math.min(minY, r.origin.y);\n    maxX = Math.max(maxX, r.origin.x + r.size.width);\n    maxY = Math.max(maxY, r.origin.y + r.size.height);\n  }\n  return {\n    origin: {\n      x: minX,\n      y: minY\n    },\n    size: {\n      width: maxX - minX,\n      height: maxY - minY\n    }\n  };\n}\nvar makeMatrix = (rectangle, rotation, scaleFactor) => {\n  const { width, height } = rectangle.size;\n  switch (rotation) {\n    case 0 /* Degree0 */:\n      return {\n        a: scaleFactor,\n        b: 0,\n        c: 0,\n        d: -scaleFactor,\n        e: 0,\n        f: height * scaleFactor\n      };\n    case 1 /* Degree90 */:\n      return {\n        a: 0,\n        b: scaleFactor,\n        c: scaleFactor,\n        d: 0,\n        e: 0,\n        f: 0\n      };\n    case 2 /* Degree180 */:\n      return {\n        a: -scaleFactor,\n        b: 0,\n        c: 0,\n        d: scaleFactor,\n        e: width * scaleFactor,\n        f: 0\n      };\n    case 3 /* Degree270 */:\n      return {\n        a: 0,\n        b: -scaleFactor,\n        c: -scaleFactor,\n        d: 0,\n        e: height * scaleFactor,\n        f: width * scaleFactor\n      };\n  }\n};\n\n// src/logger.ts\nvar NoopLogger = class {\n  /** {@inheritDoc Logger.debug} */\n  debug() {\n  }\n  /** {@inheritDoc Logger.info} */\n  info() {\n  }\n  /** {@inheritDoc Logger.warn} */\n  warn() {\n  }\n  /** {@inheritDoc Logger.error} */\n  error() {\n  }\n  /** {@inheritDoc Logger.perf} */\n  perf() {\n  }\n};\nvar ConsoleLogger = class {\n  /** {@inheritDoc Logger.debug} */\n  debug(source, category, ...args) {\n    console.debug(`${source}.${category}`, ...args);\n  }\n  /** {@inheritDoc Logger.info} */\n  info(source, category, ...args) {\n    console.info(`${source}.${category}`, ...args);\n  }\n  /** {@inheritDoc Logger.warn} */\n  warn(source, category, ...args) {\n    console.warn(`${source}.${category}`, ...args);\n  }\n  /** {@inheritDoc Logger.error} */\n  error(source, category, ...args) {\n    console.error(`${source}.${category}`, ...args);\n  }\n  /** {@inheritDoc Logger.perf} */\n  perf(source, category, event, phase, ...args) {\n    console.info(`${source}.${category}.${event}.${phase}`, ...args);\n  }\n};\nvar LogLevel = /* @__PURE__ */ ((LogLevel2) => {\n  LogLevel2[LogLevel2[\"Debug\"] = 0] = \"Debug\";\n  LogLevel2[LogLevel2[\"Info\"] = 1] = \"Info\";\n  LogLevel2[LogLevel2[\"Warn\"] = 2] = \"Warn\";\n  LogLevel2[LogLevel2[\"Error\"] = 3] = \"Error\";\n  return LogLevel2;\n})(LogLevel || {});\nvar LevelLogger = class {\n  /**\n   * create new LevelLogger\n   * @param logger - the original logger\n   * @param level - log level that used for filtering, all logs lower than this level will be filtered out\n   */\n  constructor(logger, level) {\n    this.logger = logger;\n    this.level = level;\n  }\n  /** {@inheritDoc Logger.debug} */\n  debug(source, category, ...args) {\n    if (this.level <= 0 /* Debug */) {\n      this.logger.debug(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.info} */\n  info(source, category, ...args) {\n    if (this.level <= 1 /* Info */) {\n      this.logger.info(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.warn} */\n  warn(source, category, ...args) {\n    if (this.level <= 2 /* Warn */) {\n      this.logger.warn(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.error} */\n  error(source, category, ...args) {\n    if (this.level <= 3 /* Error */) {\n      this.logger.error(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.perf} */\n  perf(source, category, event, phase, ...args) {\n    this.logger.perf(source, category, event, phase, ...args);\n  }\n};\nvar PerfLogger = class {\n  /**\n   * create new PerfLogger\n   */\n  constructor() {\n  }\n  /** {@inheritDoc Logger.debug} */\n  debug(source, category, ...args) {\n  }\n  /** {@inheritDoc Logger.info} */\n  info(source, category, ...args) {\n  }\n  /** {@inheritDoc Logger.warn} */\n  warn(source, category, ...args) {\n  }\n  /** {@inheritDoc Logger.error} */\n  error(source, category, ...args) {\n  }\n  /** {@inheritDoc Logger.perf} */\n  perf(source, category, event, phase, identifier, ...args) {\n    switch (phase) {\n      case \"Begin\":\n        window.performance.mark(`${source}.${category}.${event}.${phase}.${identifier}`, {\n          detail: args\n        });\n        break;\n      case \"End\":\n        window.performance.mark(`${source}.${category}.${event}.${phase}.${identifier}`, {\n          detail: args\n        });\n        window.performance.measure(\n          `${source}.${category}.${event}.Measure.${identifier}`,\n          `${source}.${category}.${event}.Begin.${identifier}`,\n          `${source}.${category}.${event}.End.${identifier}`\n        );\n        break;\n    }\n  }\n};\nvar AllLogger = class {\n  /**\n   * create new PerfLogger\n   */\n  constructor(loggers) {\n    this.loggers = loggers;\n  }\n  /** {@inheritDoc Logger.debug} */\n  debug(source, category, ...args) {\n    for (const logger of this.loggers) {\n      logger.debug(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.info} */\n  info(source, category, ...args) {\n    for (const logger of this.loggers) {\n      logger.info(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.warn} */\n  warn(source, category, ...args) {\n    for (const logger of this.loggers) {\n      logger.warn(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.error} */\n  error(source, category, ...args) {\n    for (const logger of this.loggers) {\n      logger.error(source, category, ...args);\n    }\n  }\n  /** {@inheritDoc Logger.perf} */\n  perf(source, category, event, phase, ...args) {\n    for (const logger of this.loggers) {\n      logger.perf(source, category, event, phase, ...args);\n    }\n  }\n};\n\n// src/task.ts\nvar TaskStage = /* @__PURE__ */ ((TaskStage2) => {\n  TaskStage2[TaskStage2[\"Pending\"] = 0] = \"Pending\";\n  TaskStage2[TaskStage2[\"Resolved\"] = 1] = \"Resolved\";\n  TaskStage2[TaskStage2[\"Rejected\"] = 2] = \"Rejected\";\n  TaskStage2[TaskStage2[\"Aborted\"] = 3] = \"Aborted\";\n  return TaskStage2;\n})(TaskStage || {});\nvar TaskAbortedError = class extends Error {\n  constructor(reason) {\n    super(`Task aborted: ${JSON.stringify(reason)}`);\n    this.name = \"TaskAbortedError\";\n  }\n};\nvar TaskRejectedError = class extends Error {\n  constructor(reason) {\n    super(`Task rejected: ${JSON.stringify(reason)}`);\n    this.name = \"TaskRejectedError\";\n  }\n};\nvar Task = class _Task {\n  constructor() {\n    this.state = {\n      stage: 0 /* Pending */\n    };\n    /**\n     * callbacks that will be executed when task is resolved\n     */\n    this.resolvedCallbacks = [];\n    /**\n     * callbacks that will be executed when task is rejected\n     */\n    this.rejectedCallbacks = [];\n    /**\n     * Promise that will be resolved when task is settled\n     */\n    this._promise = null;\n  }\n  /**\n   * Convert task to promise\n   * @returns promise that will be resolved when task is settled\n   */\n  toPromise() {\n    if (!this._promise) {\n      this._promise = new Promise((resolve, reject) => {\n        this.wait(\n          (result) => resolve(result),\n          (error) => {\n            if (error.type === \"abort\") {\n              reject(new TaskAbortedError(error.reason));\n            } else {\n              reject(new TaskRejectedError(error.reason));\n            }\n          }\n        );\n      });\n    }\n    return this._promise;\n  }\n  /**\n   * wait for task to be settled\n   * @param resolvedCallback - callback for resolved value\n   * @param rejectedCallback - callback for rejected value\n   */\n  wait(resolvedCallback, rejectedCallback) {\n    switch (this.state.stage) {\n      case 0 /* Pending */:\n        this.resolvedCallbacks.push(resolvedCallback);\n        this.rejectedCallbacks.push(rejectedCallback);\n        break;\n      case 1 /* Resolved */:\n        resolvedCallback(this.state.result);\n        break;\n      case 2 /* Rejected */:\n        rejectedCallback({\n          type: \"reject\",\n          reason: this.state.reason\n        });\n        break;\n      case 3 /* Aborted */:\n        rejectedCallback({\n          type: \"abort\",\n          reason: this.state.reason\n        });\n        break;\n    }\n  }\n  /**\n   * resolve task with specific result\n   * @param result - result value\n   */\n  resolve(result) {\n    if (this.state.stage === 0 /* Pending */) {\n      this.state = {\n        stage: 1 /* Resolved */,\n        result\n      };\n      for (const resolvedCallback of this.resolvedCallbacks) {\n        try {\n          resolvedCallback(result);\n        } catch (e) {\n        }\n      }\n      this.resolvedCallbacks = [];\n      this.rejectedCallbacks = [];\n    }\n  }\n  /**\n   * reject task with specific reason\n   * @param reason - abort reason\n   *\n   */\n  reject(reason) {\n    if (this.state.stage === 0 /* Pending */) {\n      this.state = {\n        stage: 2 /* Rejected */,\n        reason\n      };\n      for (const rejectedCallback of this.rejectedCallbacks) {\n        try {\n          rejectedCallback({\n            type: \"reject\",\n            reason\n          });\n        } catch (e) {\n        }\n      }\n      this.resolvedCallbacks = [];\n      this.rejectedCallbacks = [];\n    }\n  }\n  /**\n   * abort task with specific reason\n   * @param reason - abort reason\n   */\n  abort(reason) {\n    if (this.state.stage === 0 /* Pending */) {\n      this.state = {\n        stage: 3 /* Aborted */,\n        reason\n      };\n      for (const rejectedCallback of this.rejectedCallbacks) {\n        try {\n          rejectedCallback({\n            type: \"abort\",\n            reason\n          });\n        } catch (e) {\n        }\n      }\n      this.resolvedCallbacks = [];\n      this.rejectedCallbacks = [];\n    }\n  }\n  /**\n   * fail task with a TaskError from another task\n   * This is a convenience method for error propagation between tasks\n   * @param error - TaskError from another task\n   */\n  fail(error) {\n    if (error.type === \"abort\") {\n      this.abort(error.reason);\n    } else {\n      this.reject(error.reason);\n    }\n  }\n  /**\n   * Static method to wait for all tasks to resolve\n   * Returns a new task that resolves with an array of all results\n   * Rejects immediately if any task fails\n   *\n   * @param tasks - array of tasks to wait for\n   * @returns new task that resolves when all input tasks resolve\n   * @public\n   */\n  static all(tasks) {\n    const combinedTask = new _Task();\n    if (tasks.length === 0) {\n      combinedTask.resolve([]);\n      return combinedTask;\n    }\n    const results = new Array(tasks.length);\n    let resolvedCount = 0;\n    let isSettled = false;\n    tasks.forEach((task, index) => {\n      task.wait(\n        (result) => {\n          if (isSettled) return;\n          results[index] = result;\n          resolvedCount++;\n          if (resolvedCount === tasks.length) {\n            isSettled = true;\n            combinedTask.resolve(results);\n          }\n        },\n        (error) => {\n          if (isSettled) return;\n          isSettled = true;\n          if (error.type === \"abort\") {\n            combinedTask.abort(error.reason);\n          } else {\n            combinedTask.reject(error.reason);\n          }\n        }\n      );\n    });\n    return combinedTask;\n  }\n  /**\n   * Static method to wait for all tasks to settle (resolve, reject, or abort)\n   * Always resolves with an array of settlement results\n   *\n   * @param tasks - array of tasks to wait for\n   * @returns new task that resolves when all input tasks settle\n   * @public\n   */\n  static allSettled(tasks) {\n    const combinedTask = new _Task();\n    if (tasks.length === 0) {\n      combinedTask.resolve([]);\n      return combinedTask;\n    }\n    const results = new Array(tasks.length);\n    let settledCount = 0;\n    tasks.forEach((task, index) => {\n      task.wait(\n        (result) => {\n          results[index] = { status: \"resolved\", value: result };\n          settledCount++;\n          if (settledCount === tasks.length) {\n            combinedTask.resolve(results);\n          }\n        },\n        (error) => {\n          results[index] = {\n            status: error.type === \"abort\" ? \"aborted\" : \"rejected\",\n            reason: error.reason\n          };\n          settledCount++;\n          if (settledCount === tasks.length) {\n            combinedTask.resolve(results);\n          }\n        }\n      );\n    });\n    return combinedTask;\n  }\n  /**\n   * Static method that resolves/rejects with the first task that settles\n   *\n   * @param tasks - array of tasks to race\n   * @returns new task that settles with the first input task that settles\n   * @public\n   */\n  static race(tasks) {\n    const combinedTask = new _Task();\n    if (tasks.length === 0) {\n      combinedTask.reject(\"No tasks provided\");\n      return combinedTask;\n    }\n    let isSettled = false;\n    tasks.forEach((task) => {\n      task.wait(\n        (result) => {\n          if (isSettled) return;\n          isSettled = true;\n          combinedTask.resolve(result);\n        },\n        (error) => {\n          if (isSettled) return;\n          isSettled = true;\n          if (error.type === \"abort\") {\n            combinedTask.abort(error.reason);\n          } else {\n            combinedTask.reject(error.reason);\n          }\n        }\n      );\n    });\n    return combinedTask;\n  }\n  /**\n   * Utility to track progress of multiple tasks\n   *\n   * @param tasks - array of tasks to track\n   * @param onProgress - callback called when any task completes\n   * @returns new task that resolves when all input tasks resolve\n   * @public\n   */\n  static withProgress(tasks, onProgress) {\n    const combinedTask = _Task.all(tasks);\n    if (onProgress) {\n      let completedCount = 0;\n      tasks.forEach((task) => {\n        task.wait(\n          () => {\n            completedCount++;\n            onProgress(completedCount, tasks.length);\n          },\n          () => {\n            completedCount++;\n            onProgress(completedCount, tasks.length);\n          }\n        );\n      });\n    }\n    return combinedTask;\n  }\n};\n\n// src/pdf.ts\nvar PdfSoftHyphenMarker = \"\\xAD\";\nvar PdfZeroWidthSpace = \"\\u200B\";\nvar PdfWordJoiner = \"\\u2060\";\nvar PdfBomOrZwnbsp = \"\\uFEFF\";\nvar PdfNonCharacterFFFE = \"\\uFFFE\";\nvar PdfNonCharacterFFFF = \"\\uFFFF\";\nvar PdfUnwantedTextMarkers = Object.freeze([\n  PdfSoftHyphenMarker,\n  PdfZeroWidthSpace,\n  PdfWordJoiner,\n  PdfBomOrZwnbsp,\n  PdfNonCharacterFFFE,\n  PdfNonCharacterFFFF\n]);\nvar PdfUnwantedTextRegex = new RegExp(`[${PdfUnwantedTextMarkers.join(\"\")}]`, \"g\");\nfunction stripPdfUnwantedMarkers(text) {\n  return text.replace(PdfUnwantedTextRegex, \"\");\n}\nvar PdfZoomMode = /* @__PURE__ */ ((PdfZoomMode2) => {\n  PdfZoomMode2[PdfZoomMode2[\"Unknown\"] = 0] = \"Unknown\";\n  PdfZoomMode2[PdfZoomMode2[\"XYZ\"] = 1] = \"XYZ\";\n  PdfZoomMode2[PdfZoomMode2[\"FitPage\"] = 2] = \"FitPage\";\n  PdfZoomMode2[PdfZoomMode2[\"FitHorizontal\"] = 3] = \"FitHorizontal\";\n  PdfZoomMode2[PdfZoomMode2[\"FitVertical\"] = 4] = \"FitVertical\";\n  PdfZoomMode2[PdfZoomMode2[\"FitRectangle\"] = 5] = \"FitRectangle\";\n  return PdfZoomMode2;\n})(PdfZoomMode || {});\nvar PdfBlendMode = /* @__PURE__ */ ((PdfBlendMode2) => {\n  PdfBlendMode2[PdfBlendMode2[\"Normal\"] = 0] = \"Normal\";\n  PdfBlendMode2[PdfBlendMode2[\"Multiply\"] = 1] = \"Multiply\";\n  PdfBlendMode2[PdfBlendMode2[\"Screen\"] = 2] = \"Screen\";\n  PdfBlendMode2[PdfBlendMode2[\"Overlay\"] = 3] = \"Overlay\";\n  PdfBlendMode2[PdfBlendMode2[\"Darken\"] = 4] = \"Darken\";\n  PdfBlendMode2[PdfBlendMode2[\"Lighten\"] = 5] = \"Lighten\";\n  PdfBlendMode2[PdfBlendMode2[\"ColorDodge\"] = 6] = \"ColorDodge\";\n  PdfBlendMode2[PdfBlendMode2[\"ColorBurn\"] = 7] = \"ColorBurn\";\n  PdfBlendMode2[PdfBlendMode2[\"HardLight\"] = 8] = \"HardLight\";\n  PdfBlendMode2[PdfBlendMode2[\"SoftLight\"] = 9] = \"SoftLight\";\n  PdfBlendMode2[PdfBlendMode2[\"Difference\"] = 10] = \"Difference\";\n  PdfBlendMode2[PdfBlendMode2[\"Exclusion\"] = 11] = \"Exclusion\";\n  PdfBlendMode2[PdfBlendMode2[\"Hue\"] = 12] = \"Hue\";\n  PdfBlendMode2[PdfBlendMode2[\"Saturation\"] = 13] = \"Saturation\";\n  PdfBlendMode2[PdfBlendMode2[\"Color\"] = 14] = \"Color\";\n  PdfBlendMode2[PdfBlendMode2[\"Luminosity\"] = 15] = \"Luminosity\";\n  return PdfBlendMode2;\n})(PdfBlendMode || {});\nvar MixedBlendMode = Symbol(\"mixed\");\nvar BLEND_MODE_INFOS = Object.freeze([\n  { id: 0 /* Normal */, label: \"Normal\", css: \"normal\" },\n  { id: 1 /* Multiply */, label: \"Multiply\", css: \"multiply\" },\n  { id: 2 /* Screen */, label: \"Screen\", css: \"screen\" },\n  { id: 3 /* Overlay */, label: \"Overlay\", css: \"overlay\" },\n  { id: 4 /* Darken */, label: \"Darken\", css: \"darken\" },\n  { id: 5 /* Lighten */, label: \"Lighten\", css: \"lighten\" },\n  { id: 6 /* ColorDodge */, label: \"Color Dodge\", css: \"color-dodge\" },\n  { id: 7 /* ColorBurn */, label: \"Color Burn\", css: \"color-burn\" },\n  { id: 8 /* HardLight */, label: \"Hard Light\", css: \"hard-light\" },\n  { id: 9 /* SoftLight */, label: \"Soft Light\", css: \"soft-light\" },\n  { id: 10 /* Difference */, label: \"Difference\", css: \"difference\" },\n  { id: 11 /* Exclusion */, label: \"Exclusion\", css: \"exclusion\" },\n  { id: 12 /* Hue */, label: \"Hue\", css: \"hue\" },\n  { id: 13 /* Saturation */, label: \"Saturation\", css: \"saturation\" },\n  { id: 14 /* Color */, label: \"Color\", css: \"color\" },\n  { id: 15 /* Luminosity */, label: \"Luminosity\", css: \"luminosity\" }\n]);\nvar enumToInfo = BLEND_MODE_INFOS.reduce(\n  (m, info) => {\n    m[info.id] = info;\n    return m;\n  },\n  {}\n);\nvar cssToEnum = BLEND_MODE_INFOS.reduce((m, info) => {\n  m[info.css] = info.id;\n  return m;\n}, {});\nfunction getBlendModeInfo(mode) {\n  return enumToInfo[mode] ?? enumToInfo[0 /* Normal */];\n}\nfunction blendModeToCss(mode) {\n  return getBlendModeInfo(mode).css;\n}\nfunction cssToBlendMode(value) {\n  return cssToEnum[value];\n}\nfunction blendModeLabel(mode) {\n  return getBlendModeInfo(mode).label;\n}\nfunction reduceBlendModes(modes) {\n  if (!modes.length) return 0 /* Normal */;\n  const first = modes[0];\n  return modes.every((m) => m === first) ? first : MixedBlendMode;\n}\nvar blendModeSelectOptions = BLEND_MODE_INFOS.map((info) => ({\n  value: info.id,\n  label: info.label\n}));\nfunction uiBlendModeDisplay(value) {\n  return value === MixedBlendMode ? \"(mixed)\" : blendModeLabel(value);\n}\nvar PdfActionType = /* @__PURE__ */ ((PdfActionType2) => {\n  PdfActionType2[PdfActionType2[\"Unsupported\"] = 0] = \"Unsupported\";\n  PdfActionType2[PdfActionType2[\"Goto\"] = 1] = \"Goto\";\n  PdfActionType2[PdfActionType2[\"RemoteGoto\"] = 2] = \"RemoteGoto\";\n  PdfActionType2[PdfActionType2[\"URI\"] = 3] = \"URI\";\n  PdfActionType2[PdfActionType2[\"LaunchAppOrOpenFile\"] = 4] = \"LaunchAppOrOpenFile\";\n  return PdfActionType2;\n})(PdfActionType || {});\nvar PdfAnnotationSubtype = /* @__PURE__ */ ((PdfAnnotationSubtype2) => {\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"TEXT\"] = 1] = \"TEXT\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"LINK\"] = 2] = \"LINK\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"FREETEXT\"] = 3] = \"FREETEXT\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"LINE\"] = 4] = \"LINE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"SQUARE\"] = 5] = \"SQUARE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"CIRCLE\"] = 6] = \"CIRCLE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"POLYGON\"] = 7] = \"POLYGON\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"POLYLINE\"] = 8] = \"POLYLINE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"HIGHLIGHT\"] = 9] = \"HIGHLIGHT\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"UNDERLINE\"] = 10] = \"UNDERLINE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"SQUIGGLY\"] = 11] = \"SQUIGGLY\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"STRIKEOUT\"] = 12] = \"STRIKEOUT\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"STAMP\"] = 13] = \"STAMP\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"CARET\"] = 14] = \"CARET\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"INK\"] = 15] = \"INK\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"POPUP\"] = 16] = \"POPUP\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"FILEATTACHMENT\"] = 17] = \"FILEATTACHMENT\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"SOUND\"] = 18] = \"SOUND\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"MOVIE\"] = 19] = \"MOVIE\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"WIDGET\"] = 20] = \"WIDGET\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"SCREEN\"] = 21] = \"SCREEN\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"PRINTERMARK\"] = 22] = \"PRINTERMARK\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"TRAPNET\"] = 23] = \"TRAPNET\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"WATERMARK\"] = 24] = \"WATERMARK\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"THREED\"] = 25] = \"THREED\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"RICHMEDIA\"] = 26] = \"RICHMEDIA\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"XFAWIDGET\"] = 27] = \"XFAWIDGET\";\n  PdfAnnotationSubtype2[PdfAnnotationSubtype2[\"REDACT\"] = 28] = \"REDACT\";\n  return PdfAnnotationSubtype2;\n})(PdfAnnotationSubtype || {});\nvar PdfAnnotationSubtypeName = {\n  [0 /* UNKNOWN */]: \"unknow\",\n  [1 /* TEXT */]: \"text\",\n  [2 /* LINK */]: \"link\",\n  [3 /* FREETEXT */]: \"freetext\",\n  [4 /* LINE */]: \"line\",\n  [5 /* SQUARE */]: \"square\",\n  [6 /* CIRCLE */]: \"circle\",\n  [7 /* POLYGON */]: \"polygon\",\n  [8 /* POLYLINE */]: \"polyline\",\n  [9 /* HIGHLIGHT */]: \"highlight\",\n  [10 /* UNDERLINE */]: \"underline\",\n  [11 /* SQUIGGLY */]: \"squiggly\",\n  [12 /* STRIKEOUT */]: \"strikeout\",\n  [13 /* STAMP */]: \"stamp\",\n  [14 /* CARET */]: \"caret\",\n  [15 /* INK */]: \"ink\",\n  [16 /* POPUP */]: \"popup\",\n  [17 /* FILEATTACHMENT */]: \"fileattachment\",\n  [18 /* SOUND */]: \"sound\",\n  [19 /* MOVIE */]: \"movie\",\n  [20 /* WIDGET */]: \"widget\",\n  [21 /* SCREEN */]: \"screen\",\n  [22 /* PRINTERMARK */]: \"printermark\",\n  [23 /* TRAPNET */]: \"trapnet\",\n  [24 /* WATERMARK */]: \"watermark\",\n  [25 /* THREED */]: \"threed\",\n  [26 /* RICHMEDIA */]: \"richmedia\",\n  [27 /* XFAWIDGET */]: \"xfawidget\",\n  [28 /* REDACT */]: \"redact\"\n};\nvar PdfAnnotationObjectStatus = /* @__PURE__ */ ((PdfAnnotationObjectStatus2) => {\n  PdfAnnotationObjectStatus2[PdfAnnotationObjectStatus2[\"Created\"] = 0] = \"Created\";\n  PdfAnnotationObjectStatus2[PdfAnnotationObjectStatus2[\"Committed\"] = 1] = \"Committed\";\n  return PdfAnnotationObjectStatus2;\n})(PdfAnnotationObjectStatus || {});\nvar AppearanceMode = /* @__PURE__ */ ((AppearanceMode2) => {\n  AppearanceMode2[AppearanceMode2[\"Normal\"] = 0] = \"Normal\";\n  AppearanceMode2[AppearanceMode2[\"Rollover\"] = 1] = \"Rollover\";\n  AppearanceMode2[AppearanceMode2[\"Down\"] = 2] = \"Down\";\n  return AppearanceMode2;\n})(AppearanceMode || {});\nvar PdfAnnotationState = /* @__PURE__ */ ((PdfAnnotationState2) => {\n  PdfAnnotationState2[\"Marked\"] = \"Marked\";\n  PdfAnnotationState2[\"Unmarked\"] = \"Unmarked\";\n  PdfAnnotationState2[\"Accepted\"] = \"Accepted\";\n  PdfAnnotationState2[\"Rejected\"] = \"Rejected\";\n  PdfAnnotationState2[\"Complete\"] = \"Complete\";\n  PdfAnnotationState2[\"Cancelled\"] = \"Cancelled\";\n  PdfAnnotationState2[\"None\"] = \"None\";\n  return PdfAnnotationState2;\n})(PdfAnnotationState || {});\nvar PdfAnnotationStateModel = /* @__PURE__ */ ((PdfAnnotationStateModel2) => {\n  PdfAnnotationStateModel2[\"Marked\"] = \"Marked\";\n  PdfAnnotationStateModel2[\"Reviewed\"] = \"Reviewed\";\n  return PdfAnnotationStateModel2;\n})(PdfAnnotationStateModel || {});\nvar PDF_FORM_FIELD_TYPE = /* @__PURE__ */ ((PDF_FORM_FIELD_TYPE2) => {\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"PUSHBUTTON\"] = 1] = \"PUSHBUTTON\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"CHECKBOX\"] = 2] = \"CHECKBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"RADIOBUTTON\"] = 3] = \"RADIOBUTTON\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"COMBOBOX\"] = 4] = \"COMBOBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"LISTBOX\"] = 5] = \"LISTBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"TEXTFIELD\"] = 6] = \"TEXTFIELD\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"SIGNATURE\"] = 7] = \"SIGNATURE\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA\"] = 8] = \"XFA\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_CHECKBOX\"] = 9] = \"XFA_CHECKBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_COMBOBOX\"] = 10] = \"XFA_COMBOBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_IMAGEFIELD\"] = 11] = \"XFA_IMAGEFIELD\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_LISTBOX\"] = 12] = \"XFA_LISTBOX\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_PUSHBUTTON\"] = 13] = \"XFA_PUSHBUTTON\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_SIGNATURE\"] = 14] = \"XFA_SIGNATURE\";\n  PDF_FORM_FIELD_TYPE2[PDF_FORM_FIELD_TYPE2[\"XFA_TEXTFIELD\"] = 15] = \"XFA_TEXTFIELD\";\n  return PDF_FORM_FIELD_TYPE2;\n})(PDF_FORM_FIELD_TYPE || {});\nvar PdfAnnotationColorType = /* @__PURE__ */ ((PdfAnnotationColorType2) => {\n  PdfAnnotationColorType2[PdfAnnotationColorType2[\"Color\"] = 0] = \"Color\";\n  PdfAnnotationColorType2[PdfAnnotationColorType2[\"InteriorColor\"] = 1] = \"InteriorColor\";\n  return PdfAnnotationColorType2;\n})(PdfAnnotationColorType || {});\nvar PdfAnnotationBorderStyle = /* @__PURE__ */ ((PdfAnnotationBorderStyle2) => {\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"SOLID\"] = 1] = \"SOLID\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"DASHED\"] = 2] = \"DASHED\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"BEVELED\"] = 3] = \"BEVELED\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"INSET\"] = 4] = \"INSET\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"UNDERLINE\"] = 5] = \"UNDERLINE\";\n  PdfAnnotationBorderStyle2[PdfAnnotationBorderStyle2[\"CLOUDY\"] = 6] = \"CLOUDY\";\n  return PdfAnnotationBorderStyle2;\n})(PdfAnnotationBorderStyle || {});\nvar PdfAnnotationFlags = /* @__PURE__ */ ((PdfAnnotationFlags2) => {\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"NONE\"] = 0] = \"NONE\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"INVISIBLE\"] = 1] = \"INVISIBLE\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"HIDDEN\"] = 2] = \"HIDDEN\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"PRINT\"] = 4] = \"PRINT\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"NO_ZOOM\"] = 8] = \"NO_ZOOM\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"NO_ROTATE\"] = 16] = \"NO_ROTATE\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"NO_VIEW\"] = 32] = \"NO_VIEW\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"READ_ONLY\"] = 64] = \"READ_ONLY\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"LOCKED\"] = 128] = \"LOCKED\";\n  PdfAnnotationFlags2[PdfAnnotationFlags2[\"TOGGLE_NOVIEW\"] = 256] = \"TOGGLE_NOVIEW\";\n  return PdfAnnotationFlags2;\n})(PdfAnnotationFlags || {});\nvar PDF_FORM_FIELD_FLAG = /* @__PURE__ */ ((PDF_FORM_FIELD_FLAG2) => {\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"NONE\"] = 0] = \"NONE\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"READONLY\"] = 1] = \"READONLY\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"REQUIRED\"] = 2] = \"REQUIRED\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"NOEXPORT\"] = 4] = \"NOEXPORT\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"TEXT_MULTIPLINE\"] = 4096] = \"TEXT_MULTIPLINE\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"TEXT_PASSWORD\"] = 8192] = \"TEXT_PASSWORD\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"CHOICE_COMBO\"] = 131072] = \"CHOICE_COMBO\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"CHOICE_EDIT\"] = 262144] = \"CHOICE_EDIT\";\n  PDF_FORM_FIELD_FLAG2[PDF_FORM_FIELD_FLAG2[\"CHOICE_MULTL_SELECT\"] = 2097152] = \"CHOICE_MULTL_SELECT\";\n  return PDF_FORM_FIELD_FLAG2;\n})(PDF_FORM_FIELD_FLAG || {});\nvar PdfPageObjectType = /* @__PURE__ */ ((PdfPageObjectType2) => {\n  PdfPageObjectType2[PdfPageObjectType2[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  PdfPageObjectType2[PdfPageObjectType2[\"TEXT\"] = 1] = \"TEXT\";\n  PdfPageObjectType2[PdfPageObjectType2[\"PATH\"] = 2] = \"PATH\";\n  PdfPageObjectType2[PdfPageObjectType2[\"IMAGE\"] = 3] = \"IMAGE\";\n  PdfPageObjectType2[PdfPageObjectType2[\"SHADING\"] = 4] = \"SHADING\";\n  PdfPageObjectType2[PdfPageObjectType2[\"FORM\"] = 5] = \"FORM\";\n  return PdfPageObjectType2;\n})(PdfPageObjectType || {});\nvar PdfAnnotationFlagName = Object.freeze({\n  [1 /* INVISIBLE */]: \"invisible\",\n  [2 /* HIDDEN */]: \"hidden\",\n  [4 /* PRINT */]: \"print\",\n  [8 /* NO_ZOOM */]: \"noZoom\",\n  [16 /* NO_ROTATE */]: \"noRotate\",\n  [32 /* NO_VIEW */]: \"noView\",\n  [64 /* READ_ONLY */]: \"readOnly\",\n  [128 /* LOCKED */]: \"locked\",\n  [256 /* TOGGLE_NOVIEW */]: \"toggleNoView\"\n});\nvar PdfAnnotationFlagValue = Object.entries(\n  PdfAnnotationFlagName\n).reduce(\n  (acc, [bit, name]) => {\n    acc[name] = Number(bit);\n    return acc;\n  },\n  {}\n);\nfunction flagsToNames(raw) {\n  return Object.keys(PdfAnnotationFlagName).filter((flag) => (raw & flag) !== 0).map((flag) => PdfAnnotationFlagName[flag]);\n}\nfunction namesToFlags(names) {\n  return names.reduce(\n    (mask, name) => mask | PdfAnnotationFlagValue[name],\n    0 /* NONE */\n  );\n}\nvar PdfSegmentObjectType = /* @__PURE__ */ ((PdfSegmentObjectType2) => {\n  PdfSegmentObjectType2[PdfSegmentObjectType2[\"UNKNOWN\"] = -1] = \"UNKNOWN\";\n  PdfSegmentObjectType2[PdfSegmentObjectType2[\"LINETO\"] = 0] = \"LINETO\";\n  PdfSegmentObjectType2[PdfSegmentObjectType2[\"BEZIERTO\"] = 1] = \"BEZIERTO\";\n  PdfSegmentObjectType2[PdfSegmentObjectType2[\"MOVETO\"] = 2] = \"MOVETO\";\n  return PdfSegmentObjectType2;\n})(PdfSegmentObjectType || {});\nvar PdfEngineFeature = /* @__PURE__ */ ((PdfEngineFeature2) => {\n  PdfEngineFeature2[PdfEngineFeature2[\"RenderPage\"] = 0] = \"RenderPage\";\n  PdfEngineFeature2[PdfEngineFeature2[\"RenderPageRect\"] = 1] = \"RenderPageRect\";\n  PdfEngineFeature2[PdfEngineFeature2[\"Thumbnails\"] = 2] = \"Thumbnails\";\n  PdfEngineFeature2[PdfEngineFeature2[\"Bookmarks\"] = 3] = \"Bookmarks\";\n  PdfEngineFeature2[PdfEngineFeature2[\"Annotations\"] = 4] = \"Annotations\";\n  return PdfEngineFeature2;\n})(PdfEngineFeature || {});\nvar PdfEngineOperation = /* @__PURE__ */ ((PdfEngineOperation2) => {\n  PdfEngineOperation2[PdfEngineOperation2[\"Create\"] = 0] = \"Create\";\n  PdfEngineOperation2[PdfEngineOperation2[\"Read\"] = 1] = \"Read\";\n  PdfEngineOperation2[PdfEngineOperation2[\"Update\"] = 2] = \"Update\";\n  PdfEngineOperation2[PdfEngineOperation2[\"Delete\"] = 3] = \"Delete\";\n  return PdfEngineOperation2;\n})(PdfEngineOperation || {});\nvar MatchFlag = /* @__PURE__ */ ((MatchFlag2) => {\n  MatchFlag2[MatchFlag2[\"None\"] = 0] = \"None\";\n  MatchFlag2[MatchFlag2[\"MatchCase\"] = 1] = \"MatchCase\";\n  MatchFlag2[MatchFlag2[\"MatchWholeWord\"] = 2] = \"MatchWholeWord\";\n  MatchFlag2[MatchFlag2[\"MatchConsecutive\"] = 4] = \"MatchConsecutive\";\n  return MatchFlag2;\n})(MatchFlag || {});\nfunction unionFlags(flags) {\n  return flags.reduce((flag, currFlag) => {\n    return flag | currFlag;\n  }, 0 /* None */);\n}\nfunction compareSearchTarget(targetA, targetB) {\n  const flagA = unionFlags(targetA.flags);\n  const flagB = unionFlags(targetB.flags);\n  return flagA === flagB && targetA.keyword === targetB.keyword;\n}\nvar PdfPermission = /* @__PURE__ */ ((PdfPermission2) => {\n  PdfPermission2[PdfPermission2[\"PrintDocument\"] = 8] = \"PrintDocument\";\n  PdfPermission2[PdfPermission2[\"ModifyContent\"] = 16] = \"ModifyContent\";\n  PdfPermission2[PdfPermission2[\"CopyOrExtract\"] = 32] = \"CopyOrExtract\";\n  PdfPermission2[PdfPermission2[\"AddOrModifyTextAnnot\"] = 64] = \"AddOrModifyTextAnnot\";\n  PdfPermission2[PdfPermission2[\"FillInExistingForm\"] = 512] = \"FillInExistingForm\";\n  PdfPermission2[PdfPermission2[\"ExtractTextOrGraphics\"] = 1024] = \"ExtractTextOrGraphics\";\n  PdfPermission2[PdfPermission2[\"AssembleDocument\"] = 2048] = \"AssembleDocument\";\n  PdfPermission2[PdfPermission2[\"PrintHighQuality\"] = 4096] = \"PrintHighQuality\";\n  return PdfPermission2;\n})(PdfPermission || {});\nvar PdfPageFlattenFlag = /* @__PURE__ */ ((PdfPageFlattenFlag2) => {\n  PdfPageFlattenFlag2[PdfPageFlattenFlag2[\"Display\"] = 0] = \"Display\";\n  PdfPageFlattenFlag2[PdfPageFlattenFlag2[\"Print\"] = 1] = \"Print\";\n  return PdfPageFlattenFlag2;\n})(PdfPageFlattenFlag || {});\nvar PdfPageFlattenResult = /* @__PURE__ */ ((PdfPageFlattenResult2) => {\n  PdfPageFlattenResult2[PdfPageFlattenResult2[\"Fail\"] = 0] = \"Fail\";\n  PdfPageFlattenResult2[PdfPageFlattenResult2[\"Success\"] = 1] = \"Success\";\n  PdfPageFlattenResult2[PdfPageFlattenResult2[\"NothingToDo\"] = 2] = \"NothingToDo\";\n  return PdfPageFlattenResult2;\n})(PdfPageFlattenResult || {});\nvar PdfErrorCode = /* @__PURE__ */ ((PdfErrorCode2) => {\n  PdfErrorCode2[PdfErrorCode2[\"Ok\"] = 0] = \"Ok\";\n  PdfErrorCode2[PdfErrorCode2[\"Unknown\"] = 1] = \"Unknown\";\n  PdfErrorCode2[PdfErrorCode2[\"NotFound\"] = 2] = \"NotFound\";\n  PdfErrorCode2[PdfErrorCode2[\"WrongFormat\"] = 3] = \"WrongFormat\";\n  PdfErrorCode2[PdfErrorCode2[\"Password\"] = 4] = \"Password\";\n  PdfErrorCode2[PdfErrorCode2[\"Security\"] = 5] = \"Security\";\n  PdfErrorCode2[PdfErrorCode2[\"PageError\"] = 6] = \"PageError\";\n  PdfErrorCode2[PdfErrorCode2[\"XFALoad\"] = 7] = \"XFALoad\";\n  PdfErrorCode2[PdfErrorCode2[\"XFALayout\"] = 8] = \"XFALayout\";\n  PdfErrorCode2[PdfErrorCode2[\"Cancelled\"] = 9] = \"Cancelled\";\n  PdfErrorCode2[PdfErrorCode2[\"Initialization\"] = 10] = \"Initialization\";\n  PdfErrorCode2[PdfErrorCode2[\"NotReady\"] = 11] = \"NotReady\";\n  PdfErrorCode2[PdfErrorCode2[\"NotSupport\"] = 12] = \"NotSupport\";\n  PdfErrorCode2[PdfErrorCode2[\"LoadDoc\"] = 13] = \"LoadDoc\";\n  PdfErrorCode2[PdfErrorCode2[\"DocNotOpen\"] = 14] = \"DocNotOpen\";\n  PdfErrorCode2[PdfErrorCode2[\"CantCloseDoc\"] = 15] = \"CantCloseDoc\";\n  PdfErrorCode2[PdfErrorCode2[\"CantCreateNewDoc\"] = 16] = \"CantCreateNewDoc\";\n  PdfErrorCode2[PdfErrorCode2[\"CantImportPages\"] = 17] = \"CantImportPages\";\n  PdfErrorCode2[PdfErrorCode2[\"CantCreateAnnot\"] = 18] = \"CantCreateAnnot\";\n  PdfErrorCode2[PdfErrorCode2[\"CantSetAnnotRect\"] = 19] = \"CantSetAnnotRect\";\n  PdfErrorCode2[PdfErrorCode2[\"CantSetAnnotContent\"] = 20] = \"CantSetAnnotContent\";\n  PdfErrorCode2[PdfErrorCode2[\"CantRemoveInkList\"] = 21] = \"CantRemoveInkList\";\n  PdfErrorCode2[PdfErrorCode2[\"CantAddInkStoke\"] = 22] = \"CantAddInkStoke\";\n  PdfErrorCode2[PdfErrorCode2[\"CantReadAttachmentSize\"] = 23] = \"CantReadAttachmentSize\";\n  PdfErrorCode2[PdfErrorCode2[\"CantReadAttachmentContent\"] = 24] = \"CantReadAttachmentContent\";\n  PdfErrorCode2[PdfErrorCode2[\"CantFocusAnnot\"] = 25] = \"CantFocusAnnot\";\n  PdfErrorCode2[PdfErrorCode2[\"CantSelectText\"] = 26] = \"CantSelectText\";\n  PdfErrorCode2[PdfErrorCode2[\"CantSelectOption\"] = 27] = \"CantSelectOption\";\n  PdfErrorCode2[PdfErrorCode2[\"CantCheckField\"] = 28] = \"CantCheckField\";\n  return PdfErrorCode2;\n})(PdfErrorCode || {});\nvar PdfTaskHelper = class {\n  /**\n   * Create a task\n   * @returns new task\n   */\n  static create() {\n    return new Task();\n  }\n  /**\n   * Create a task that has been resolved with value\n   * @param result - resolved value\n   * @returns resolved task\n   */\n  static resolve(result) {\n    const task = new Task();\n    task.resolve(result);\n    return task;\n  }\n  /**\n   * Create a task that has been rejected with error\n   * @param reason - rejected error\n   * @returns rejected task\n   */\n  static reject(reason) {\n    const task = new Task();\n    task.reject(reason);\n    return task;\n  }\n  /**\n   * Create a task that has been aborted with error\n   * @param reason - aborted error\n   * @returns aborted task\n   */\n  static abort(reason) {\n    const task = new Task();\n    task.reject(reason);\n    return task;\n  }\n};\n\n// src/color.ts\nfunction pdfAlphaColorToWebAlphaColor(c) {\n  const clamp = (n) => Math.max(0, Math.min(255, n));\n  const toHex = (n) => clamp(n).toString(16).padStart(2, \"0\");\n  const color = `#${toHex(c.red)}${toHex(c.green)}${toHex(c.blue)}`;\n  const opacity = clamp(c.alpha) / 255;\n  return { color, opacity };\n}\nfunction webAlphaColorToPdfAlphaColor({ color, opacity }) {\n  if (/^#?[0-9a-f]{3}$/i.test(color)) {\n    color = color.replace(/^#?([0-9a-f])([0-9a-f])([0-9a-f])$/i, \"#$1$1$2$2$3$3\").toLowerCase();\n  }\n  const [, r, g, b] = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(color) ?? (() => {\n    throw new Error(`Invalid hex colour: \\u201C${color}\\u201D`);\n  })();\n  const clamp = (n, hi = 255) => Math.max(0, Math.min(hi, n));\n  return {\n    red: parseInt(r, 16),\n    green: parseInt(g, 16),\n    blue: parseInt(b, 16),\n    alpha: clamp(Math.round(opacity * 255))\n  };\n}\n\n// src/date.ts\nfunction pdfDateToDate(pdf) {\n  if (!pdf?.startsWith(\"D:\") || pdf.length < 16) return;\n  const y = +pdf.slice(2, 6);\n  const mo = +pdf.slice(6, 8) - 1;\n  const d = +pdf.slice(8, 10);\n  const H = +pdf.slice(10, 12);\n  const M = +pdf.slice(12, 14);\n  const S = +pdf.slice(14, 16);\n  return new Date(Date.UTC(y, mo, d, H, M, S));\n}\nfunction dateToPdfDate(date = /* @__PURE__ */ new Date()) {\n  const z = (n, len = 2) => n.toString().padStart(len, \"0\");\n  const YYYY = date.getUTCFullYear();\n  const MM = z(date.getUTCMonth() + 1);\n  const DD = z(date.getUTCDate());\n  const HH = z(date.getUTCHours());\n  const mm = z(date.getUTCMinutes());\n  const SS = z(date.getUTCSeconds());\n  return `D:${YYYY}${MM}${DD}${HH}${mm}${SS}`;\n}\n\n// src/index.ts\nfunction ignore() {\n}\nexport {\n  AllLogger,\n  AppearanceMode,\n  ConsoleLogger,\n  LevelLogger,\n  LogLevel,\n  MatchFlag,\n  MixedBlendMode,\n  NoopLogger,\n  PDF_FORM_FIELD_FLAG,\n  PDF_FORM_FIELD_TYPE,\n  PdfActionType,\n  PdfAnnotationBorderStyle,\n  PdfAnnotationColorType,\n  PdfAnnotationFlagName,\n  PdfAnnotationFlags,\n  PdfAnnotationObjectStatus,\n  PdfAnnotationState,\n  PdfAnnotationStateModel,\n  PdfAnnotationSubtype,\n  PdfAnnotationSubtypeName,\n  PdfBlendMode,\n  PdfBomOrZwnbsp,\n  PdfEngineFeature,\n  PdfEngineOperation,\n  PdfErrorCode,\n  PdfNonCharacterFFFE,\n  PdfNonCharacterFFFF,\n  PdfPageFlattenFlag,\n  PdfPageFlattenResult,\n  PdfPageObjectType,\n  PdfPermission,\n  PdfSegmentObjectType,\n  PdfSoftHyphenMarker,\n  PdfTaskHelper,\n  PdfUnwantedTextMarkers,\n  PdfUnwantedTextRegex,\n  PdfWordJoiner,\n  PdfZeroWidthSpace,\n  PdfZoomMode,\n  PerfLogger,\n  Rotation,\n  Task,\n  TaskAbortedError,\n  TaskRejectedError,\n  TaskStage,\n  blendModeLabel,\n  blendModeSelectOptions,\n  blendModeToCss,\n  boundingRect,\n  calculateAngle,\n  calculateDegree,\n  compareSearchTarget,\n  cssToBlendMode,\n  dateToPdfDate,\n  flagsToNames,\n  getBlendModeInfo,\n  ignore,\n  makeMatrix,\n  namesToFlags,\n  pdfAlphaColorToWebAlphaColor,\n  pdfDateToDate,\n  quadToRect,\n  rectToQuad,\n  reduceBlendModes,\n  restoreOffset,\n  restorePosition,\n  restoreRect,\n  rotatePosition,\n  rotateRect,\n  scalePosition,\n  scaleRect,\n  stripPdfUnwantedMarkers,\n  swap,\n  toIntPos,\n  toIntRect,\n  toIntSize,\n  transformPosition,\n  transformRect,\n  transformSize,\n  uiBlendModeDisplay,\n  unionFlags,\n  webAlphaColorToPdfAlphaColor\n};\n//# sourceMappingURL=index.js.map","import { PdfDocumentObject, PdfPageObject, Rotation } from '@embedpdf/models';\nimport { PluginRegistryConfig } from '../types/plugin';\n\nexport interface CoreState {\n  scale: number;\n  rotation: Rotation;\n  document: PdfDocumentObject | null;\n  pages: PdfPageObject[][];\n  loading: boolean;\n  error: string | null;\n}\n\nexport const initialCoreState: (config?: PluginRegistryConfig) => CoreState = (config) => ({\n  scale: config?.scale ?? 1,\n  rotation: config?.rotation ?? Rotation.Degree0,\n  document: null,\n  pages: [],\n  loading: false,\n  error: null,\n});\n","import { Reducer } from './types';\nimport { CoreState } from './initial-state';\nimport {\n  CoreAction,\n  LOAD_DOCUMENT,\n  SET_DOCUMENT,\n  SET_DOCUMENT_ERROR,\n  SET_PAGES,\n  SET_ROTATION,\n  SET_SCALE,\n} from './actions';\n\nexport const coreReducer: Reducer<CoreState, CoreAction> = (state, action): CoreState => {\n  switch (action.type) {\n    case LOAD_DOCUMENT:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n\n    case SET_DOCUMENT:\n      return {\n        ...state,\n        document: action.payload,\n        pages: action.payload.pages.map((page) => [page]),\n        loading: false,\n        error: null,\n      };\n\n    case SET_ROTATION:\n      return {\n        ...state,\n        rotation: action.payload,\n      };\n\n    case SET_PAGES:\n      return {\n        ...state,\n        pages: action.payload,\n      };\n\n    case SET_DOCUMENT_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n\n    case SET_SCALE:\n      return {\n        ...state,\n        scale: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { DependencyResolver } from '../utils/dependency-resolver';\nimport {\n  IPlugin,\n  PluginBatchRegistration,\n  PluginManifest,\n  PluginStatus,\n  PluginPackage,\n  PluginRegistryConfig,\n} from '../types/plugin';\nimport {\n  PluginRegistrationError,\n  PluginNotFoundError,\n  CircularDependencyError,\n  CapabilityNotFoundError,\n  PluginConfigurationError,\n} from '../types/errors';\nimport { ignore, PdfEngine, Rotation } from '@embedpdf/models';\nimport { Action, CoreState, Store, initialCoreState, Reducer } from '../store';\nimport { CoreAction } from '../store/actions';\nimport { coreReducer } from '../store/reducer';\n\n// Define a more flexible generic type for plugin registrations\ninterface PluginRegistration {\n  // Use existential types for the plugin package to allow accepting any plugin type\n  package: PluginPackage<any, any, any, any>;\n  config?: any;\n}\n\nexport class PluginRegistry {\n  private plugins: Map<string, IPlugin> = new Map();\n  private manifests: Map<string, PluginManifest> = new Map();\n  private capabilities: Map<string, string> = new Map(); // capability -> pluginId\n  private status: Map<string, PluginStatus> = new Map();\n  private resolver: DependencyResolver;\n  private configurations: Map<string, unknown> = new Map();\n  private engine: PdfEngine;\n  private engineInitialized = false;\n  private store: Store<CoreState, CoreAction>;\n  private initPromise: Promise<void> | null = null;\n\n  private pendingRegistrations: PluginRegistration[] = [];\n  private processingRegistrations: PluginRegistration[] = [];\n  private initialized = false;\n  private isInitializing = false;\n  private initialCoreState: CoreState;\n  private pluginsReadyPromise: Promise<void> | null = null;\n  private destroyed = false;\n\n  constructor(engine: PdfEngine, config?: PluginRegistryConfig) {\n    this.resolver = new DependencyResolver();\n    this.engine = engine;\n    this.initialCoreState = initialCoreState(config);\n    this.store = new Store<CoreState, CoreAction>(coreReducer, this.initialCoreState);\n  }\n\n  /**\n   * Ensure engine is initialized before proceeding\n   */\n  private async ensureEngineInitialized(): Promise<void> {\n    if (this.engineInitialized) {\n      return;\n    }\n\n    if (this.engine.initialize) {\n      const task = this.engine.initialize();\n      await task.toPromise();\n      this.engineInitialized = true;\n    } else {\n      this.engineInitialized = true;\n    }\n  }\n\n  /**\n   * Register a plugin without initializing it\n   */\n  registerPlugin<\n    TPlugin extends IPlugin<TConfig>,\n    TConfig = unknown,\n    TState = unknown,\n    TAction extends Action = Action,\n  >(\n    pluginPackage: PluginPackage<TPlugin, TConfig, TState, TAction>,\n    config?: Partial<TConfig>,\n  ): void {\n    if (this.initialized && !this.isInitializing) {\n      throw new PluginRegistrationError('Cannot register plugins after initialization');\n    }\n\n    this.validateManifest(pluginPackage.manifest);\n\n    // Use appropriate typing for store methods\n    this.store.addPluginReducer(\n      pluginPackage.manifest.id,\n      // We need one type assertion here since we can't fully reconcile TAction with Action\n      // due to TypeScript's type system limitations with generic variance\n      pluginPackage.reducer as Reducer<TState, Action>,\n      'function' === typeof pluginPackage.initialState\n        ? (pluginPackage.initialState as (coreState: CoreState, config: TConfig) => TState)(\n            this.initialCoreState,\n            {\n              ...pluginPackage.manifest.defaultConfig,\n              ...config,\n            },\n          )\n        : pluginPackage.initialState,\n    );\n\n    this.pendingRegistrations.push({\n      package: pluginPackage,\n      config,\n    });\n  }\n\n  /**\n   * Get the central store instance\n   */\n  getStore(): Store<CoreState, CoreAction> {\n    return this.store;\n  }\n\n  /**\n   * Get the engine instance\n   */\n  getEngine(): PdfEngine {\n    return this.engine;\n  }\n\n  /**\n   * Get a promise that resolves when all plugins are ready\n   */\n  public pluginsReady(): Promise<void> {\n    // Re-use the same promise every time it’s asked for\n    if (this.pluginsReadyPromise) {\n      return this.pluginsReadyPromise;\n    }\n\n    // Build the promise the *first* time it’s requested\n    this.pluginsReadyPromise = (async () => {\n      // 1. Wait until the registry itself has finished initialising\n      if (!this.initialized) {\n        await this.initialize();\n      }\n\n      // 2. Wait for every plugin’s ready() promise (if it has one)\n      const readyPromises = Array.from(this.plugins.values()).map((p) =>\n        typeof p.ready === 'function' ? p.ready() : Promise.resolve(),\n      );\n\n      await Promise.all(readyPromises); // resolves when the slowest is done\n    })();\n\n    return this.pluginsReadyPromise;\n  }\n\n  /**\n   * INITIALISE THE REGISTRY – runs once no-matter-how-many calls   *\n   */\n  async initialize(): Promise<void> {\n    if (this.destroyed) {\n      throw new PluginRegistrationError('Registry has been destroyed');\n    }\n\n    // If an initialisation is already in-flight (or finished)\n    // return the very same promise so callers can await it.\n    if (this.initPromise) {\n      return this.initPromise;\n    }\n\n    // Wrap your existing body in a single promise and cache it\n    this.initPromise = (async () => {\n      if (this.initialized) {\n        throw new PluginRegistrationError('Registry is already initialized');\n      }\n\n      this.isInitializing = true;\n\n      try {\n        /* ---------------- original body starts ------------------ */\n        await this.ensureEngineInitialized();\n        // Check if destroyed after engine initialization\n        if (this.destroyed) {\n          return;\n        }\n\n        while (this.pendingRegistrations.length > 0) {\n          // Check if destroyed before processing each batch\n          if (this.destroyed) {\n            return;\n          }\n          this.processingRegistrations = [...this.pendingRegistrations];\n          this.pendingRegistrations = [];\n\n          for (const reg of this.processingRegistrations) {\n            const dependsOn = new Set<string>();\n            const allDeps = [...reg.package.manifest.requires, ...reg.package.manifest.optional];\n            for (const cap of allDeps) {\n              const provider = this.processingRegistrations.find((r) =>\n                r.package.manifest.provides.includes(cap),\n              );\n              if (provider) dependsOn.add(provider.package.manifest.id);\n            }\n            this.resolver.addNode(reg.package.manifest.id, [...dependsOn]);\n          }\n\n          const loadOrder = this.resolver.resolveLoadOrder();\n          for (const id of loadOrder) {\n            const reg = this.processingRegistrations.find((r) => r.package.manifest.id === id)!;\n            await this.initializePlugin(reg.package.manifest, reg.package.create, reg.config);\n          }\n\n          this.processingRegistrations = [];\n          this.resolver = new DependencyResolver();\n        }\n\n        for (const plugin of this.plugins.values()) {\n          await plugin.postInitialize?.().catch((e) => {\n            console.error(`Error in postInitialize for plugin ${plugin.id}`, e);\n            this.status.set(plugin.id, 'error');\n          });\n        }\n\n        this.initialized = true;\n        /* ----------------- original body ends ------------------- */\n      } catch (err) {\n        if (err instanceof Error) {\n          throw new CircularDependencyError(\n            `Failed to resolve plugin dependencies: ${err.message}`,\n          );\n        }\n        throw err;\n      } finally {\n        this.isInitializing = false;\n      }\n    })();\n\n    return this.initPromise;\n  }\n\n  /**\n   * Initialize a single plugin with all necessary checks\n   */\n  private async initializePlugin<TConfig>(\n    manifest: PluginManifest<TConfig>,\n    packageCreator: (\n      registry: PluginRegistry,\n      engine: PdfEngine,\n      config?: TConfig,\n    ) => IPlugin<TConfig>,\n    config?: Partial<TConfig>,\n  ): Promise<void> {\n    const finalConfig = {\n      ...manifest.defaultConfig,\n      ...config,\n    };\n\n    this.validateConfig(manifest.id, finalConfig, manifest.defaultConfig);\n\n    // Create plugin instance during initialization\n    const plugin = packageCreator(this, this.engine, finalConfig);\n    this.validatePlugin(plugin);\n\n    // Verify all required capabilities are available\n    for (const capability of manifest.requires) {\n      if (!this.capabilities.has(capability)) {\n        throw new PluginRegistrationError(\n          `Missing required capability: ${capability} for plugin ${manifest.id}`,\n        );\n      }\n    }\n\n    // Optional capabilities can be null, so we don't throw errors for them\n    for (const capability of manifest.optional) {\n      if (this.capabilities.has(capability)) {\n        // Optional capability is available, but we don't require it\n        console.debug(`Optional capability ${capability} is available for plugin ${manifest.id}`);\n      }\n    }\n\n    console.log('initializePlugin', manifest.id, manifest.provides);\n\n    // Register provided capabilities\n    for (const capability of manifest.provides) {\n      if (this.capabilities.has(capability)) {\n        throw new PluginRegistrationError(\n          `Capability ${capability} is already provided by plugin ${this.capabilities.get(capability)}`,\n        );\n      }\n      this.capabilities.set(capability, manifest.id);\n    }\n\n    // Store plugin and manifest\n    this.plugins.set(manifest.id, plugin);\n    this.manifests.set(manifest.id, manifest);\n    this.status.set(manifest.id, 'registered');\n    this.configurations.set(manifest.id, finalConfig);\n\n    try {\n      if (plugin.initialize) {\n        await plugin.initialize(finalConfig);\n      }\n      this.status.set(manifest.id, 'active');\n    } catch (error) {\n      // Cleanup on initialization failure\n      this.plugins.delete(manifest.id);\n      this.manifests.delete(manifest.id);\n      console.log('initializePlugin failed', manifest.id, manifest.provides);\n      manifest.provides.forEach((cap) => this.capabilities.delete(cap));\n      throw error;\n    }\n  }\n\n  getPluginConfig<TConfig>(pluginId: string): TConfig {\n    const config = this.configurations.get(pluginId);\n    if (!config) {\n      throw new PluginNotFoundError(`Configuration for plugin ${pluginId} not found`);\n    }\n    return config as TConfig;\n  }\n\n  private validateConfig(pluginId: string, config: unknown, defaultConfig: unknown): void {\n    // Check all required fields exist\n    const requiredKeys = Object.keys(defaultConfig as object);\n    const missingKeys = requiredKeys.filter((key) => !(config as object).hasOwnProperty(key));\n\n    if (missingKeys.length > 0) {\n      throw new PluginConfigurationError(\n        `Missing required configuration keys for plugin ${pluginId}: ${missingKeys.join(', ')}`,\n      );\n    }\n\n    // You could add more validation here:\n    // - Type checking\n    // - Value range validation\n    // - Format validation\n    // etc.\n  }\n\n  async updatePluginConfig<TConfig>(pluginId: string, config: Partial<TConfig>): Promise<void> {\n    const plugin = this.getPlugin(pluginId);\n\n    if (!plugin) {\n      throw new PluginNotFoundError(`Plugin ${pluginId} not found`);\n    }\n\n    const manifest = this.manifests.get(pluginId);\n    const currentConfig = this.configurations.get(pluginId);\n\n    if (!manifest || !currentConfig) {\n      throw new PluginNotFoundError(`Plugin ${pluginId} not found`);\n    }\n\n    // Merge new config with current\n    const newConfig = {\n      ...currentConfig,\n      ...config,\n    };\n\n    // Validate new configuration\n    this.validateConfig(pluginId, newConfig, manifest.defaultConfig);\n\n    // Store new configuration\n    this.configurations.set(pluginId, newConfig);\n\n    // Reinitialize plugin if needed\n    if (plugin.initialize) {\n      await plugin.initialize(newConfig);\n    }\n  }\n\n  /**\n   * Register multiple plugins at once\n   */\n  registerPluginBatch(registrations: PluginBatchRegistration<IPlugin<any>, any, any, any>[]): void {\n    for (const reg of registrations) {\n      this.registerPlugin(reg.package, reg.config);\n    }\n  }\n\n  /**\n   * Unregister a plugin\n   */\n  async unregisterPlugin(pluginId: string): Promise<void> {\n    const plugin = this.plugins.get(pluginId);\n    if (!plugin) {\n      throw new PluginNotFoundError(`Plugin ${pluginId} is not registered`);\n    }\n\n    const manifest = this.manifests.get(pluginId);\n    if (!manifest) {\n      throw new PluginNotFoundError(`Manifest for plugin ${pluginId} not found`);\n    }\n\n    // Check if any other plugins depend on this one\n    for (const [otherId, otherManifest] of this.manifests.entries()) {\n      if (otherId === pluginId) continue;\n\n      const dependsOnThis = [...otherManifest.requires, ...otherManifest.optional].some((cap) =>\n        manifest.provides.includes(cap),\n      );\n\n      if (dependsOnThis) {\n        throw new PluginRegistrationError(\n          `Cannot unregister plugin ${pluginId}: plugin ${otherId} depends on it`,\n        );\n      }\n    }\n\n    // Cleanup plugin\n    try {\n      if (plugin.destroy) {\n        await plugin.destroy();\n      }\n\n      // Remove capabilities\n      for (const capability of manifest.provides) {\n        this.capabilities.delete(capability);\n      }\n\n      // Remove plugin and manifest\n      this.plugins.delete(pluginId);\n      this.manifests.delete(pluginId);\n      this.status.delete(pluginId);\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Failed to unregister plugin ${pluginId}: ${error.message}`);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Get a plugin instance\n   * @param pluginId The ID of the plugin to get\n   * @returns The plugin instance or null if not found\n   */\n  getPlugin<T extends IPlugin>(pluginId: string): T | null {\n    const plugin = this.plugins.get(pluginId);\n    if (!plugin) {\n      return null;\n    }\n    return plugin as T;\n  }\n\n  /**\n   * Get a plugin that provides a specific capability\n   * @param capability The capability to get a provider for\n   * @returns The plugin providing the capability or null if not found\n   */\n  getCapabilityProvider(capability: string): IPlugin | null {\n    const pluginId = this.capabilities.get(capability);\n    if (!pluginId) {\n      return null;\n    }\n    return this.getPlugin(pluginId);\n  }\n\n  /**\n   * Check if a capability is available\n   */\n  hasCapability(capability: string): boolean {\n    return this.capabilities.has(capability);\n  }\n\n  /**\n   * Get all registered plugins\n   */\n  getAllPlugins(): IPlugin[] {\n    return Array.from(this.plugins.values());\n  }\n\n  /**\n   * Get plugin status\n   */\n  getPluginStatus(pluginId: string): PluginStatus {\n    const status = this.status.get(pluginId);\n    if (!status) {\n      throw new PluginNotFoundError(`Plugin ${pluginId} not found`);\n    }\n    return status;\n  }\n\n  /**\n   * Validate plugin object\n   */\n  private validatePlugin(plugin: IPlugin): void {\n    if (!plugin.id) {\n      throw new PluginRegistrationError('Plugin must have an id');\n    }\n  }\n\n  /**\n   * Validate plugin manifest\n   */\n  private validateManifest(manifest: PluginManifest): void {\n    if (!manifest.id) {\n      throw new PluginRegistrationError('Manifest must have an id');\n    }\n    if (!manifest.name) {\n      throw new PluginRegistrationError('Manifest must have a name');\n    }\n    if (!manifest.version) {\n      throw new PluginRegistrationError('Manifest must have a version');\n    }\n    if (!Array.isArray(manifest.provides)) {\n      throw new PluginRegistrationError('Manifest must have a provides array');\n    }\n    if (!Array.isArray(manifest.requires)) {\n      throw new PluginRegistrationError('Manifest must have a requires array');\n    }\n    if (!Array.isArray(manifest.optional)) {\n      throw new PluginRegistrationError('Manifest must have an optional array');\n    }\n  }\n\n  isDestroyed(): boolean {\n    return this.destroyed;\n  }\n\n  /**\n   * DESTROY EVERYTHING – waits for any ongoing initialise(), once  *\n   */\n  async destroy(): Promise<void> {\n    if (this.destroyed) throw new PluginRegistrationError('Registry has already been destroyed');\n    this.destroyed = true;\n\n    // If initialisation is still underway, wait (success OR failure)\n    try {\n      await this.initPromise;\n    } catch {\n      /* ignore – still need to clean up */\n    }\n\n    /* ------- original teardown, unchanged except the guard ------ */\n    for (const plugin of Array.from(this.plugins.values()).reverse()) {\n      await plugin.destroy?.();\n    }\n\n    this.store.destroy();\n\n    this.plugins.clear();\n    this.manifests.clear();\n    this.capabilities.clear();\n    this.status.clear();\n    this.pendingRegistrations.length = 0;\n    this.processingRegistrations.length = 0;\n  }\n}\n","/**\n * Restrict a numeric value to the inclusive range [min, max].\n *\n * @example\n *   clamp( 5, 0, 10)  // 5\n *   clamp(-3, 0, 10)  // 0\n *   clamp(17, 0, 10)  // 10\n */\nexport function clamp(value: number, min: number, max: number): number {\n  return value < min ? min : value > max ? max : value;\n}\n\n/**\n * Deeply compares two values (objects, arrays, primitives)\n * with the following rules:\n *  - Objects are compared ignoring property order.\n *  - Arrays are compared ignoring element order (multiset comparison).\n *  - Primitives are compared by strict equality.\n *  - null/undefined are treated as normal primitives.\n *\n * @param a First value\n * @param b Second value\n * @param visited Used internally to detect cycles\n */\nexport function arePropsEqual(a: any, b: any, visited?: Set<any>): boolean {\n  // Quick path for reference equality or same primitive\n  if (a === b) {\n    return true;\n  }\n\n  // Handle null/undefined mismatch\n  if (a == null || b == null) {\n    // If one is null/undefined and the other isn't, no match\n    return a === b;\n  }\n\n  // Check types\n  const aType = typeof a;\n  const bType = typeof b;\n  if (aType !== bType) return false;\n\n  // If they are both objects or arrays, handle recursively\n  if (aType === 'object') {\n    // Optionally handle cyclical references\n    if (!visited) visited = new Set();\n    const pairId = getPairId(a, b);\n    if (visited.has(pairId)) {\n      // Already compared these two objects => assume true to avoid infinite recursion\n      // or return false if you want to treat cycles as inequality\n      return true;\n    }\n    visited.add(pairId);\n\n    const aIsArray = Array.isArray(a);\n    const bIsArray = Array.isArray(b);\n    if (aIsArray && bIsArray) {\n      // Compare as arrays ignoring order\n      return arraysEqualUnordered(a, b, visited);\n    } else if (!aIsArray && !bIsArray) {\n      // Compare as plain objects (order of properties doesn't matter)\n      return objectsEqual(a, b, visited);\n    } else {\n      // One is array, the other is object => not equal\n      return false;\n    }\n  }\n\n  // If both are function, symbol, etc. - typically we might say false\n  // But you can decide your own logic for function or symbol equality\n  return false;\n}\n\nfunction getPairId(a: any, b: any) {\n  // Could do something more advanced. This is a cheap approach:\n  // e.g. use the memory reference or an object identity approach\n  return `${objectId(a)}__${objectId(b)}`;\n}\n\n/**\n * If you want stable object IDs, you'd need a WeakMap to store them.\n * This simplistic approach just calls toString on the object.\n */\nlet objectIdCounter = 0;\nconst objectIds = new WeakMap<object, number>();\n\nfunction objectId(obj: object): number {\n  if (!objectIds.has(obj)) {\n    objectIds.set(obj, ++objectIdCounter);\n  }\n  return objectIds.get(obj)!;\n}\n\nfunction arraysEqualUnordered(a: any[], b: any[], visited?: Set<any>): boolean {\n  if (a.length !== b.length) return false;\n\n  const used = new Array<boolean>(b.length).fill(false);\n\n  // For each element in a, find an unused matching element in b\n  outer: for (let i = 0; i < a.length; i++) {\n    const elemA = a[i];\n    for (let j = 0; j < b.length; j++) {\n      if (used[j]) continue; // already used that slot\n      if (arePropsEqual(elemA, b[j], visited)) {\n        used[j] = true;\n        continue outer; // found match for a[i], proceed\n      }\n    }\n    // If we never found a match\n    return false;\n  }\n\n  return true;\n}\n\nfunction objectsEqual(a: object, b: object, visited?: Set<any>): boolean {\n  // Get all prop keys\n  const aKeys = Object.keys(a).sort();\n  const bKeys = Object.keys(b).sort();\n  if (aKeys.length !== bKeys.length) return false;\n\n  // Compare each property name\n  for (let i = 0; i < aKeys.length; i++) {\n    if (aKeys[i] !== bKeys[i]) return false;\n  }\n\n  // Compare each property value\n  for (const key of aKeys) {\n    // @ts-ignore\n    const valA = a[key];\n    // @ts-ignore\n    const valB = b[key];\n    if (!arePropsEqual(valA, valB, visited)) {\n      return false;\n    }\n  }\n  return true;\n}\n","import { CoreState } from './initial-state';\nimport { transformSize, PdfPageObjectWithRotatedSize } from '@embedpdf/models';\n\nexport const getPagesWithRotatedSize = (state: CoreState): PdfPageObjectWithRotatedSize[][] => {\n  return state.pages.map((page) =>\n    page.map((p) => ({\n      ...p,\n      rotatedSize: transformSize(p.size, state.rotation, 1),\n    })),\n  );\n};\n","import { Action } from '../store';\nimport { IPlugin, PluginBatchRegistration, PluginPackage } from '../types/plugin';\n\n/**\n * Helper function to create a properly typed plugin registration\n */\nexport function createPluginRegistration<\n  T extends IPlugin<TConfig>,\n  TConfig,\n  TState,\n  TAction extends Action,\n>(\n  pluginPackage: PluginPackage<T, TConfig, TState, TAction>,\n  config?: Partial<TConfig>,\n): PluginBatchRegistration<T, TConfig, any, any> {\n  return {\n    package: pluginPackage,\n    config,\n  };\n}\n","import { IPlugin } from '../types/plugin';\nimport { PluginRegistry } from '../registry/plugin-registry';\nimport { Action, CoreAction, CoreState, PluginStore, Store, StoreState } from '../store';\n\nexport interface StateChangeHandler<TState> {\n  (state: TState): void;\n}\n\nexport abstract class BasePlugin<\n  TConfig = unknown,\n  TCapability = unknown,\n  TState = unknown,\n  TAction extends Action = Action,\n> implements IPlugin<TConfig>\n{\n  static readonly id: string;\n\n  protected pluginStore: PluginStore<TState, TAction>;\n  protected coreStore: Store<CoreState, CoreAction>;\n  // Track debounced actions\n  private debouncedActions: Record<string, number> = {};\n  private unsubscribeFromState: (() => void) | null = null;\n  private unsubscribeFromCoreStore: (() => void) | null = null;\n\n  private _capability?: Readonly<TCapability>;\n\n  private readyPromise: Promise<void>;\n  private readyResolve!: () => void;\n\n  constructor(\n    public readonly id: string,\n    protected registry: PluginRegistry,\n  ) {\n    if (id !== (this.constructor as typeof BasePlugin).id) {\n      throw new Error(\n        `Plugin ID mismatch: ${id} !== ${(this.constructor as typeof BasePlugin).id}`,\n      );\n    }\n    this.coreStore = this.registry.getStore();\n    this.pluginStore = this.coreStore.getPluginStore<TState, TAction>(this.id);\n    this.unsubscribeFromState = this.pluginStore.subscribeToState((action, newState, oldState) => {\n      this.onStoreUpdated(oldState, newState);\n    });\n    this.unsubscribeFromCoreStore = this.coreStore.subscribe((action, newState, oldState) => {\n      this.onCoreStoreUpdated(oldState, newState);\n    });\n\n    // Initialize ready state\n    this.readyPromise = new Promise((resolve) => {\n      this.readyResolve = resolve;\n    });\n    // By default, plugins are ready immediately\n    this.readyResolve();\n  }\n\n  /** Construct the public capability (called once & cached). */\n  protected abstract buildCapability(): TCapability;\n\n  public provides(): Readonly<TCapability> {\n    if (!this._capability) {\n      const cap = this.buildCapability();\n\n      this._capability = Object.freeze(cap);\n    }\n    return this._capability;\n  }\n\n  /**\n   * Initialize plugin with config\n   */\n  abstract initialize(config: TConfig): Promise<void>;\n\n  /**\n   *  Get a copy of the current state\n   */\n  protected get state(): Readonly<TState> {\n    return this.pluginStore.getState();\n  }\n\n  /**\n   *  Get a copy of the current core state\n   */\n  protected get coreState(): Readonly<StoreState<CoreState>> {\n    return this.coreStore.getState();\n  }\n\n  /**\n   * @deprecated  use `this.state` Get a copy of the current state\n   */\n  protected getState(): TState {\n    return this.pluginStore.getState();\n  }\n\n  /**\n   * @deprecated  use `this.coreState` Get a copy of the current core state\n   */\n  protected getCoreState(): StoreState<CoreState> {\n    return this.coreStore.getState();\n  }\n\n  /**\n   * Core Dispatch\n   */\n  protected dispatchCoreAction(action: CoreAction): StoreState<CoreState> {\n    return this.coreStore.dispatchToCore(action);\n  }\n\n  /**\n   * Dispatch an action to all plugins\n   */\n  protected dispatchToAllPlugins(action: TAction): StoreState<CoreState> {\n    return this.coreStore.dispatch(action);\n  }\n\n  /**\n   * Dispatch an action\n   */\n  protected dispatch(action: TAction): TState {\n    return this.pluginStore.dispatch(action);\n  }\n\n  /**\n   * Dispatch an action with debouncing to prevent rapid repeated calls\n   * @param action The action to dispatch\n   * @param debounceTime Time in ms to debounce (default: 100ms)\n   * @returns boolean indicating whether the action was dispatched or debounced\n   */\n  protected debouncedDispatch(action: TAction, debounceTime: number = 100): boolean {\n    const now = Date.now();\n    const lastActionTime = this.debouncedActions[action.type] || 0;\n\n    if (now - lastActionTime >= debounceTime) {\n      this.debouncedActions[action.type] = now;\n      this.dispatch(action);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Subscribe to state changes\n   */\n  protected subscribe(listener: (action: TAction, state: TState) => void): () => void {\n    return this.pluginStore.subscribeToState(listener);\n  }\n\n  /**\n   * Subscribe to core store changes\n   */\n  protected subscribeToCoreStore(\n    listener: (action: Action, state: StoreState<CoreState>) => void,\n  ): () => void {\n    return this.coreStore.subscribe(listener);\n  }\n\n  /**\n   * Called when the plugin store state is updated\n   * @param oldState Previous state\n   * @param newState New state\n   */\n  protected onStoreUpdated(oldState: TState, newState: TState): void {\n    // Default implementation does nothing - can be overridden by plugins\n  }\n\n  /**\n   * Called when the core store state is updated\n   * @param oldState Previous state\n   * @param newState New state\n   */\n  protected onCoreStoreUpdated(\n    oldState: StoreState<CoreState>,\n    newState: StoreState<CoreState>,\n  ): void {\n    // Default implementation does nothing - can be overridden by plugins\n  }\n\n  /**\n   * Cleanup method to be called when plugin is being destroyed\n   */\n  public destroy(): void {\n    if (this.unsubscribeFromState) {\n      this.unsubscribeFromState();\n      this.unsubscribeFromState = null;\n    }\n    if (this.unsubscribeFromCoreStore) {\n      this.unsubscribeFromCoreStore();\n      this.unsubscribeFromCoreStore = null;\n    }\n  }\n\n  /**\n   * Returns a promise that resolves when the plugin is ready\n   */\n  public ready(): Promise<void> {\n    return this.readyPromise;\n  }\n\n  /**\n   * Mark the plugin as ready\n   */\n  protected markReady(): void {\n    this.readyResolve();\n  }\n\n  /**\n   * Reset the ready state (useful for plugins that need to reinitialize)\n   */\n  protected resetReady(): void {\n    this.readyPromise = new Promise((resolve) => {\n      this.readyResolve = resolve;\n    });\n  }\n}\n","export type EventHandler<T> = (data: T) => void;\n\nexport interface BaseEventControlOptions {\n  wait: number;\n}\n\nexport interface DebounceOptions extends BaseEventControlOptions {\n  mode: 'debounce';\n}\n\nexport interface ThrottleOptions extends BaseEventControlOptions {\n  mode: 'throttle';\n  throttleMode?: 'leading-trailing' | 'trailing';\n}\n\nexport type EventControlOptions = DebounceOptions | ThrottleOptions;\n\nexport class EventControl<T> {\n  private timeoutId?: number;\n  private lastRun: number = 0;\n\n  constructor(\n    private handler: EventHandler<T>,\n    private options: EventControlOptions,\n  ) {}\n\n  handle = (data: T): void => {\n    if (this.options.mode === 'debounce') {\n      this.debounce(data);\n    } else {\n      this.throttle(data);\n    }\n  };\n\n  private debounce(data: T): void {\n    if (this.timeoutId) {\n      window.clearTimeout(this.timeoutId);\n    }\n\n    this.timeoutId = window.setTimeout(() => {\n      this.handler(data);\n      this.timeoutId = undefined;\n    }, this.options.wait);\n  }\n\n  private throttle(data: T): void {\n    if (this.options.mode === 'debounce') return;\n\n    const now = Date.now();\n    const throttleMode = this.options.throttleMode || 'leading-trailing';\n\n    if (now - this.lastRun >= this.options.wait) {\n      if (throttleMode === 'leading-trailing') {\n        this.handler(data);\n      }\n      this.lastRun = now;\n    }\n\n    // Always schedule the trailing execution\n    if (this.timeoutId) {\n      window.clearTimeout(this.timeoutId);\n    }\n\n    this.timeoutId = window.setTimeout(\n      () => {\n        this.handler(data);\n        this.lastRun = Date.now();\n        this.timeoutId = undefined;\n      },\n      this.options.wait - (now - this.lastRun),\n    );\n  }\n\n  destroy(): void {\n    if (this.timeoutId) {\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n}\n","import { EventControl, EventControlOptions } from './event-control';\nimport { arePropsEqual } from './math';\n\n/* ------------------------------------------------------------------ */\n/* basic types                                                        */\n/* ------------------------------------------------------------------ */\nexport type Listener<T = any> = (value: T) => void;\nexport type Unsubscribe = () => void;\n\n/* ------------------------------------------------------------------ */\n/* EventListener                                                      */\n/* ------------------------------------------------------------------ */\nexport type EventListener<T> =\n  | ((listener: Listener<T>) => Unsubscribe)\n  | ((listener: Listener<T>, options?: EventControlOptions) => Unsubscribe);\n\n/* ------------------------------------------------------------ */\n/* helpers for typing `.on()` with an optional second argument  */\n/* ------------------------------------------------------------ */\nexport type EventHook<T = any> = EventListener<T>;\n/* ------------------------------------------------------------------ */\n/* minimal “dumb” emitter (no value cache, no equality)               */\n/* ------------------------------------------------------------------ */\nexport interface Emitter<T = any> {\n  emit(value?: T): void;\n  on(listener: Listener<T>): Unsubscribe;\n  off(listener: Listener<T>): void;\n  clear(): void;\n}\n\nexport function createEmitter<T = any>(): Emitter<T> {\n  const listeners = new Set<Listener<T>>();\n\n  const on: EventHook<T> = (l: Listener<T>) => {\n    listeners.add(l);\n    return () => listeners.delete(l);\n  };\n\n  return {\n    emit: (v = undefined as T) => listeners.forEach((l) => l(v)),\n    on,\n    off: (l) => listeners.delete(l),\n    clear: () => listeners.clear(),\n  };\n}\n\n/* ------------------------------------------------------------ */\n/* public interface                                              */\n/* ------------------------------------------------------------ */\nexport interface BehaviorEmitter<T = any> extends Omit<Emitter<T>, 'on' | 'off'> {\n  readonly value?: T;\n  on: EventHook<T>;\n  off(listener: Listener<T>): void;\n  select<U>(selector: (v: T) => U, equality?: (a: U, b: U) => boolean): EventHook<U>;\n}\n\n/* ------------------------------------------------------------ */\n/* implementation                                               */\n/* ------------------------------------------------------------ */\nexport function createBehaviorEmitter<T = any>(\n  initial?: T,\n  equality: (a: T, b: T) => boolean = arePropsEqual,\n): BehaviorEmitter<T> {\n  const listeners = new Set<Listener<T>>();\n  const proxyMap = new Map<Listener<T>, { wrapped: Listener<T>; destroy: () => void }>();\n  let _value = initial; // cached value\n\n  /* -------------- helpers ----------------------------------- */\n  const notify = (v: T) => listeners.forEach((l) => l(v));\n\n  const baseOn: EventHook<T> = (listener: Listener<T>, options?: EventControlOptions) => {\n    /* wrap & remember if we have control options ------------------ */\n    let realListener = listener;\n    let destroy = () => {};\n\n    if (options) {\n      const ctl = new EventControl(listener, options);\n      realListener = ctl.handle as Listener<T>;\n      destroy = () => ctl.destroy();\n      proxyMap.set(listener, { wrapped: realListener, destroy });\n    }\n\n    /* immediate replay of last value ------------------------------ */\n    if (_value !== undefined) realListener(_value);\n\n    listeners.add(realListener);\n\n    return () => {\n      listeners.delete(realListener);\n      destroy();\n      proxyMap.delete(listener);\n    };\n  };\n\n  /* -------------- public object ------------------------------ */\n  return {\n    /* emitter behaviour ---------------------------------------- */\n    get value() {\n      return _value;\n    },\n\n    emit(v = undefined as T) {\n      if (_value === undefined || !equality(_value, v)) {\n        _value = v;\n        notify(v);\n      }\n    },\n\n    on: baseOn,\n    off(listener: Listener<T>) {\n      /* did we wrap this listener? */\n      const proxy = proxyMap.get(listener);\n      if (proxy) {\n        listeners.delete(proxy.wrapped);\n        proxy.destroy();\n        proxyMap.delete(listener);\n      } else {\n        listeners.delete(listener);\n      }\n    },\n\n    clear() {\n      listeners.clear();\n      proxyMap.forEach((p) => p.destroy());\n      proxyMap.clear();\n    },\n\n    /* derived hook --------------------------------------------- */\n    select<U>(selector: (v: T) => U, eq: (a: U, b: U) => boolean = arePropsEqual): EventHook<U> {\n      return (listener: Listener<U>, options?: EventControlOptions) => {\n        let prev: U | undefined;\n\n        /* replay */\n        if (_value !== undefined) {\n          const mapped = selector(_value);\n          prev = mapped;\n          listener(mapped);\n        }\n\n        /* subscribe to parent */\n        return baseOn(\n          (next) => {\n            const mapped = selector(next);\n            if (prev === undefined || !eq(prev, mapped)) {\n              prev = mapped;\n              listener(mapped);\n            }\n          },\n          options as EventControlOptions | undefined,\n        ); // pass control opts straight through\n      };\n    },\n  };\n}\n","/* ------------------------------------------------------------------ */\n/*  enumEntries – iterate over enum-keyed Records with strong typing  */\n/* ------------------------------------------------------------------ */\n\ntype EnumKey = string | number;\n\n/**\n * Iterate over a Record whose keys are enum members (numeric or string),\n * getting back a fully-typed `[key, value]` tuple array.\n *\n * Usage:\n *   for (const [subtype, defaults] of enumEntries(this.state.toolDefaults)) {\n *     // subtype is inferred as keyof ToolDefaultsBySubtype\n *   }\n */\nexport function enumEntries<E extends EnumKey, V>(record: Record<E, V>): Array<[E, V]> {\n  // Tell TS the values are V (not unknown) *before* we map.\n  return (Object.entries(record) as [string, V][]).map(([k, v]) => {\n    // Numeric enums come out of Object.entries as \"0\", \"1\", …  → convert.\n    const maybeNum = Number(k);\n    const typedKey: E =\n      Number.isFinite(maybeNum) && k.trim() !== '' // looks like a number?\n        ? (maybeNum as unknown as E) // numeric enum key\n        : (k as unknown as E); // string enum key\n\n    return [typedKey, v]; // v is already typed as V\n  });\n}\n","import { BaseUIComponent, childrenFunctionOptions } from './types';\n\nexport class UIComponent<T extends BaseUIComponent<any, any, any>> {\n  public componentConfig: T;\n  public props: T['id'] extends string\n    ? T extends BaseUIComponent<infer P, any, any>\n      ? P & { id: string }\n      : any\n    : any;\n  public type: string;\n  private children: Array<{\n    id: string;\n    component: UIComponent<any>;\n    priority: number;\n    className?: string;\n  }> = [];\n  private registry: Record<\n    string,\n    (\n      props: any,\n      children: (options?: childrenFunctionOptions) => any[],\n      context?: Record<string, any>,\n    ) => any\n  >;\n  private updateCallbacks: (() => void)[] = [];\n  private hadUpdateBeforeListeners = false;\n\n  constructor(\n    componentConfig: T,\n    registry: Record<\n      string,\n      (\n        props: any,\n        children: (options?: childrenFunctionOptions) => any[],\n        context?: Record<string, any>,\n      ) => any\n    >,\n  ) {\n    this.componentConfig = componentConfig;\n\n    const props = componentConfig.props || {};\n\n    if (typeof props === 'function') {\n      const initialProps = props(componentConfig.initialState);\n      this.props = { ...initialProps, id: componentConfig.id };\n    } else {\n      this.props = { ...props, id: componentConfig.id };\n    }\n\n    this.type = componentConfig.type;\n    this.registry = registry;\n  }\n\n  addChild(id: string, child: UIComponent<any>, priority: number = 0, className?: string) {\n    this.children.push({ id, component: child, priority, className });\n    // Sort children by priority\n    this.sortChildren();\n  }\n\n  // Helper to sort children by priority\n  private sortChildren() {\n    this.children.sort((a, b) => a.priority - b.priority);\n  }\n\n  removeChild(child: UIComponent<any>) {\n    this.children = this.children.filter((c) => c.component !== child);\n  }\n\n  clearChildren() {\n    this.children = [];\n  }\n\n  get getRenderType() {\n    return this.componentConfig.render || this.type;\n  }\n\n  public getRenderer() {\n    return this.registry[this.getRenderType];\n  }\n\n  public getChildren() {\n    return this.children;\n  }\n\n  // Optionally, a component can provide a function to extend the context for its children.\n  // For instance, a header could supply a \"direction\" based on its position.\n  public getChildContext(context: Record<string, any>): Record<string, any> {\n    const childContextProp = this.componentConfig.getChildContext;\n    if (typeof childContextProp === 'function') {\n      // Handle function case (existing behavior)\n      return { ...context, ...childContextProp(this.props) };\n    } else if (childContextProp && typeof childContextProp === 'object') {\n      // Handle object case\n      return { ...context, ...childContextProp };\n    }\n    return context;\n  }\n\n  update(newProps: Partial<T extends BaseUIComponent<infer P, any, any> ? P : any>) {\n    const { id, ...otherProps } = newProps;\n    this.props = { ...this.props, ...otherProps };\n    if (this.updateCallbacks.length === 0) {\n      this.hadUpdateBeforeListeners = true;\n    }\n    this.notifyUpdate();\n  }\n\n  onUpdate(callback: () => void) {\n    this.updateCallbacks.push(callback);\n    return this.hadUpdateBeforeListeners;\n  }\n\n  offUpdate(callback: () => void) {\n    this.updateCallbacks = this.updateCallbacks.filter((cb) => cb !== callback);\n  }\n\n  protected notifyUpdate() {\n    this.updateCallbacks.forEach((cb) => cb());\n  }\n}\n","import { Action } from '@embedpdf/core';\nimport { UIPluginState } from './types';\n\nexport const UI_INIT_COMPONENTS = 'UI_INIT_COMPONENTS';\nexport const UI_INIT_FLYOUT = 'UI_INIT_FLYOUT';\nexport const UI_TOGGLE_FLYOUT = 'UI_TOGGLE_FLYOUT';\nexport const UI_SET_HEADER_VISIBLE = 'UI_SET_HEADER_VISIBLE';\nexport const UI_TOGGLE_PANEL = 'UI_TOGGLE_PANEL';\nexport const UI_SHOW_COMMAND_MENU = 'UI_SHOW_COMMAND_MENU';\nexport const UI_HIDE_COMMAND_MENU = 'UI_HIDE_COMMAND_MENU';\nexport const UI_UPDATE_COMMAND_MENU = 'UI_UPDATE_COMMAND_MENU';\nexport const UI_UPDATE_COMPONENT_STATE = 'UI_UPDATE_COMPONENT_STATE';\n\nexport interface InitFlyoutPayload {\n  id: string;\n  triggerElement: HTMLElement;\n}\n\nexport interface ToggleFlyoutPayload {\n  id: string;\n  open?: boolean;\n}\n\nexport interface SetHeaderVisiblePayload {\n  id: string;\n  visible: boolean;\n  visibleChild?: string;\n}\n\nexport interface TogglePanelPayload {\n  id: string;\n  open?: boolean;\n  visibleChild: string;\n}\n\nexport interface ShowCommandMenuPayload {\n  id: string;\n  commandId: string;\n  triggerElement?: HTMLElement;\n  position?: 'top' | 'bottom' | 'left' | 'right';\n  flatten?: boolean;\n}\n\nexport interface UpdateComponentStatePayload<T = any> {\n  /** one of the top-level keys inside UIPluginState, e.g. \"panel\" | \"custom\" … */\n  componentType: keyof UIPluginState;\n  /** same id you used when registering the component */\n  componentId: string;\n  /** partial patch – only keys existing in the current state will be applied */\n  patch: Partial<T>;\n}\n\nexport interface HideCommandMenuPayload {\n  id: string;\n}\n\nexport interface UiInitComponentsAction extends Action {\n  type: typeof UI_INIT_COMPONENTS;\n  payload: UIPluginState;\n}\n\nexport interface UiInitFlyoutAction extends Action {\n  type: typeof UI_INIT_FLYOUT;\n  payload: InitFlyoutPayload;\n}\n\nexport interface UiToggleFlyoutAction extends Action {\n  type: typeof UI_TOGGLE_FLYOUT;\n  payload: ToggleFlyoutPayload;\n}\n\nexport interface UiSetHeaderVisibleAction extends Action {\n  type: typeof UI_SET_HEADER_VISIBLE;\n  payload: SetHeaderVisiblePayload;\n}\n\nexport interface UiTogglePanelAction extends Action {\n  type: typeof UI_TOGGLE_PANEL;\n  payload: TogglePanelPayload;\n}\n\nexport interface UiShowCommandMenuAction extends Action {\n  type: typeof UI_SHOW_COMMAND_MENU;\n  payload: ShowCommandMenuPayload;\n}\n\nexport interface UiHideCommandMenuAction extends Action {\n  type: typeof UI_HIDE_COMMAND_MENU;\n  payload: HideCommandMenuPayload;\n}\n\nexport interface UiUpdateComponentStateAction extends Action {\n  type: typeof UI_UPDATE_COMPONENT_STATE;\n  payload: UpdateComponentStatePayload;\n}\n\nexport type UIPluginAction =\n  | UiInitComponentsAction\n  | UiInitFlyoutAction\n  | UiToggleFlyoutAction\n  | UiSetHeaderVisibleAction\n  | UiTogglePanelAction\n  | UiShowCommandMenuAction\n  | UiHideCommandMenuAction\n  | UiUpdateComponentStateAction;\n\nexport const uiInitComponents = (state: UIPluginState): UiInitComponentsAction => ({\n  type: UI_INIT_COMPONENTS,\n  payload: state,\n});\n\nexport const uiInitFlyout = (payload: InitFlyoutPayload): UiInitFlyoutAction => ({\n  type: UI_INIT_FLYOUT,\n  payload,\n});\n\nexport const uiToggleFlyout = (payload: ToggleFlyoutPayload): UiToggleFlyoutAction => ({\n  type: UI_TOGGLE_FLYOUT,\n  payload,\n});\n\nexport const uiTogglePanel = (payload: TogglePanelPayload): UiTogglePanelAction => ({\n  type: UI_TOGGLE_PANEL,\n  payload,\n});\n\nexport const uiSetHeaderVisible = (payload: SetHeaderVisiblePayload): UiSetHeaderVisibleAction => ({\n  type: UI_SET_HEADER_VISIBLE,\n  payload,\n});\n\nexport const uiShowCommandMenu = (payload: ShowCommandMenuPayload): UiShowCommandMenuAction => ({\n  type: UI_SHOW_COMMAND_MENU,\n  payload,\n});\n\nexport const uiHideCommandMenu = (payload: HideCommandMenuPayload): UiHideCommandMenuAction => ({\n  type: UI_HIDE_COMMAND_MENU,\n  payload,\n});\n\nexport const uiUpdateComponentState = <T>(\n  payload: UpdateComponentStatePayload<T>,\n): UiUpdateComponentStateAction => ({\n  type: UI_UPDATE_COMPONENT_STATE,\n  payload,\n});\n","import { Reducer } from '@embedpdf/core';\nimport { UIPluginState } from './types';\nimport {\n  UI_HIDE_COMMAND_MENU,\n  UI_INIT_COMPONENTS,\n  UI_SET_HEADER_VISIBLE,\n  UI_SHOW_COMMAND_MENU,\n  UI_TOGGLE_PANEL,\n  UI_UPDATE_COMPONENT_STATE,\n  UIPluginAction,\n} from './actions';\n\nexport const initialState: UIPluginState = {\n  panel: {},\n  header: {},\n  groupedItems: {},\n  divider: {},\n  iconButton: {},\n  tabButton: {},\n  selectButton: {},\n  custom: {},\n  floating: {},\n  commandMenu: {},\n};\n\nexport const uiReducer: Reducer<UIPluginState, UIPluginAction> = (state = initialState, action) => {\n  switch (action.type) {\n    case UI_INIT_COMPONENTS:\n      return {\n        ...state,\n        ...action.payload,\n      };\n    case UI_TOGGLE_PANEL: {\n      const prevPanel = state.panel[action.payload.id] || {};\n      const { open: nextOpen, visibleChild: nextVisibleChild } = action.payload;\n      const prevVisibleChild = prevPanel.visibleChild;\n\n      let open = prevPanel.open;\n      let visibleChild = prevPanel.visibleChild;\n\n      if (nextVisibleChild === prevVisibleChild) {\n        // Toggle open if visibleChild is the same\n        open = nextOpen !== undefined ? nextOpen : !prevPanel.open;\n      } else {\n        // Only change visibleChild, keep open as is\n        visibleChild = nextVisibleChild;\n        open = true;\n      }\n\n      return {\n        ...state,\n        panel: {\n          ...state.panel,\n          [action.payload.id]: {\n            ...prevPanel,\n            open,\n            visibleChild,\n          },\n        },\n      };\n    }\n    case UI_SET_HEADER_VISIBLE:\n      return {\n        ...state,\n        header: {\n          ...state.header,\n          [action.payload.id]: {\n            ...state.header[action.payload.id],\n            visible: action.payload.visible,\n            visibleChild: action.payload.visibleChild,\n          },\n        },\n      };\n    case UI_SHOW_COMMAND_MENU:\n      return {\n        ...state,\n        commandMenu: {\n          ...state.commandMenu,\n          [action.payload.id]: {\n            activeCommand: action.payload.commandId,\n            triggerElement: action.payload.triggerElement,\n            position: action.payload.position,\n            open: true,\n            flatten: action.payload.flatten,\n          },\n        },\n      };\n    case UI_HIDE_COMMAND_MENU:\n      return {\n        ...state,\n        commandMenu: {\n          ...state.commandMenu,\n          [action.payload.id]: {\n            ...state.commandMenu[action.payload.id],\n            open: false,\n            activeCommand: null,\n            triggerElement: undefined,\n            position: undefined,\n            flatten: false,\n          },\n        },\n      };\n    case UI_UPDATE_COMPONENT_STATE: {\n      const { componentType, componentId, patch } = action.payload;\n\n      // if the slice or the component is unknown → ignore\n      if (!state[componentType] || !state[componentType][componentId]) return state;\n\n      const current = state[componentType][componentId] as Record<string, any>;\n\n      // keep only keys that already exist\n      const filteredPatch = Object.fromEntries(Object.entries(patch).filter(([k]) => k in current));\n\n      // no allowed keys? -> no-op\n      if (Object.keys(filteredPatch).length === 0) return state;\n\n      return {\n        ...state,\n        [componentType]: {\n          ...state[componentType],\n          [componentId]: {\n            ...current,\n            ...filteredPatch,\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import type { CustomComponent } from './types';\n\nexport function defineComponent<TInit, TProps, TStore = any>() {\n  return <\n    C extends CustomComponent<TStore> & {\n      initialState: TInit;\n      props: (init: TInit) => TProps;\n      mapStateToProps: (storeState: TStore, ownProps: TProps) => TProps;\n    },\n  >(\n    c: C,\n  ) => c;\n}\n\n/**\n * Type definition for event callbacks\n */\nexport type EventCallback = (data: any) => void;\n\n/**\n * Interface for the event controller\n */\nexport interface EventController {\n  /**\n   * Emit an event of the specified type with the given data\n   */\n  emit(eventType: string, data: any): void;\n\n  /**\n   * Subscribe to events of the specified type\n   * Returns a function that can be called to unsubscribe\n   */\n  on(eventType: string, callback: EventCallback): () => void;\n\n  /**\n   * Unsubscribe a specific callback from events of the specified type\n   */\n  off(eventType: string, callback: EventCallback): void;\n}\n\n/**\n * Creates an event controller that manages event subscriptions and dispatching\n * This is a lightweight pub/sub implementation for typed events\n */\nexport function createEventController(): EventController {\n  // Map of event types to sets of callbacks\n  const eventMap = new Map<string, Set<EventCallback>>();\n\n  return {\n    emit(eventType: string, data: any): void {\n      const callbacks = eventMap.get(eventType);\n      if (callbacks) {\n        // Call each callback with the event data\n        callbacks.forEach((callback) => callback(data));\n      }\n    },\n\n    on(eventType: string, callback: EventCallback): () => void {\n      // Create a set for this event type if it doesn't exist\n      if (!eventMap.has(eventType)) {\n        eventMap.set(eventType, new Set());\n      }\n\n      // Add the callback to the set\n      const callbacks = eventMap.get(eventType)!;\n      callbacks.add(callback);\n\n      // Return a function that removes this specific callback\n      return () => this.off(eventType, callback);\n    },\n\n    off(eventType: string, callback: EventCallback): void {\n      const callbacks = eventMap.get(eventType);\n      if (callbacks) {\n        // Remove the callback from the set\n        callbacks.delete(callback);\n\n        // Clean up empty sets\n        if (callbacks.size === 0) {\n          eventMap.delete(eventType);\n        }\n      }\n    },\n  };\n}\n","import { MenuItem, Dynamic, ResolvedMenuItem } from './types';\n\nexport function resolveMenuItem<TStore>(\n  item: MenuItem<TStore>,\n  state: TStore,\n): ResolvedMenuItem<TStore> {\n  const dyn = <T>(v: Dynamic<TStore, T> | undefined): T | undefined =>\n    typeof v === 'function' ? (v as any)(state) : v;\n\n  if (item.type === 'group') {\n    return {\n      ...item,\n      label: dyn(item.label) ?? '',\n    };\n  }\n\n  // spread keeps unknown keys (e.g. children) intact\n  return {\n    ...item,\n    icon: dyn(item.icon) ?? '',\n    label: dyn(item.label) ?? '',\n    visible: dyn(item.visible) ?? true,\n    active: dyn(item.active) ?? false,\n    disabled: dyn(item.disabled) ?? false,\n  };\n}\n\nexport function isActive<TStore>(item: MenuItem<TStore>, state: TStore): boolean {\n  const resolved = resolveMenuItem(item, state);\n\n  if (resolved.type === 'group') {\n    return false;\n  }\n\n  return resolved.active ? true : false;\n}\n\nexport function isVisible<TStore>(item: MenuItem<TStore>, state: TStore): boolean {\n  const resolved = resolveMenuItem(item, state);\n\n  if (resolved.type === 'group') {\n    return false;\n  }\n\n  return resolved.visible ? true : false;\n}\n\nexport function isDisabled<TStore>(item: MenuItem<TStore>, state: TStore): boolean {\n  const resolved = resolveMenuItem(item, state);\n\n  if (resolved.type === 'group') {\n    return false;\n  }\n\n  return resolved.disabled ? true : false;\n}\n","import { PluginRegistry } from '@embedpdf/core';\nimport {\n  MenuItem,\n  Action,\n  ExecuteOptions,\n  ResolvedMenuItem,\n  MenuRegistry,\n  Menu,\n  MenuManagerCapabilities,\n  ResolvedMenuItemResult,\n  ResolvedMenu,\n  ResolvedAction,\n} from './types';\nimport { EventCallback, createEventController } from '../utils';\nimport { resolveMenuItem } from './utils';\n\n/**\n * MenuManager manages a registry of menu items and handles their execution.\n * It also manages keyboard shortcuts and implements responsive behavior.\n */\nexport class MenuManager {\n  private registry: MenuRegistry = {};\n  private shortcutMap: Record<string, string> = {}; // maps shortcut to menu item id\n  private eventController = createEventController();\n  private pluginRegistry: PluginRegistry;\n\n  // Event types\n  static readonly EVENTS = {\n    COMMAND_EXECUTED: 'menu:command_executed',\n    MENU_REQUESTED: 'menu:requested',\n    SHORTCUT_EXECUTED: 'menu:shortcut_executed',\n  };\n\n  constructor(items: MenuRegistry = {}, pluginRegistry: PluginRegistry) {\n    this.pluginRegistry = pluginRegistry;\n    this.registerItems(items);\n    this.setupKeyboardListeners();\n  }\n\n  /**\n   * Get the current state of the plugin registry\n   */\n  private get state() {\n    return this.pluginRegistry.getStore().getState();\n  }\n\n  /**\n   * Register a single menu item\n   */\n  registerItem(item: MenuItem): void {\n    if (this.registry[item.id]) {\n      console.warn(`Menu item with ID ${item.id} already exists and will be overwritten`);\n    }\n\n    this.registry[item.id] = item;\n\n    if ('shortcut' in item && item.shortcut) {\n      this.shortcutMap[this.normalizeShortcut(item.shortcut)] = item.id;\n    }\n  }\n\n  /**\n   * Register multiple menu items at once\n   */\n  registerItems(items: MenuRegistry): void {\n    Object.values(items).forEach((item) => {\n      this.registerItem(item);\n    });\n  }\n\n  /**\n   * Resolve a menu item by ID\n   */\n  public resolve(id: string): ResolvedMenuItem {\n    const raw = this.registry[id];\n    return resolveMenuItem(raw, this.state);\n  }\n\n  /**\n   * Get a menu item by ID with type information\n   */\n  getMenuItem(id: string): ResolvedMenuItemResult | undefined {\n    const item = this.resolve(id);\n    if (!item) return undefined;\n\n    return {\n      item,\n      isGroup: item.type === 'group',\n      isMenu: item.type === 'menu',\n      isAction: item.type === 'action',\n    };\n  }\n\n  /**\n   * Get a action by ID (only returns Action type items)\n   */\n  getAction(id: string): ResolvedAction | undefined {\n    const resolved = this.getMenuItem(id);\n    if (!resolved || !resolved.isAction) return undefined;\n    return resolved.item as ResolvedAction;\n  }\n\n  /**\n   * Get menu or action by ID\n   */\n  getMenuOrAction(id: string): ResolvedMenu | ResolvedAction | undefined {\n    const resolved = this.getMenuItem(id);\n    if (!resolved) return undefined;\n    return resolved.item as ResolvedMenu | ResolvedAction;\n  }\n\n  /**\n   * Get all registered menu items\n   */\n  getAllItems(): MenuRegistry {\n    return { ...this.registry };\n  }\n\n  /**\n   * Get menu items by their IDs\n   */\n  getItemsByIds(ids: string[]): MenuItem[] {\n    return ids.map((id) => this.resolve(id)).filter((item) => item !== undefined) as MenuItem[];\n  }\n\n  /**\n   * Get child items for a given menu ID\n   * If flatten is true, it will recursively include submenu children but not groups\n   */\n  getChildItems(menuId: string, options: { flatten?: boolean } = {}): MenuItem[] {\n    const item = this.resolve(menuId);\n    if (!item || !('children' in item) || !item.children?.length) {\n      return [];\n    }\n\n    // Get all immediate children\n    const children = this.getItemsByIds(item.children);\n\n    // If flatten is false or not specified, return immediate children\n    if (!options.flatten) {\n      return children;\n    }\n\n    // If flatten is true, recursively include menu children\n    const flattened: MenuItem[] = [];\n\n    for (const child of children) {\n      if (child.type === 'group') {\n        // For groups, add the group itself but don't flatten its children\n        flattened.push(child);\n      } else if (child.type === 'menu') {\n        // For menus, recursively flatten their children\n        const menuChildren = this.getChildItems(child.id, { flatten: true });\n        flattened.push(...menuChildren);\n      } else {\n        // For commands, add them directly\n        flattened.push(child);\n      }\n    }\n\n    return flattened;\n  }\n\n  /**\n   * Execute a command by ID\n   */\n  executeCommand(id: string, options: ExecuteOptions = {}): void {\n    const resolved = this.getMenuItem(id);\n    if (!resolved) {\n      console.warn(`Menu item '${id}' not found`);\n      return;\n    }\n    if (resolved.item.type === 'group') {\n      console.warn(`Cannot execute group '${id}'`);\n      return;\n    }\n\n    const { item } = resolved;\n\n    if (item.disabled) {\n      console.warn(`Menu item '${id}' is disabled`);\n      return;\n    }\n\n    if (resolved.isAction) {\n      // Execute the command's action\n      (item as Action).action(this.pluginRegistry, this.state);\n      this.eventController.emit(MenuManager.EVENTS.COMMAND_EXECUTED, {\n        command: item,\n        source: options.source || 'api',\n      });\n    } else if ('children' in item && item.children?.length) {\n      // Handle submenu\n      this.handleSubmenu(item, options);\n    }\n  }\n\n  /**\n   * Execute a command from a keyboard shortcut\n   */\n  executeShortcut(shortcut: string): boolean {\n    const normalizedShortcut = this.normalizeShortcut(shortcut);\n    const itemId = this.shortcutMap[normalizedShortcut];\n\n    if (itemId) {\n      this.executeCommand(itemId, { source: 'shortcut' });\n      this.eventController.emit(MenuManager.EVENTS.SHORTCUT_EXECUTED, {\n        shortcut: normalizedShortcut,\n        itemId,\n      });\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Subscribe to menu events\n   */\n  on(eventType: string, callback: EventCallback): () => void {\n    return this.eventController.on(eventType, callback);\n  }\n\n  /**\n   * Remove an event subscription\n   */\n  off(eventType: string, callback: EventCallback): void {\n    this.eventController.off(eventType, callback);\n  }\n\n  /**\n   * Handle a menu item that has children (showing a submenu)\n   */\n  private handleSubmenu(menuItem: MenuItem, options: ExecuteOptions): void {\n    this.eventController.emit(MenuManager.EVENTS.MENU_REQUESTED, {\n      menuId: menuItem.id,\n      triggerElement: options.triggerElement,\n      position: options.position,\n      flatten: options.flatten || false,\n    });\n  }\n\n  /**\n   * Set up keyboard listeners for shortcuts\n   */\n  private setupKeyboardListeners(): void {\n    if (typeof window === 'undefined') return;\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Don't handle shortcuts if the event target is an input, textarea, or has contentEditable\n      const target = event.target as HTMLElement;\n      if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n        return;\n      }\n\n      const shortcut = this.buildShortcutString(event);\n      if (shortcut && this.executeShortcut(shortcut)) {\n        event.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n  }\n\n  /**\n   * Convert a KeyboardEvent to a shortcut string\n   */\n  private buildShortcutString(event: KeyboardEvent): string | null {\n    const modifiers: string[] = [];\n    if (event.ctrlKey) modifiers.push('Ctrl');\n    if (event.shiftKey) modifiers.push('Shift');\n    if (event.altKey) modifiers.push('Alt');\n    if (event.metaKey) modifiers.push('Meta');\n\n    // Only add non-modifier keys\n    const key = event.key;\n    const isModifier = ['Control', 'Shift', 'Alt', 'Meta'].includes(key);\n    if (!isModifier) {\n      // Handle special case for uppercase letters\n      const displayKey = key.length === 1 ? key.toUpperCase() : key;\n      return [...modifiers, displayKey].join('+');\n    }\n\n    return null;\n  }\n\n  /**\n   * Normalize a shortcut string for consistent comparison\n   */\n  private normalizeShortcut(shortcut: string): string {\n    return shortcut\n      .split('+')\n      .map((part) => part.trim())\n      .join('+');\n  }\n\n  /**\n   * Get capabilities for the MenuManager\n   */\n  capabilities(): MenuManagerCapabilities {\n    return {\n      registerItem: this.registerItem.bind(this),\n      registerItems: this.registerItems.bind(this),\n      executeCommand: this.executeCommand.bind(this),\n      getAction: this.getAction.bind(this),\n      getMenuOrAction: this.getMenuOrAction.bind(this),\n      getChildItems: this.getChildItems.bind(this),\n      getItemsByIds: this.getItemsByIds.bind(this),\n      getAllItems: this.getAllItems.bind(this),\n    };\n  }\n}\n","import { Icon, IconCapabilities, IconIdentifier, IconRegistry } from './types';\n\n/**\n * Registry for managing icons throughout the application\n */\nexport class IconManager {\n  private icons: IconRegistry = {};\n\n  constructor(icons: Icon[] | IconRegistry) {\n    this.registerIcons(icons);\n  }\n\n  /**\n   * Register a single icon\n   */\n  public registerIcon(icon: Icon): void {\n    if (this.icons[icon.id]) {\n      console.warn(`Icon with ID ${icon.id} already exists and will be overwritten`);\n    }\n    this.icons[icon.id] = icon;\n  }\n\n  /**\n   * Register multiple icons at once\n   */\n  public registerIcons(icons: Icon[] | IconRegistry): void {\n    if (Array.isArray(icons)) {\n      icons.forEach((icon) => this.registerIcon(icon));\n    } else {\n      Object.entries(icons).forEach(([id, icon]) => this.registerIcon(icon));\n    }\n  }\n\n  /**\n   * Get all registered icons\n   */\n  public getAllIcons(): IconRegistry {\n    return { ...this.icons };\n  }\n\n  /**\n   * Get an icon by its ID\n   */\n  public getIcon(id: string): Icon | undefined {\n    return this.icons[id];\n  }\n\n  /**\n   * Check if an identifier is an SVG string\n   */\n  public isSvgString(identifier: IconIdentifier): boolean {\n    return identifier.trim().startsWith('<svg') && identifier.includes('</svg>');\n  }\n\n  /**\n   * Check if a string is an SVG data URI\n   */\n  public isSvgDataUri(value: string): boolean {\n    return value.startsWith('data:image/svg+xml;base64,');\n  }\n\n  /**\n   * Get the SVG string for an icon identifier\n   * If the identifier is a raw SVG string, it is returned as is\n   * If the identifier is an icon ID, the registered SVG is returned\n   */\n  public getSvgString(identifier: IconIdentifier): string | undefined {\n    if (this.isSvgString(identifier)) {\n      return identifier;\n    }\n    if (this.isSvgDataUri(identifier)) {\n      return this.dataUriToSvgString(identifier);\n    }\n    return this.getIcon(identifier)?.svg;\n  }\n\n  /**\n   * Utility method to parse a data URI\n   */\n  public dataUriToSvgString(dataUri: string): string {\n    const base64 = dataUri.substring('data:image/svg+xml;base64,'.length);\n    return atob(base64);\n  }\n\n  /**\n   * Convert an SVG string to a data URI\n   */\n  public svgStringToDataUri(svgString: string): string {\n    const base64 = btoa(svgString);\n    return `data:image/svg+xml;base64,${base64}`;\n  }\n\n  capabilities(): IconCapabilities {\n    return {\n      registerIcon: this.registerIcon.bind(this),\n      registerIcons: this.registerIcons.bind(this),\n      getIcon: this.getIcon.bind(this),\n      getAllIcons: this.getAllIcons.bind(this),\n      getSvgString: this.getSvgString.bind(this),\n      isSvgString: this.isSvgString.bind(this),\n      isSvgDataUri: this.isSvgDataUri.bind(this),\n      dataUriToSvgString: this.dataUriToSvgString.bind(this),\n      svgStringToDataUri: this.svgStringToDataUri.bind(this),\n    };\n  }\n}\n","import { BasePlugin, CoreState, PluginRegistry, StoreState, arePropsEqual } from '@embedpdf/core';\nimport {\n  childrenFunctionOptions,\n  CommandMenuComponent,\n  CustomComponent,\n  FloatingComponent,\n  GroupedItemsComponent,\n  HeaderComponent,\n  PanelComponent,\n  UICapability,\n  UIComponentType,\n  UIPluginConfig,\n  UIPluginState,\n} from './types';\nimport { UIComponent } from './ui-component';\nimport { initialState } from './reducer';\nimport {\n  uiInitComponents,\n  UIPluginAction,\n  uiSetHeaderVisible,\n  uiShowCommandMenu,\n  uiTogglePanel,\n  uiHideCommandMenu,\n  TogglePanelPayload,\n  SetHeaderVisiblePayload,\n  uiUpdateComponentState,\n  UpdateComponentStatePayload,\n} from './actions';\nimport { MenuManager } from './menu/menu-manager';\nimport { IconManager } from './icons/icon-manager';\n\nexport class UIPlugin extends BasePlugin<\n  UIPluginConfig,\n  UICapability,\n  UIPluginState,\n  UIPluginAction\n> {\n  static readonly id = 'ui' as const;\n  private componentRenderers: Record<\n    string,\n    (\n      props: any,\n      children: (options?: childrenFunctionOptions) => any[],\n      context?: Record<string, any>,\n    ) => any\n  > = {};\n  private components: Record<string, UIComponent<UIComponentType<any>>> = {};\n  private config: UIPluginConfig;\n  private mapStateCallbacks: {\n    [componentId: string]: (storeState: any, ownProps: any) => any;\n  } = {};\n  private globalStoreSubscription: () => void = () => {};\n  private menuManager: MenuManager; // Add this\n  private iconManager: IconManager;\n\n  constructor(id: string, registry: PluginRegistry, config: UIPluginConfig) {\n    super(id, registry);\n    this.config = config;\n\n    // Initialize command center\n    this.menuManager = new MenuManager(config.menuItems || {}, this.registry);\n\n    // Initialize icon registry\n    this.iconManager = new IconManager(config.icons || []);\n\n    // Subscribe to command events\n    this.setupCommandEventHandlers();\n\n    // Subscribe exactly once to the global store\n    this.globalStoreSubscription = this.registry.getStore().subscribe((_action, newState) => {\n      this.onGlobalStoreChange(newState);\n    });\n  }\n\n  async initialize(): Promise<void> {\n    // Step 1: Build all individual components\n    this.buildComponents();\n\n    // Step 2: Link children for grouped items\n    this.linkGroupedItems();\n\n    // Step 3: Set initial state for UI components\n    this.setInitialStateUIComponents();\n  }\n\n  // Set up handlers for command events\n  private setupCommandEventHandlers(): void {\n    // Handle command menu requests\n    this.menuManager.on(MenuManager.EVENTS.MENU_REQUESTED, (data) => {\n      const { menuId, triggerElement, position, flatten } = data;\n\n      const isOpen = this.state.commandMenu.commandMenu?.activeCommand === menuId;\n      if (isOpen) {\n        return this.dispatch(uiHideCommandMenu({ id: 'commandMenu' }));\n      }\n\n      this.dispatch(\n        uiShowCommandMenu({\n          id: 'commandMenu',\n          commandId: menuId,\n          triggerElement,\n          position,\n          flatten,\n        }),\n      );\n    });\n\n    // Optional: Track command execution for analytics or other purposes\n    this.menuManager.on(MenuManager.EVENTS.COMMAND_EXECUTED, (data) => {\n      console.log('Command executed:', data.command.id, 'source:', data.source);\n    });\n  }\n\n  private addComponent(id: string, componentConfig: UIComponentType<any>) {\n    if (this.components[id]) {\n      console.warn(`Component with ID ${id} already exists and will be overwritten`);\n    }\n    // Step 1: Build the UIComponent\n    const component = new UIComponent(componentConfig, this.componentRenderers);\n    this.components[id] = component;\n\n    // Step 2: Store mapStateToProps if present\n    if (typeof componentConfig.mapStateToProps === 'function') {\n      this.mapStateCallbacks[id] = componentConfig.mapStateToProps;\n    }\n\n    return component;\n  }\n\n  private buildComponents() {\n    Object.entries(this.config.components).forEach(([id, componentConfig]) => {\n      this.addComponent(id, componentConfig);\n    });\n  }\n\n  private linkGroupedItems() {\n    Object.values(this.components).forEach((component) => {\n      if (isItemWithSlots(component)) {\n        const props = component.componentConfig;\n        props.slots?.forEach((slot) => {\n          const child = this.components[slot.componentId];\n          if (child) {\n            component.addChild(slot.componentId, child, slot.priority, slot.className);\n          } else {\n            console.warn(\n              `Child component ${slot.componentId} not found for GroupedItems ${props.id}`,\n            );\n          }\n        });\n      }\n    });\n  }\n\n  private setInitialStateUIComponents() {\n    const defaultState: UIPluginState = initialState;\n\n    Object.entries(this.config.components).forEach(([componentId, definition]) => {\n      if (definition.initialState) {\n        // store the initialState object, e.g. { open: false } or { active: true }\n        defaultState[definition.type][componentId] = definition.initialState;\n      } else {\n        defaultState[definition.type][componentId] = {};\n      }\n    });\n\n    this.dispatch(uiInitComponents(defaultState));\n  }\n\n  private onGlobalStoreChange(state: StoreState<CoreState>) {\n    for (const [id, uiComponent] of Object.entries(this.components)) {\n      const mapFn = this.mapStateCallbacks[id];\n      if (!mapFn) continue; // no mapping\n\n      // ownProps is the UIComponent's current props\n      const { id: _id, ...ownProps } = uiComponent.props;\n\n      const partial = mapFn(state, ownProps);\n      // If partial is non-empty or changes from old, do update\n      const merged = { ...ownProps, ...partial };\n\n      if (!arePropsEqual(ownProps, merged)) {\n        uiComponent.update(partial);\n      }\n    }\n  }\n\n  private addSlot(parentId: string, slotId: string, priority?: number, className?: string) {\n    // 1. Get the parent component\n    const parentComponent = this.components[parentId];\n\n    if (!parentComponent) {\n      console.error(`Parent component ${parentId} not found`);\n      return;\n    }\n\n    // 2. Check if parent has slots (is a container type)\n    if (!isItemWithSlots(parentComponent)) {\n      console.error(`Parent component ${parentId} does not support slots`);\n      return;\n    }\n\n    // 3. Get the component to add to the slot\n    const childComponent = this.components[slotId];\n\n    if (!childComponent) {\n      console.error(`Child component ${slotId} not found`);\n      return;\n    }\n\n    const parentChildren = parentComponent.getChildren();\n\n    // 4. Determine priority for the new slot\n    let slotPriority = priority;\n\n    if (slotPriority === undefined) {\n      // If no priority is specified, add it at the end with a reasonable gap\n      const maxPriority =\n        parentChildren.length > 0 ? Math.max(...parentChildren.map((child) => child.priority)) : 0;\n      slotPriority = maxPriority + 10; // Add a gap of 10\n    }\n\n    // 6. Add the child to the parent component with the appropriate priority\n    // The UIComponent will handle sorting and avoid duplicates\n    parentComponent.addChild(slotId, childComponent, slotPriority, className);\n  }\n\n  protected buildCapability(): UICapability {\n    return {\n      registerComponentRenderer: (\n        type: string,\n        renderer: (\n          props: any,\n          children: (options?: childrenFunctionOptions) => any[],\n          context?: Record<string, any>,\n        ) => any,\n      ) => {\n        this.componentRenderers[type] = renderer;\n      },\n      getComponent: <T>(id: string): T | undefined => {\n        return this.components[id] as T | undefined;\n      },\n      registerComponent: this.addComponent.bind(this),\n      getCommandMenu: () =>\n        Object.values(this.components).find((component) => isCommandMenuComponent(component)),\n      hideCommandMenu: () => this.debouncedDispatch(uiHideCommandMenu({ id: 'commandMenu' }), 100),\n      getFloatingComponents: (scrollerPosition?: 'inside' | 'outside') =>\n        Object.values(this.components)\n          .filter((component) => isFloatingComponent(component))\n          .filter(\n            (component) =>\n              !scrollerPosition || component.props.scrollerPosition === scrollerPosition,\n          ),\n      getHeadersByPlacement: (placement: 'top' | 'bottom' | 'left' | 'right') =>\n        Object.values(this.components)\n          .filter((component) => isHeaderComponent(component))\n          .filter((component) => component.props.placement === placement),\n      getPanelsByLocation: (location: 'left' | 'right') =>\n        Object.values(this.components)\n          .filter((component) => isPanelComponent(component))\n          .filter((component) => component.props.location === location),\n      addSlot: this.addSlot.bind(this),\n      togglePanel: (payload: TogglePanelPayload) => {\n        this.dispatch(uiTogglePanel(payload));\n      },\n      setHeaderVisible: (payload: SetHeaderVisiblePayload) => {\n        this.dispatch(uiSetHeaderVisible(payload));\n      },\n      updateComponentState: (payload: UpdateComponentStatePayload) => {\n        this.dispatch(uiUpdateComponentState(payload));\n      },\n      ...this.iconManager.capabilities(),\n      ...this.menuManager.capabilities(),\n    };\n  }\n\n  async destroy(): Promise<void> {\n    this.globalStoreSubscription();\n    this.components = {};\n    this.componentRenderers = {};\n    this.mapStateCallbacks = {};\n  }\n}\n\nfunction isItemWithSlots(\n  component: UIComponent<UIComponentType<any>>,\n): component is\n  | UIComponent<GroupedItemsComponent>\n  | UIComponent<HeaderComponent>\n  | UIComponent<PanelComponent>\n  | UIComponent<FloatingComponent>\n  | UIComponent<CustomComponent> {\n  return (\n    isGroupedItemsComponent(component) ||\n    isHeaderComponent(component) ||\n    isPanelComponent(component) ||\n    isFloatingComponent(component) ||\n    isCustomComponent(component)\n  );\n}\n\n// Type guard function\nfunction isGroupedItemsComponent(\n  component: UIComponent<UIComponentType>,\n): component is UIComponent<GroupedItemsComponent> {\n  return component.type === 'groupedItems';\n}\n\nfunction isHeaderComponent(\n  component: UIComponent<UIComponentType>,\n): component is UIComponent<HeaderComponent> {\n  return component.type === 'header';\n}\n\nfunction isPanelComponent(\n  component: UIComponent<UIComponentType>,\n): component is UIComponent<PanelComponent> {\n  return component.type === 'panel';\n}\n\nfunction isFloatingComponent(\n  component: UIComponent<UIComponentType>,\n): component is UIComponent<FloatingComponent> {\n  return component.type === 'floating';\n}\n\nfunction isCommandMenuComponent(\n  component: UIComponent<UIComponentType>,\n): component is UIComponent<CommandMenuComponent> {\n  return component.type === 'commandMenu';\n}\n\nfunction isCustomComponent(\n  component: UIComponent<UIComponentType>,\n): component is UIComponent<CustomComponent> {\n  return component.type === 'custom';\n}\n","import { PluginManifest } from '@embedpdf/core';\nimport { UIPluginConfig } from './types';\n\nexport const UI_PLUGIN_ID = 'ui';\n\nexport const manifest: PluginManifest<UIPluginConfig> = {\n  id: UI_PLUGIN_ID,\n  name: 'UI Plugin',\n  version: '1.0.0',\n  provides: ['ui'],\n  requires: [],\n  optional: [],\n  defaultConfig: {\n    enabled: true,\n    components: {},\n  },\n};\n","import { PluginRegistry } from '@embedpdf/core';\n\nexport type Dynamic<TStore, T> = T | ((state: TStore) => T);\n\nexport interface MenuItemBase<TStore = any> {\n  icon?: Dynamic<TStore, string>;\n  label: Dynamic<TStore, string>;\n  active?: Dynamic<TStore, boolean>; // whether command is currently active\n  disabled?: Dynamic<TStore, boolean>; // whether command is currently disabled\n  shortcut?: string; // \"Ctrl+Plus\"\n  shortcutLabel?: string; // \"Ctrl+Plus\"\n  visible?: Dynamic<TStore, boolean>; // whether command should be visible\n  dividerBefore?: boolean; // whether to add a divider before the command\n}\n\nexport interface Action<TStore = any> extends MenuItemBase<TStore> {\n  id: string; // \"zoomIn\"\n  type: 'action'; // i18n key or literal\n  action: (registry: PluginRegistry, state: TStore) => void; // executed onClick                             // whether to add a divider before the command\n}\n\nexport interface Group<TStore = any> {\n  id: string;\n  type: 'group';\n  label: Dynamic<TStore, string>;\n  children: string[];\n}\n\nexport interface Menu<TStore = any> extends MenuItemBase<TStore> {\n  id: string;\n  type: 'menu';\n  children: string[];\n}\n\nexport type MenuItem<TStore = any> = Action<TStore> | Group | Menu<TStore>;\n\nexport type MenuRegistry = Record<string, MenuItem>;\n\n// Options for executing an action\nexport interface ExecuteOptions {\n  source?: 'click' | 'shortcut' | 'api';\n  triggerElement?: HTMLElement;\n  flatten?: boolean;\n  position?: 'top' | 'bottom' | 'left' | 'right';\n}\n\nexport function hasActive<TStore>(command: MenuItem<TStore>): command is Action<TStore> {\n  return 'active' in command;\n}\n\nexport interface MenuManagerCapabilities {\n  registerItem: (commandItem: MenuItem) => void;\n  registerItems: (commands: MenuRegistry) => void;\n  executeCommand: (id: string, options?: ExecuteOptions) => void;\n  getAction: (id: string) => ResolvedAction | undefined;\n  getMenuOrAction: (id: string) => ResolvedMenu | ResolvedAction | undefined;\n  getChildItems: (commandId: string, options?: { flatten?: boolean }) => ResolvedMenuItem[];\n  getItemsByIds: (ids: string[]) => ResolvedMenuItem[];\n  getAllItems: () => MenuRegistry;\n}\n\n// Add these new resolved types after the existing interfaces\nexport type Resolved<TStore, T> = T extends Dynamic<TStore, infer U> ? U : T;\n\nexport interface ResolvedMenuItemBase<TStore = any> {\n  icon?: string;\n  label: string;\n  active?: boolean;\n  disabled?: boolean;\n  shortcut?: string;\n  shortcutLabel?: string;\n  visible?: boolean;\n  dividerBefore?: boolean;\n}\n\nexport interface ResolvedAction<TStore = any> extends ResolvedMenuItemBase<TStore> {\n  id: string;\n  type: 'action';\n  action: (registry: PluginRegistry, state: TStore) => void;\n}\n\nexport interface ResolvedGroup<TStore = any> {\n  id: string;\n  type: 'group';\n  label: string;\n  children: string[];\n}\n\nexport interface ResolvedMenu<TStore = any> extends ResolvedMenuItemBase<TStore> {\n  id: string;\n  type: 'menu';\n  children: string[];\n}\n\nexport type ResolvedMenuItem<TStore = any> =\n  | ResolvedAction<TStore>\n  | ResolvedGroup<TStore>\n  | ResolvedMenu<TStore>;\n\n// Result of menu item resolution\nexport interface ResolvedMenuItemResult<TStore = any> {\n  item: ResolvedMenuItem<TStore>;\n  isGroup: boolean;\n  isMenu: boolean;\n  isAction: boolean;\n}\n","import { PluginPackage } from '@embedpdf/core';\nimport { UIPlugin } from './ui-plugin';\nimport { manifest, UI_PLUGIN_ID } from './manifest';\nimport { UIPluginConfig, UIPluginState } from './types';\nimport { uiReducer, initialState } from './reducer';\nimport { UIPluginAction } from './actions';\n\nexport const UIPluginPackage: PluginPackage<\n  UIPlugin,\n  UIPluginConfig,\n  UIPluginState,\n  UIPluginAction\n> = {\n  manifest,\n  create: (registry, _engine, config) => new UIPlugin(UI_PLUGIN_ID, registry, config!),\n  reducer: uiReducer,\n  initialState,\n};\n\nexport * from './manifest';\nexport * from './ui-plugin';\nexport * from './types';\nexport * from './ui-component';\nexport * from './utils';\nexport * from './menu/types';\nexport * from './icons/types';\nexport * from './menu/utils';\n"],"mappings":"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","names":["PdfSoftHyphenMarker","PdfZeroWidthSpace","PdfWordJoiner","PdfBomOrZwnbsp","PdfNonCharacterFFFE","PdfNonCharacterFFFF","PdfUnwantedTextMarkers","BLEND_MODE_INFOS","m","info","PdfAnnotationFlagName","acc","bit","name","arePropsEqual","a","b","visited","aType","pairId","getPairId","aIsArray","bIsArray","arraysEqualUnordered","objectsEqual","objectId","objectIdCounter","objectIds","obj","used","outer","i","elemA","j","aKeys","bKeys","key","valA","valB","BasePlugin","id","registry","action","newState","oldState","resolve","cap","debounceTime","now","lastActionTime","listener","b","k","v","w"]}
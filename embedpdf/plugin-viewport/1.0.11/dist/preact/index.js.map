{"version":3,"file":"index.js","sources":["../../src/preact/hooks/use-viewport.ts","../../src/preact/hooks/use-viewport-ref.ts","../../src/preact/components/viewport.tsx"],"sourcesContent":["import { useCapability, usePlugin } from '@embedpdf/core/preact';\nimport { ViewportPlugin } from '@embedpdf/plugin-viewport';\n\nexport const useViewportPlugin = () => usePlugin<ViewportPlugin>(ViewportPlugin.id);\nexport const useViewportCapability = () => useCapability<ViewportPlugin>(ViewportPlugin.id);\n","import { Rect } from '@embedpdf/models';\nimport { RefObject } from 'preact';\nimport { useLayoutEffect, useRef } from 'preact/hooks';\n\nimport { useViewportPlugin } from './use-viewport';\n\nexport function useViewportRef(): RefObject<HTMLDivElement> {\n  const { plugin: viewportPlugin } = useViewportPlugin();\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    if (!viewportPlugin) return;\n\n    const container = containerRef.current;\n    if (!container) return;\n\n    /* ---------- live rect provider --------------------------------- */\n    const provideRect = (): Rect => {\n      const r = container.getBoundingClientRect();\n      return {\n        origin: { x: r.left, y: r.top },\n        size: { width: r.width, height: r.height },\n      };\n    };\n    viewportPlugin.registerBoundingRectProvider(provideRect);\n\n    // Example: On scroll, call setMetrics\n    const onScroll = () => {\n      viewportPlugin.setViewportScrollMetrics({\n        scrollTop: container.scrollTop,\n        scrollLeft: container.scrollLeft,\n      });\n    };\n    container.addEventListener('scroll', onScroll);\n\n    // Example: On resize, call setMetrics\n    const resizeObserver = new ResizeObserver(() => {\n      viewportPlugin.setViewportResizeMetrics({\n        width: container.offsetWidth,\n        height: container.offsetHeight,\n        clientWidth: container.clientWidth,\n        clientHeight: container.clientHeight,\n        scrollTop: container.scrollTop,\n        scrollLeft: container.scrollLeft,\n        scrollWidth: container.scrollWidth,\n        scrollHeight: container.scrollHeight,\n      });\n    });\n    resizeObserver.observe(container);\n\n    const unsubscribeScrollRequest = viewportPlugin.onScrollRequest(\n      ({ x, y, behavior = 'auto' }) => {\n        requestAnimationFrame(() => {\n          container.scrollTo({ left: x, top: y, behavior });\n        });\n      },\n    );\n\n    // Cleanup\n    return () => {\n      viewportPlugin.registerBoundingRectProvider(null);\n      container.removeEventListener('scroll', onScroll);\n      resizeObserver.disconnect();\n      unsubscribeScrollRequest();\n    };\n  }, [viewportPlugin]);\n\n  // Return the ref so your React code can attach it to a div\n  return containerRef;\n}\n","/** @jsxImportSource preact */\nimport { ComponentChildren, JSX } from 'preact';\nimport { useEffect, useState } from 'preact/hooks';\n\nimport { useViewportCapability } from '../hooks';\nimport { useViewportRef } from '../hooks/use-viewport-ref';\n\ntype ViewportProps = JSX.HTMLAttributes<HTMLDivElement> & {\n  children: ComponentChildren;\n};\n\nexport function Viewport({ children, ...props }: ViewportProps) {\n  const [viewportGap, setViewportGap] = useState(0);\n  const viewportRef = useViewportRef();\n  const { provides: viewportProvides } = useViewportCapability();\n\n  useEffect(() => {\n    if (viewportProvides) {\n      setViewportGap(viewportProvides.getViewportGap());\n    }\n  }, [viewportProvides]);\n\n  const { style, ...restProps } = props;\n  return (\n    <div\n      {...restProps}\n      ref={viewportRef}\n      style={{\n        ...(typeof style === 'object' ? style : {}),\n        padding: `${viewportGap}px`,\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n"],"names":["useViewportPlugin","usePlugin","ViewportPlugin","useViewportCapability","useCapability","useViewportRef","viewportPlugin","containerRef","useRef","useLayoutEffect","container","provideRect","r","onScroll","resizeObserver","unsubscribeScrollRequest","x","y","behavior","Viewport","children","props","viewportGap","setViewportGap","useState","viewportRef","viewportProvides","useEffect","style","restProps","jsx"],"mappings":";;;;AAGO,MAAMA,IAAoB,MAAMC,EAA0BC,EAAe,EAAE,GACrEC,IAAwB,MAAMC,EAA8BF,EAAe,EAAE;ACEnF,SAASG,IAA4C;AAC1D,QAAM,EAAE,QAAQC,EAAe,IAAIN,EAAkB,GAC/CO,IAAeC,EAAuB,IAAI;AAEhD,SAAAC,EAAgB,MAAM;AACpB,QAAI,CAACH,EAAgB;AAErB,UAAMI,IAAYH,EAAa;AAC/B,QAAI,CAACG,EAAW;AAGhB,UAAMC,IAAc,MAAY;AACxB,YAAAC,IAAIF,EAAU,sBAAsB;AACnC,aAAA;AAAA,QACL,QAAQ,EAAE,GAAGE,EAAE,MAAM,GAAGA,EAAE,IAAI;AAAA,QAC9B,MAAM,EAAE,OAAOA,EAAE,OAAO,QAAQA,EAAE,OAAO;AAAA,MAC3C;AAAA,IACF;AACA,IAAAN,EAAe,6BAA6BK,CAAW;AAGvD,UAAME,IAAW,MAAM;AACrB,MAAAP,EAAe,yBAAyB;AAAA,QACtC,WAAWI,EAAU;AAAA,QACrB,YAAYA,EAAU;AAAA,MAAA,CACvB;AAAA,IACH;AACU,IAAAA,EAAA,iBAAiB,UAAUG,CAAQ;AAGvC,UAAAC,IAAiB,IAAI,eAAe,MAAM;AAC9C,MAAAR,EAAe,yBAAyB;AAAA,QACtC,OAAOI,EAAU;AAAA,QACjB,QAAQA,EAAU;AAAA,QAClB,aAAaA,EAAU;AAAA,QACvB,cAAcA,EAAU;AAAA,QACxB,WAAWA,EAAU;AAAA,QACrB,YAAYA,EAAU;AAAA,QACtB,aAAaA,EAAU;AAAA,QACvB,cAAcA,EAAU;AAAA,MAAA,CACzB;AAAA,IAAA,CACF;AACD,IAAAI,EAAe,QAAQJ,CAAS;AAEhC,UAAMK,IAA2BT,EAAe;AAAA,MAC9C,CAAC,EAAE,GAAAU,GAAG,GAAAC,GAAG,UAAAC,IAAW,aAAa;AAC/B,8BAAsB,MAAM;AAC1B,UAAAR,EAAU,SAAS,EAAE,MAAMM,GAAG,KAAKC,GAAG,UAAAC,GAAU;AAAA,QAAA,CACjD;AAAA,MAAA;AAAA,IAEL;AAGA,WAAO,MAAM;AACX,MAAAZ,EAAe,6BAA6B,IAAI,GACtCI,EAAA,oBAAoB,UAAUG,CAAQ,GAChDC,EAAe,WAAW,GACDC,EAAA;AAAA,IAC3B;AAAA,EAAA,GACC,CAACT,CAAc,CAAC,GAGZC;AACT;AC1DO,SAASY,EAAS,EAAE,UAAAC,GAAU,GAAGC,KAAwB;AAC9D,QAAM,CAACC,GAAaC,CAAc,IAAIC,EAAS,CAAC,GAC1CC,IAAcpB,EAAe,GAC7B,EAAE,UAAUqB,EAAiB,IAAIvB,EAAsB;AAE7D,EAAAwB,EAAU,MAAM;AACd,IAAID,KACaH,EAAAG,EAAiB,gBAAgB;AAAA,EAClD,GACC,CAACA,CAAgB,CAAC;AAErB,QAAM,EAAE,OAAAE,GAAO,GAAGC,EAAA,IAAcR;AAE9B,SAAA,gBAAAS;AAAA,IAAC;AAAA,IAAA;AAAA,MACE,GAAGD;AAAA,MACJ,KAAKJ;AAAA,MACL,OAAO;AAAA,QACL,GAAI,OAAOG,KAAU,WAAWA,IAAQ,CAAC;AAAA,QACzC,SAAS,GAAGN,CAAW;AAAA,MACzB;AAAA,MAEC,UAAAF;AAAA,IAAA;AAAA,EACH;AAEJ;"}
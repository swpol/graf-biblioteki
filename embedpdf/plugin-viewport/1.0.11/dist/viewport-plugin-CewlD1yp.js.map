{"version":3,"file":"viewport-plugin-CewlD1yp.js","sources":["../src/lib/actions.ts","../../core/dist/math-ChSRQF3r.js","../../core/dist/index.js","../src/lib/viewport-plugin.ts"],"sourcesContent":["import { Action } from '@embedpdf/core';\n\nimport { ViewportInputMetrics, ViewportScrollMetrics } from './types';\n\nexport const SET_VIEWPORT_METRICS = 'SET_VIEWPORT_METRICS';\nexport const SET_VIEWPORT_SCROLL_METRICS = 'SET_VIEWPORT_SCROLL_METRICS';\nexport const SET_VIEWPORT_GAP = 'SET_VIEWPORT_GAP';\nexport const SET_SCROLL_ACTIVITY = 'SET_SCROLL_ACTIVITY';\n\nexport interface SetViewportMetricsAction extends Action {\n  type: typeof SET_VIEWPORT_METRICS;\n  payload: ViewportInputMetrics;\n}\n\nexport interface SetViewportScrollMetricsAction extends Action {\n  type: typeof SET_VIEWPORT_SCROLL_METRICS;\n  payload: ViewportScrollMetrics;\n}\n\nexport interface SetViewportGapAction extends Action {\n  type: typeof SET_VIEWPORT_GAP;\n  payload: number;\n}\n\nexport interface SetScrollActivityAction extends Action {\n  type: typeof SET_SCROLL_ACTIVITY;\n  payload: boolean;\n}\n\nexport type ViewportAction =\n  | SetViewportMetricsAction\n  | SetViewportScrollMetricsAction\n  | SetViewportGapAction\n  | SetScrollActivityAction;\n\nexport function setViewportGap(viewportGap: number): SetViewportGapAction {\n  return {\n    type: SET_VIEWPORT_GAP,\n    payload: viewportGap,\n  };\n}\n\nexport function setViewportMetrics(\n  viewportMetrics: ViewportInputMetrics,\n): SetViewportMetricsAction {\n  return {\n    type: SET_VIEWPORT_METRICS,\n    payload: viewportMetrics,\n  };\n}\n\nexport function setViewportScrollMetrics(\n  scrollMetrics: ViewportScrollMetrics,\n): SetViewportScrollMetricsAction {\n  return {\n    type: SET_VIEWPORT_SCROLL_METRICS,\n    payload: scrollMetrics,\n  };\n}\n\nexport function setScrollActivity(isScrolling: boolean): SetScrollActivityAction {\n  return { type: SET_SCROLL_ACTIVITY, payload: isScrolling };\n}\n","class b {\n  constructor() {\n    this.dependencyGraph = /* @__PURE__ */ new Map();\n  }\n  addNode(e, t = []) {\n    this.dependencyGraph.set(e, new Set(t));\n  }\n  hasCircularDependencies() {\n    const e = /* @__PURE__ */ new Set(), t = /* @__PURE__ */ new Set(), r = (s) => {\n      e.add(s), t.add(s);\n      const n = this.dependencyGraph.get(s) || /* @__PURE__ */ new Set();\n      for (const a of n)\n        if (e.has(a)) {\n          if (t.has(a))\n            return !0;\n        } else if (r(a)) return !0;\n      return t.delete(s), !1;\n    };\n    for (const s of this.dependencyGraph.keys())\n      if (!e.has(s) && r(s))\n        return !0;\n    return !1;\n  }\n  resolveLoadOrder() {\n    if (this.hasCircularDependencies())\n      throw new Error(\"Circular dependencies detected\");\n    const e = [], t = /* @__PURE__ */ new Set(), r = /* @__PURE__ */ new Set(), s = (n) => {\n      if (r.has(n)) throw new Error(\"Circular dependency\");\n      if (t.has(n)) return;\n      r.add(n);\n      const a = this.dependencyGraph.get(n) || /* @__PURE__ */ new Set();\n      for (const o of a)\n        s(o);\n      r.delete(n), t.add(n), e.push(n);\n    };\n    for (const n of this.dependencyGraph.keys())\n      t.has(n) || s(n);\n    return e;\n  }\n}\nclass l extends Error {\n  constructor(e) {\n    super(e), this.name = \"PluginRegistrationError\";\n  }\n}\nclass u extends Error {\n  constructor(e) {\n    super(e), this.name = \"PluginNotFoundError\";\n  }\n}\nclass m extends Error {\n  constructor(e) {\n    super(e), this.name = \"CircularDependencyError\";\n  }\n}\nclass K extends Error {\n  constructor(e) {\n    super(e), this.name = \"CapabilityNotFoundError\";\n  }\n}\nclass H extends Error {\n  constructor(e) {\n    super(e), this.name = \"CapabilityConflictError\";\n  }\n}\nclass W extends Error {\n  constructor(e) {\n    super(e), this.name = \"PluginInitializationError\";\n  }\n}\nclass R extends Error {\n  constructor(e) {\n    super(e), this.name = \"PluginConfigurationError\";\n  }\n}\nclass D {\n  /**\n   * Initializes the PluginStore with the main store and plugin ID.\n   * @param store The main store instance.\n   * @param pluginId The unique identifier for the plugin.\n   */\n  constructor(e, t) {\n    this.store = e, this.pluginId = t;\n  }\n  /**\n   * Gets the current state of the plugin.\n   * @returns The plugin's state.\n   */\n  getState() {\n    return this.store.getState().plugins[this.pluginId];\n  }\n  /**\n   * Dispatches an action for the plugin and returns the *new* global state.\n   * If you only need the plugin’s updated state, call `getState()` afterward.\n   * @param action The action to dispatch.\n   * @returns The updated global store state (after plugin reducer).\n   */\n  dispatch(e) {\n    return this.store.dispatchToPlugin(this.pluginId, e);\n  }\n  /**\n   * Subscribes to state changes only for this specific plugin.\n   * You now receive (action, newPluginState, oldPluginState) in the callback.\n   *\n   * @param listener The callback to invoke when plugin state changes.\n   * @returns A function to unsubscribe the listener.\n   */\n  subscribeToState(e) {\n    return this.store.subscribeToPlugin(this.pluginId, (t, r, s) => {\n      e(\n        t,\n        r,\n        s\n      );\n    });\n  }\n  /**\n   * Subscribes to a specific action type for the plugin.\n   * This still uses the main store's `onAction`, so you get the *global*\n   * old/new store states there. If you specifically want old/new plugin state,\n   * use `subscribeToState` instead.\n   *\n   * @param type The action type to listen for.\n   * @param handler The callback to invoke when the action occurs.\n   * @returns A function to unsubscribe the handler.\n   */\n  onAction(e, t) {\n    return this.store.onAction(e, (r, s, n) => {\n      t(\n        r,\n        s.plugins[this.pluginId],\n        n.plugins[this.pluginId]\n      );\n    });\n  }\n}\nconst g = \"LOAD_DOCUMENT\", f = \"SET_DOCUMENT\", p = \"SET_DOCUMENT_ERROR\", y = \"SET_SCALE\", w = \"SET_ROTATION\", E = \"SET_PAGES\", O = [\n  g,\n  f,\n  p,\n  y,\n  w,\n  E\n], Z = () => ({ type: g }), I = (i) => ({\n  type: f,\n  payload: i\n}), V = (i) => ({\n  type: p,\n  payload: i\n}), J = (i) => ({ type: y, payload: i }), Y = (i) => ({\n  type: w,\n  payload: i\n}), Q = (i) => ({\n  type: E,\n  payload: i\n});\nclass A {\n  /**\n   * Initializes the store with the provided core state.\n   * @param reducer          The core reducer function\n   * @param initialCoreState The initial core state\n   */\n  constructor(e, t) {\n    this.initialCoreState = t, this.pluginReducers = {}, this.listeners = [], this.pluginListeners = {}, this.state = { core: t, plugins: {} }, this.coreReducer = e;\n  }\n  /**\n   * Adds a reducer for a plugin-specific state.\n   * @param pluginId The unique identifier for the plugin.\n   * @param reducer The reducer function for the plugin state.\n   * @param initialState The initial state for the plugin.\n   */\n  addPluginReducer(e, t, r) {\n    this.state.plugins[e] = r, this.pluginReducers[e] = t;\n  }\n  /**\n   * Dispatches an action *only* to the core reducer.\n   * Notifies the global store listeners with (action, newState, oldState).\n   *\n   * @param action The action to dispatch, typed as CoreAction\n   * @returns The updated *global* store state\n   */\n  dispatchToCore(e) {\n    if (!this.coreReducer)\n      return this.getState();\n    const t = this.getState();\n    this.state.core = this.coreReducer(this.state.core, e);\n    const r = this.getState();\n    return this.listeners.forEach((s) => s(e, r, t)), r;\n  }\n  /**\n   * Dispatches an action *only* to a specific plugin.\n   * Optionally notifies global store listeners if `notifyGlobal` is true.\n   * Always notifies plugin-specific listeners with (action, newPluginState, oldPluginState).\n   *\n   * @param pluginId   The plugin identifier\n   * @param action     The plugin action to dispatch\n   * @param notifyGlobal Whether to also notify global store listeners\n   * @returns The updated *global* store state\n   */\n  dispatchToPlugin(e, t, r = !0) {\n    const s = this.getState(), n = this.pluginReducers[e];\n    if (!n)\n      return s;\n    const a = s.plugins[e], o = n(a, t);\n    this.state.plugins[e] = o;\n    const c = this.getState();\n    return r && this.listeners.forEach((h) => h(t, c, s)), this.pluginListeners[e] && this.pluginListeners[e].forEach((h) => {\n      h(t, o, a);\n    }), o;\n  }\n  /**\n   * Dispatches an action to update the state using:\n   * - the core reducer (if it's a CoreAction)\n   * - *all* plugin reducers (regardless of action type), with no global notify for each plugin\n   *\n   * Returns the new *global* store state after all reducers have processed the action.\n   *\n   * @param action The action to dispatch (can be CoreAction or any Action).\n   */\n  dispatch(e) {\n    const t = this.getState();\n    this.isCoreAction(e) && (this.state.core = this.coreReducer(this.state.core, e));\n    for (const s in this.pluginReducers) {\n      const n = this.pluginReducers[s], a = t.plugins[s];\n      n && (this.state.plugins[s] = n(a, e));\n    }\n    const r = this.getState();\n    return this.listeners.forEach((s) => s(e, r, t)), r;\n  }\n  /**\n   * Returns a shallow copy of the current state.\n   * @returns The current store state.\n   */\n  getState() {\n    return {\n      core: { ...this.state.core },\n      plugins: { ...this.state.plugins }\n    };\n  }\n  /**\n   * Subscribes a listener to *global* state changes.\n   * The callback signature is now (action, newState, oldState).\n   *\n   * @param listener The callback to invoke on state changes\n   * @returns A function to unsubscribe the listener\n   */\n  subscribe(e) {\n    return this.listeners.push(e), () => {\n      this.listeners = this.listeners.filter((t) => t !== e);\n    };\n  }\n  /**\n   * Subscribes a listener to *plugin-specific* state changes.\n   * The callback signature is now (action, newPluginState, oldPluginState).\n   *\n   * @param pluginId The unique identifier for the plugin.\n   * @param listener The callback to invoke on plugin state changes.\n   * @returns A function to unsubscribe the listener.\n   */\n  subscribeToPlugin(e, t) {\n    if (!(e in this.state.plugins))\n      throw new Error(\n        `Plugin state not found for plugin \"${e}\". Did you forget to call addPluginReducer?`\n      );\n    return this.pluginListeners[e] || (this.pluginListeners[e] = []), this.pluginListeners[e].push(t), () => {\n      this.pluginListeners[e] = this.pluginListeners[e].filter((r) => r !== t), this.pluginListeners[e].length === 0 && delete this.pluginListeners[e];\n    };\n  }\n  /**\n   * Subscribes to a specific action type (only from the core's action union).\n   * The callback signature is (action, newState, oldState).\n   *\n   * @param type The action type to listen for.\n   * @param handler The callback to invoke when the action occurs.\n   * @returns A function to unsubscribe the handler.\n   */\n  onAction(e, t) {\n    return this.subscribe((r, s, n) => {\n      r.type === e && t(r, s, n);\n    });\n  }\n  /**\n   * Gets a PluginStore handle for a specific plugin.\n   * @param pluginId The unique identifier for the plugin.\n   * @returns A PluginStore instance for the plugin.\n   */\n  getPluginStore(e) {\n    if (!(e in this.state.plugins))\n      throw new Error(\n        `Plugin state not found for plugin \"${e}\". Did you forget to call addPluginReducer?`\n      );\n    return new D(this, e);\n  }\n  /**\n   * Helper method to check if an action is a CoreAction.\n   * Adjust if you have a more refined way to differentiate CoreAction vs. any other Action.\n   */\n  isCoreAction(e) {\n    return O.includes(e.type);\n  }\n  /**\n   * Destroy the store: drop every listener and plugin reducer\n   */\n  destroy() {\n    var e, t;\n    this.listeners.length = 0;\n    for (const r in this.pluginListeners)\n      (t = (e = this.pluginListeners[r]) == null ? void 0 : e.splice) == null || t.call(e, 0);\n    this.pluginListeners = {}, this.pluginReducers = {}, this.state.plugins = {}, this.state.core = { ...this.initialCoreState };\n  }\n}\nvar C = /* @__PURE__ */ ((i) => (i[i.Degree0 = 0] = \"Degree0\", i[i.Degree90 = 1] = \"Degree90\", i[i.Degree180 = 2] = \"Degree180\", i[i.Degree270 = 3] = \"Degree270\", i))(C || {});\nfunction T(i) {\n  const { width: e, height: t } = i;\n  return {\n    width: t,\n    height: e\n  };\n}\nfunction X(i, e, t) {\n  return i = e % 2 === 0 ? i : T(i), {\n    width: i.width * t,\n    height: i.height * t\n  };\n}\nvar z = \"­\", M = \"​\", L = \"⁠\", $ = \"\\uFEFF\", F = \"￾\", N = \"￿\", k = Object.freeze([\n  z,\n  M,\n  L,\n  $,\n  F,\n  N\n]);\nnew RegExp(`[${k.join(\"\")}]`, \"g\");\nvar P = Object.freeze([\n  { id: 0, label: \"Normal\", css: \"normal\" },\n  { id: 1, label: \"Multiply\", css: \"multiply\" },\n  { id: 2, label: \"Screen\", css: \"screen\" },\n  { id: 3, label: \"Overlay\", css: \"overlay\" },\n  { id: 4, label: \"Darken\", css: \"darken\" },\n  { id: 5, label: \"Lighten\", css: \"lighten\" },\n  { id: 6, label: \"Color Dodge\", css: \"color-dodge\" },\n  { id: 7, label: \"Color Burn\", css: \"color-burn\" },\n  { id: 8, label: \"Hard Light\", css: \"hard-light\" },\n  { id: 9, label: \"Soft Light\", css: \"soft-light\" },\n  { id: 10, label: \"Difference\", css: \"difference\" },\n  { id: 11, label: \"Exclusion\", css: \"exclusion\" },\n  { id: 12, label: \"Hue\", css: \"hue\" },\n  { id: 13, label: \"Saturation\", css: \"saturation\" },\n  { id: 14, label: \"Color\", css: \"color\" },\n  { id: 15, label: \"Luminosity\", css: \"luminosity\" }\n]);\nP.reduce(\n  (i, e) => (i[e.id] = e, i),\n  {}\n);\nP.reduce((i, e) => (i[e.css] = e.id, i), {});\nP.map((i) => ({\n  value: i.id,\n  label: i.label\n}));\nvar _ = Object.freeze({\n  1: \"invisible\",\n  2: \"hidden\",\n  4: \"print\",\n  8: \"noZoom\",\n  16: \"noRotate\",\n  32: \"noView\",\n  64: \"readOnly\",\n  128: \"locked\",\n  256: \"toggleNoView\"\n});\nObject.entries(\n  _\n).reduce(\n  (i, [e, t]) => (i[t] = Number(e), i),\n  {}\n);\nconst j = (i) => ({\n  scale: (i == null ? void 0 : i.scale) ?? 1,\n  rotation: (i == null ? void 0 : i.rotation) ?? C.Degree0,\n  document: null,\n  pages: [],\n  loading: !1,\n  error: null\n}), q = (i, e) => {\n  switch (e.type) {\n    case g:\n      return {\n        ...i,\n        loading: !0,\n        error: null\n      };\n    case f:\n      return {\n        ...i,\n        document: e.payload,\n        pages: e.payload.pages.map((t) => [t]),\n        loading: !1,\n        error: null\n      };\n    case w:\n      return {\n        ...i,\n        rotation: e.payload\n      };\n    case E:\n      return {\n        ...i,\n        pages: e.payload\n      };\n    case p:\n      return {\n        ...i,\n        loading: !1,\n        error: e.payload\n      };\n    case y:\n      return {\n        ...i,\n        scale: e.payload\n      };\n    default:\n      return i;\n  }\n};\nclass ee {\n  constructor(e, t) {\n    this.plugins = /* @__PURE__ */ new Map(), this.manifests = /* @__PURE__ */ new Map(), this.capabilities = /* @__PURE__ */ new Map(), this.status = /* @__PURE__ */ new Map(), this.configurations = /* @__PURE__ */ new Map(), this.engineInitialized = !1, this.initPromise = null, this.pendingRegistrations = [], this.processingRegistrations = [], this.initialized = !1, this.isInitializing = !1, this.pluginsReadyPromise = null, this.destroyed = !1, this.resolver = new b(), this.engine = e, this.initialCoreState = j(t), this.store = new A(q, this.initialCoreState);\n  }\n  /**\n   * Ensure engine is initialized before proceeding\n   */\n  async ensureEngineInitialized() {\n    this.engineInitialized || (this.engine.initialize ? (await this.engine.initialize().toPromise(), this.engineInitialized = !0) : this.engineInitialized = !0);\n  }\n  /**\n   * Register a plugin without initializing it\n   */\n  registerPlugin(e, t) {\n    if (this.initialized && !this.isInitializing)\n      throw new l(\"Cannot register plugins after initialization\");\n    this.validateManifest(e.manifest), this.store.addPluginReducer(\n      e.manifest.id,\n      // We need one type assertion here since we can't fully reconcile TAction with Action\n      // due to TypeScript's type system limitations with generic variance\n      e.reducer,\n      typeof e.initialState == \"function\" ? e.initialState(\n        this.initialCoreState,\n        {\n          ...e.manifest.defaultConfig,\n          ...t\n        }\n      ) : e.initialState\n    ), this.pendingRegistrations.push({\n      package: e,\n      config: t\n    });\n  }\n  /**\n   * Get the central store instance\n   */\n  getStore() {\n    return this.store;\n  }\n  /**\n   * Get the engine instance\n   */\n  getEngine() {\n    return this.engine;\n  }\n  /**\n   * Get a promise that resolves when all plugins are ready\n   */\n  pluginsReady() {\n    return this.pluginsReadyPromise ? this.pluginsReadyPromise : (this.pluginsReadyPromise = (async () => {\n      this.initialized || await this.initialize();\n      const e = Array.from(this.plugins.values()).map(\n        (t) => typeof t.ready == \"function\" ? t.ready() : Promise.resolve()\n      );\n      await Promise.all(e);\n    })(), this.pluginsReadyPromise);\n  }\n  /**\n   * INITIALISE THE REGISTRY – runs once no-matter-how-many calls   *\n   */\n  async initialize() {\n    if (this.destroyed)\n      throw new l(\"Registry has been destroyed\");\n    return this.initPromise ? this.initPromise : (this.initPromise = (async () => {\n      var e;\n      if (this.initialized)\n        throw new l(\"Registry is already initialized\");\n      this.isInitializing = !0;\n      try {\n        if (await this.ensureEngineInitialized(), this.destroyed)\n          return;\n        for (; this.pendingRegistrations.length > 0; ) {\n          if (this.destroyed)\n            return;\n          this.processingRegistrations = [...this.pendingRegistrations], this.pendingRegistrations = [];\n          for (const r of this.processingRegistrations) {\n            const s = /* @__PURE__ */ new Set(), n = [...r.package.manifest.requires, ...r.package.manifest.optional];\n            for (const a of n) {\n              const o = this.processingRegistrations.find(\n                (c) => c.package.manifest.provides.includes(a)\n              );\n              o && s.add(o.package.manifest.id);\n            }\n            this.resolver.addNode(r.package.manifest.id, [...s]);\n          }\n          const t = this.resolver.resolveLoadOrder();\n          for (const r of t) {\n            const s = this.processingRegistrations.find((n) => n.package.manifest.id === r);\n            await this.initializePlugin(s.package.manifest, s.package.create, s.config);\n          }\n          this.processingRegistrations = [], this.resolver = new b();\n        }\n        for (const t of this.plugins.values())\n          await ((e = t.postInitialize) == null ? void 0 : e.call(t).catch((r) => {\n            console.error(`Error in postInitialize for plugin ${t.id}`, r), this.status.set(t.id, \"error\");\n          }));\n        this.initialized = !0;\n      } catch (t) {\n        throw t instanceof Error ? new m(\n          `Failed to resolve plugin dependencies: ${t.message}`\n        ) : t;\n      } finally {\n        this.isInitializing = !1;\n      }\n    })(), this.initPromise);\n  }\n  /**\n   * Initialize a single plugin with all necessary checks\n   */\n  async initializePlugin(e, t, r) {\n    const s = {\n      ...e.defaultConfig,\n      ...r\n    };\n    this.validateConfig(e.id, s, e.defaultConfig);\n    const n = t(this, this.engine, s);\n    this.validatePlugin(n);\n    for (const a of e.requires)\n      if (!this.capabilities.has(a))\n        throw new l(\n          `Missing required capability: ${a} for plugin ${e.id}`\n        );\n    for (const a of e.optional)\n      this.capabilities.has(a) && console.debug(`Optional capability ${a} is available for plugin ${e.id}`);\n    console.log(\"initializePlugin\", e.id, e.provides);\n    for (const a of e.provides) {\n      if (this.capabilities.has(a))\n        throw new l(\n          `Capability ${a} is already provided by plugin ${this.capabilities.get(a)}`\n        );\n      this.capabilities.set(a, e.id);\n    }\n    this.plugins.set(e.id, n), this.manifests.set(e.id, e), this.status.set(e.id, \"registered\"), this.configurations.set(e.id, s);\n    try {\n      n.initialize && await n.initialize(s), this.status.set(e.id, \"active\");\n    } catch (a) {\n      throw this.plugins.delete(e.id), this.manifests.delete(e.id), console.log(\"initializePlugin failed\", e.id, e.provides), e.provides.forEach((o) => this.capabilities.delete(o)), a;\n    }\n  }\n  getPluginConfig(e) {\n    const t = this.configurations.get(e);\n    if (!t)\n      throw new u(`Configuration for plugin ${e} not found`);\n    return t;\n  }\n  validateConfig(e, t, r) {\n    const n = Object.keys(r).filter((a) => !t.hasOwnProperty(a));\n    if (n.length > 0)\n      throw new R(\n        `Missing required configuration keys for plugin ${e}: ${n.join(\", \")}`\n      );\n  }\n  async updatePluginConfig(e, t) {\n    const r = this.getPlugin(e);\n    if (!r)\n      throw new u(`Plugin ${e} not found`);\n    const s = this.manifests.get(e), n = this.configurations.get(e);\n    if (!s || !n)\n      throw new u(`Plugin ${e} not found`);\n    const a = {\n      ...n,\n      ...t\n    };\n    this.validateConfig(e, a, s.defaultConfig), this.configurations.set(e, a), r.initialize && await r.initialize(a);\n  }\n  /**\n   * Register multiple plugins at once\n   */\n  registerPluginBatch(e) {\n    for (const t of e)\n      this.registerPlugin(t.package, t.config);\n  }\n  /**\n   * Unregister a plugin\n   */\n  async unregisterPlugin(e) {\n    const t = this.plugins.get(e);\n    if (!t)\n      throw new u(`Plugin ${e} is not registered`);\n    const r = this.manifests.get(e);\n    if (!r)\n      throw new u(`Manifest for plugin ${e} not found`);\n    for (const [s, n] of this.manifests.entries()) {\n      if (s === e) continue;\n      if ([...n.requires, ...n.optional].some(\n        (o) => r.provides.includes(o)\n      ))\n        throw new l(\n          `Cannot unregister plugin ${e}: plugin ${s} depends on it`\n        );\n    }\n    try {\n      t.destroy && await t.destroy();\n      for (const s of r.provides)\n        this.capabilities.delete(s);\n      this.plugins.delete(e), this.manifests.delete(e), this.status.delete(e);\n    } catch (s) {\n      throw s instanceof Error ? new Error(`Failed to unregister plugin ${e}: ${s.message}`) : s;\n    }\n  }\n  /**\n   * Get a plugin instance\n   * @param pluginId The ID of the plugin to get\n   * @returns The plugin instance or null if not found\n   */\n  getPlugin(e) {\n    const t = this.plugins.get(e);\n    return t || null;\n  }\n  /**\n   * Get a plugin that provides a specific capability\n   * @param capability The capability to get a provider for\n   * @returns The plugin providing the capability or null if not found\n   */\n  getCapabilityProvider(e) {\n    const t = this.capabilities.get(e);\n    return t ? this.getPlugin(t) : null;\n  }\n  /**\n   * Check if a capability is available\n   */\n  hasCapability(e) {\n    return this.capabilities.has(e);\n  }\n  /**\n   * Get all registered plugins\n   */\n  getAllPlugins() {\n    return Array.from(this.plugins.values());\n  }\n  /**\n   * Get plugin status\n   */\n  getPluginStatus(e) {\n    const t = this.status.get(e);\n    if (!t)\n      throw new u(`Plugin ${e} not found`);\n    return t;\n  }\n  /**\n   * Validate plugin object\n   */\n  validatePlugin(e) {\n    if (!e.id)\n      throw new l(\"Plugin must have an id\");\n  }\n  /**\n   * Validate plugin manifest\n   */\n  validateManifest(e) {\n    if (!e.id)\n      throw new l(\"Manifest must have an id\");\n    if (!e.name)\n      throw new l(\"Manifest must have a name\");\n    if (!e.version)\n      throw new l(\"Manifest must have a version\");\n    if (!Array.isArray(e.provides))\n      throw new l(\"Manifest must have a provides array\");\n    if (!Array.isArray(e.requires))\n      throw new l(\"Manifest must have a requires array\");\n    if (!Array.isArray(e.optional))\n      throw new l(\"Manifest must have an optional array\");\n  }\n  isDestroyed() {\n    return this.destroyed;\n  }\n  /**\n   * DESTROY EVERYTHING – waits for any ongoing initialise(), once  *\n   */\n  async destroy() {\n    var e;\n    if (this.destroyed) throw new l(\"Registry has already been destroyed\");\n    this.destroyed = !0;\n    try {\n      await this.initPromise;\n    } catch {\n    }\n    for (const t of Array.from(this.plugins.values()).reverse())\n      await ((e = t.destroy) == null ? void 0 : e.call(t));\n    this.store.destroy(), this.plugins.clear(), this.manifests.clear(), this.capabilities.clear(), this.status.clear(), this.pendingRegistrations.length = 0, this.processingRegistrations.length = 0;\n  }\n}\nfunction te(i, e, t) {\n  return i < e ? e : i > t ? t : i;\n}\nfunction v(i, e, t) {\n  if (i === e)\n    return !0;\n  if (i == null || e == null)\n    return i === e;\n  const r = typeof i;\n  if (r !== typeof e) return !1;\n  if (r === \"object\") {\n    t || (t = /* @__PURE__ */ new Set());\n    const n = x(i, e);\n    if (t.has(n))\n      return !0;\n    t.add(n);\n    const a = Array.isArray(i), o = Array.isArray(e);\n    return a && o ? U(i, e, t) : !a && !o ? B(i, e, t) : !1;\n  }\n  return !1;\n}\nfunction x(i, e) {\n  return `${S(i)}__${S(e)}`;\n}\nlet G = 0;\nconst d = /* @__PURE__ */ new WeakMap();\nfunction S(i) {\n  return d.has(i) || d.set(i, ++G), d.get(i);\n}\nfunction U(i, e, t) {\n  if (i.length !== e.length) return !1;\n  const r = new Array(e.length).fill(!1);\n  e: for (let s = 0; s < i.length; s++) {\n    const n = i[s];\n    for (let a = 0; a < e.length; a++)\n      if (!r[a] && v(n, e[a], t)) {\n        r[a] = !0;\n        continue e;\n      }\n    return !1;\n  }\n  return !0;\n}\nfunction B(i, e, t) {\n  const r = Object.keys(i).sort(), s = Object.keys(e).sort();\n  if (r.length !== s.length) return !1;\n  for (let n = 0; n < r.length; n++)\n    if (r[n] !== s[n]) return !1;\n  for (const n of r) {\n    const a = i[n], o = e[n];\n    if (!v(a, o, t))\n      return !1;\n  }\n  return !0;\n}\nexport {\n  m as C,\n  b as D,\n  g as L,\n  ee as P,\n  f as S,\n  v as a,\n  l as b,\n  u as c,\n  K as d,\n  H as e,\n  W as f,\n  R as g,\n  p as h,\n  y as i,\n  w as j,\n  E as k,\n  O as l,\n  Z as m,\n  V as n,\n  J as o,\n  Y as p,\n  Q as q,\n  j as r,\n  I as s,\n  X as t,\n  te as u\n};\n//# sourceMappingURL=math-ChSRQF3r.js.map\n","import { t as S, a as m } from \"./math-ChSRQF3r.js\";\nimport { l as v, e as D, d as I, C as F, D as _, L as O, g as A, f as N, c as M, b as U, P as z, S as x, h as L, k as j, j as q, i as B, u as K, r as $, m as k, s as G, n as W, q as Y, p as H, o as J } from \"./math-ChSRQF3r.js\";\nconst f = (o) => o.pages.map(\n  (t) => t.map((e) => ({\n    ...e,\n    rotatedSize: S(e.size, o.rotation, 1)\n  }))\n);\nfunction y(o, t) {\n  return {\n    package: o,\n    config: t\n  };\n}\nclass w {\n  constructor(t, e) {\n    if (this.id = t, this.registry = e, this.debouncedActions = {}, this.unsubscribeFromState = null, this.unsubscribeFromCoreStore = null, t !== this.constructor.id)\n      throw new Error(\n        `Plugin ID mismatch: ${t} !== ${this.constructor.id}`\n      );\n    this.coreStore = this.registry.getStore(), this.pluginStore = this.coreStore.getPluginStore(this.id), this.unsubscribeFromState = this.pluginStore.subscribeToState((i, s, c) => {\n      this.onStoreUpdated(c, s);\n    }), this.unsubscribeFromCoreStore = this.coreStore.subscribe((i, s, c) => {\n      this.onCoreStoreUpdated(c, s);\n    }), this.readyPromise = new Promise((i) => {\n      this.readyResolve = i;\n    }), this.readyResolve();\n  }\n  provides() {\n    if (!this._capability) {\n      const t = this.buildCapability();\n      this._capability = Object.freeze(t);\n    }\n    return this._capability;\n  }\n  /**\n   *  Get a copy of the current state\n   */\n  get state() {\n    return this.pluginStore.getState();\n  }\n  /**\n   *  Get a copy of the current core state\n   */\n  get coreState() {\n    return this.coreStore.getState();\n  }\n  /**\n   * @deprecated  use `this.state` Get a copy of the current state\n   */\n  getState() {\n    return this.pluginStore.getState();\n  }\n  /**\n   * @deprecated  use `this.coreState` Get a copy of the current core state\n   */\n  getCoreState() {\n    return this.coreStore.getState();\n  }\n  /**\n   * Core Dispatch\n   */\n  dispatchCoreAction(t) {\n    return this.coreStore.dispatchToCore(t);\n  }\n  /**\n   * Dispatch an action to all plugins\n   */\n  dispatchToAllPlugins(t) {\n    return this.coreStore.dispatch(t);\n  }\n  /**\n   * Dispatch an action\n   */\n  dispatch(t) {\n    return this.pluginStore.dispatch(t);\n  }\n  /**\n   * Dispatch an action with debouncing to prevent rapid repeated calls\n   * @param action The action to dispatch\n   * @param debounceTime Time in ms to debounce (default: 100ms)\n   * @returns boolean indicating whether the action was dispatched or debounced\n   */\n  debouncedDispatch(t, e = 100) {\n    const i = Date.now(), s = this.debouncedActions[t.type] || 0;\n    return i - s >= e ? (this.debouncedActions[t.type] = i, this.dispatch(t), !0) : !1;\n  }\n  /**\n   * Subscribe to state changes\n   */\n  subscribe(t) {\n    return this.pluginStore.subscribeToState(t);\n  }\n  /**\n   * Subscribe to core store changes\n   */\n  subscribeToCoreStore(t) {\n    return this.coreStore.subscribe(t);\n  }\n  /**\n   * Called when the plugin store state is updated\n   * @param oldState Previous state\n   * @param newState New state\n   */\n  onStoreUpdated(t, e) {\n  }\n  /**\n   * Called when the core store state is updated\n   * @param oldState Previous state\n   * @param newState New state\n   */\n  onCoreStoreUpdated(t, e) {\n  }\n  /**\n   * Cleanup method to be called when plugin is being destroyed\n   */\n  destroy() {\n    this.unsubscribeFromState && (this.unsubscribeFromState(), this.unsubscribeFromState = null), this.unsubscribeFromCoreStore && (this.unsubscribeFromCoreStore(), this.unsubscribeFromCoreStore = null);\n  }\n  /**\n   * Returns a promise that resolves when the plugin is ready\n   */\n  ready() {\n    return this.readyPromise;\n  }\n  /**\n   * Mark the plugin as ready\n   */\n  markReady() {\n    this.readyResolve();\n  }\n  /**\n   * Reset the ready state (useful for plugins that need to reinitialize)\n   */\n  resetReady() {\n    this.readyPromise = new Promise((t) => {\n      this.readyResolve = t;\n    });\n  }\n}\nclass b {\n  constructor(t, e) {\n    this.handler = t, this.options = e, this.lastRun = 0, this.handle = (i) => {\n      this.options.mode === \"debounce\" ? this.debounce(i) : this.throttle(i);\n    };\n  }\n  debounce(t) {\n    this.timeoutId && window.clearTimeout(this.timeoutId), this.timeoutId = window.setTimeout(() => {\n      this.handler(t), this.timeoutId = void 0;\n    }, this.options.wait);\n  }\n  throttle(t) {\n    if (this.options.mode === \"debounce\") return;\n    const e = Date.now(), i = this.options.throttleMode || \"leading-trailing\";\n    e - this.lastRun >= this.options.wait && (i === \"leading-trailing\" && this.handler(t), this.lastRun = e), this.timeoutId && window.clearTimeout(this.timeoutId), this.timeoutId = window.setTimeout(\n      () => {\n        this.handler(t), this.lastRun = Date.now(), this.timeoutId = void 0;\n      },\n      this.options.wait - (e - this.lastRun)\n    );\n  }\n  destroy() {\n    this.timeoutId && window.clearTimeout(this.timeoutId);\n  }\n}\nfunction E() {\n  const o = /* @__PURE__ */ new Set();\n  return {\n    emit: (e = void 0) => o.forEach((i) => i(e)),\n    on: (e) => (o.add(e), () => o.delete(e)),\n    off: (e) => o.delete(e),\n    clear: () => o.clear()\n  };\n}\nfunction C(o, t = m) {\n  const e = /* @__PURE__ */ new Set(), i = /* @__PURE__ */ new Map();\n  let s = o;\n  const c = (r) => e.forEach((n) => n(r)), p = (r, n) => {\n    let a = r, d = () => {\n    };\n    if (n) {\n      const u = new b(r, n);\n      a = u.handle, d = () => u.destroy(), i.set(r, { wrapped: a, destroy: d });\n    }\n    return s !== void 0 && a(s), e.add(a), () => {\n      e.delete(a), d(), i.delete(r);\n    };\n  };\n  return {\n    /* emitter behaviour ---------------------------------------- */\n    get value() {\n      return s;\n    },\n    emit(r = void 0) {\n      (s === void 0 || !t(s, r)) && (s = r, c(r));\n    },\n    on: p,\n    off(r) {\n      const n = i.get(r);\n      n ? (e.delete(n.wrapped), n.destroy(), i.delete(r)) : e.delete(r);\n    },\n    clear() {\n      e.clear(), i.forEach((r) => r.destroy()), i.clear();\n    },\n    /* derived hook --------------------------------------------- */\n    select(r, n = m) {\n      return (a, d) => {\n        let u;\n        if (s !== void 0) {\n          const h = r(s);\n          u = h, a(h);\n        }\n        return p(\n          (h) => {\n            const l = r(h);\n            (u === void 0 || !n(u, l)) && (u = l, a(l));\n          },\n          d\n        );\n      };\n    }\n  };\n}\nfunction T(o) {\n  return Object.entries(o).map(([t, e]) => {\n    const i = Number(t);\n    return [Number.isFinite(i) && t.trim() !== \"\" ? i : t, e];\n  });\n}\nexport {\n  w as BasePlugin,\n  v as CORE_ACTION_TYPES,\n  D as CapabilityConflictError,\n  I as CapabilityNotFoundError,\n  F as CircularDependencyError,\n  _ as DependencyResolver,\n  b as EventControl,\n  O as LOAD_DOCUMENT,\n  A as PluginConfigurationError,\n  N as PluginInitializationError,\n  M as PluginNotFoundError,\n  U as PluginRegistrationError,\n  z as PluginRegistry,\n  x as SET_DOCUMENT,\n  L as SET_DOCUMENT_ERROR,\n  j as SET_PAGES,\n  q as SET_ROTATION,\n  B as SET_SCALE,\n  m as arePropsEqual,\n  K as clamp,\n  C as createBehaviorEmitter,\n  E as createEmitter,\n  y as createPluginRegistration,\n  T as enumEntries,\n  f as getPagesWithRotatedSize,\n  $ as initialCoreState,\n  k as loadDocument,\n  G as setDocument,\n  W as setDocumentError,\n  Y as setPages,\n  H as setRotation,\n  J as setScale\n};\n//# sourceMappingURL=index.js.map\n","import {\n  BasePlugin,\n  PluginRegistry,\n  createEmitter,\n  createBehaviorEmitter,\n  Listener,\n  EventListener,\n} from '@embedpdf/core';\n\nimport {\n  ViewportAction,\n  setViewportMetrics,\n  setViewportScrollMetrics,\n  setViewportGap,\n  setScrollActivity,\n} from './actions';\nimport {\n  ViewportPluginConfig,\n  ViewportState,\n  ViewportCapability,\n  ViewportMetrics,\n  ViewportScrollMetrics,\n  ViewportInputMetrics,\n  ScrollToPayload,\n} from './types';\nimport { Rect } from '@embedpdf/models';\n\nexport class ViewportPlugin extends BasePlugin<\n  ViewportPluginConfig,\n  ViewportCapability,\n  ViewportState,\n  ViewportAction\n> {\n  static readonly id = 'viewport' as const;\n\n  private readonly viewportResize$ = createBehaviorEmitter<ViewportMetrics>();\n  private readonly viewportMetrics$ = createBehaviorEmitter<ViewportMetrics>();\n  private readonly scrollMetrics$ = createBehaviorEmitter<ViewportScrollMetrics>();\n  private readonly scrollReq$ = createEmitter<{\n    x: number;\n    y: number;\n    behavior?: ScrollBehavior;\n  }>();\n  private readonly scrollActivity$ = createBehaviorEmitter<boolean>();\n\n  /* ------------------------------------------------------------------ */\n  /* “live rect” infrastructure                                          */\n  /* ------------------------------------------------------------------ */\n  private rectProvider: (() => Rect) | null = null;\n\n  private scrollEndTimer?: number;\n  private readonly scrollEndDelay: number;\n\n  constructor(\n    public readonly id: string,\n    registry: PluginRegistry,\n    config: ViewportPluginConfig,\n  ) {\n    super(id, registry);\n\n    if (config.viewportGap) {\n      this.dispatch(setViewportGap(config.viewportGap));\n    }\n\n    this.scrollEndDelay = config.scrollEndDelay || 300;\n  }\n\n  protected buildCapability(): ViewportCapability {\n    return {\n      getViewportGap: () => this.state.viewportGap,\n      getMetrics: () => this.state.viewportMetrics,\n      getBoundingRect: (): Rect =>\n        this.rectProvider?.() ?? {\n          origin: { x: 0, y: 0 },\n          size: { width: 0, height: 0 },\n        },\n      scrollTo: (pos: ScrollToPayload) => this.scrollTo(pos),\n      isScrolling: () => this.state.isScrolling,\n      onScrollChange: this.scrollMetrics$.on,\n      onViewportChange: this.viewportMetrics$.on,\n      onViewportResize: this.viewportResize$.on,\n      onScrollActivity: this.scrollActivity$.on,\n    };\n  }\n\n  public setViewportResizeMetrics(viewportMetrics: ViewportInputMetrics) {\n    this.dispatch(setViewportMetrics(viewportMetrics));\n    this.viewportResize$.emit(this.state.viewportMetrics);\n  }\n\n  public setViewportScrollMetrics(scrollMetrics: ViewportScrollMetrics) {\n    if (\n      scrollMetrics.scrollTop !== this.state.viewportMetrics.scrollTop ||\n      scrollMetrics.scrollLeft !== this.state.viewportMetrics.scrollLeft\n    ) {\n      this.dispatch(setViewportScrollMetrics(scrollMetrics));\n      this.bumpScrollActivity();\n      this.scrollMetrics$.emit({\n        scrollTop: scrollMetrics.scrollTop,\n        scrollLeft: scrollMetrics.scrollLeft,\n      });\n    }\n  }\n\n  public onScrollRequest(listener: Listener<ScrollToPayload>) {\n    return this.scrollReq$.on(listener);\n  }\n\n  public registerBoundingRectProvider(provider: (() => Rect) | null) {\n    this.rectProvider = provider;\n  }\n\n  private bumpScrollActivity() {\n    this.debouncedDispatch(setScrollActivity(false), this.scrollEndDelay);\n  }\n\n  private scrollTo(pos: ScrollToPayload) {\n    const { x, y, center, behavior = 'auto' } = pos;\n\n    if (center) {\n      const metrics = this.state.viewportMetrics;\n      // Calculate the centered position by adding half the viewport dimensions\n      const centeredX = x - metrics.clientWidth / 2;\n      const centeredY = y - metrics.clientHeight / 2;\n\n      this.scrollReq$.emit({\n        x: centeredX,\n        y: centeredY,\n        behavior,\n      });\n    } else {\n      this.scrollReq$.emit({\n        x,\n        y,\n        behavior,\n      });\n    }\n  }\n\n  // Subscribe to store changes to notify onViewportChange\n  override onStoreUpdated(prevState: ViewportState, newState: ViewportState): void {\n    if (prevState !== newState) {\n      this.viewportMetrics$.emit(newState.viewportMetrics);\n      if (prevState.isScrolling !== newState.isScrolling) {\n        this.scrollActivity$.emit(newState.isScrolling);\n      }\n    }\n  }\n\n  async initialize(_config: ViewportPluginConfig) {\n    // No initialization needed\n  }\n\n  async destroy(): Promise<void> {\n    super.destroy();\n    // Clear out any handlers\n    this.viewportMetrics$.clear();\n    this.viewportResize$.clear();\n    this.scrollMetrics$.clear();\n    this.scrollReq$.clear();\n    this.scrollActivity$.clear();\n    this.rectProvider = null;\n    if (this.scrollEndTimer) clearTimeout(this.scrollEndTimer);\n  }\n}\n"],"names":["SET_VIEWPORT_METRICS","SET_VIEWPORT_SCROLL_METRICS","SET_VIEWPORT_GAP","SET_SCROLL_ACTIVITY","setViewportGap","viewportGap","setViewportMetrics","viewportMetrics","setViewportScrollMetrics","scrollMetrics","setScrollActivity","isScrolling","z","M","L","$","F","N","k","P","i","e","_","t","v","r","n","x","a","o","U","B","S","G","d","s","w","c","b","E","C","m","p","u","h","l","_ViewportPlugin","BasePlugin","id","registry","config","createBehaviorEmitter","createEmitter","_a","pos","listener","provider","y","center","behavior","metrics","centeredX","centeredY","prevState","newState","_config","ViewportPlugin"],"mappings":"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"}
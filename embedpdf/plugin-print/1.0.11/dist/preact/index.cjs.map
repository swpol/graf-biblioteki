{"version":3,"sources":["../../src/preact/index.ts","../../src/preact/hooks/use-print.ts","../../src/preact/components/print.tsx","../../src/preact/hooks/use-print-action.ts"],"sourcesContent":["export * from './hooks';\nexport * from './components';\n","import { useCapability, usePlugin } from '@embedpdf/core/preact';\nimport { PrintPlugin } from '@embedpdf/plugin-print';\n\nexport const usePrintPlugin = () => usePlugin<PrintPlugin>(PrintPlugin.id);\nexport const usePrintCapability = () => useCapability<PrintPlugin>(PrintPlugin.id);\n","/** @jsxImportSource preact */\nimport { createContext, render } from 'preact';\nimport { useContext, useRef, useEffect, useState } from 'preact/hooks';\nimport { ComponentChildren } from 'preact';\nimport { usePrintCapability } from '../hooks/use-print';\nimport { PrintOptions, PrintProgress, PrintPageResult, ParsedPageRange } from '../../lib/types';\n\ninterface PrintContextValue {\n  parsePageRange: (rangeString: string) => ParsedPageRange;\n  executePrint: (options: PrintOptions) => Promise<void>;\n  progress: PrintProgress | null;\n  isReady: boolean;\n  isPrinting: boolean;\n}\n\nconst PrintContext = createContext<PrintContextValue | null>(null);\n\ninterface PrintProviderProps {\n  children: ComponentChildren;\n}\n\ninterface PrintPageProps {\n  pageResult: PrintPageResult;\n}\n\nconst PrintPage = ({ pageResult }: PrintPageProps) => {\n  const [imageUrl, setImageUrl] = useState<string>('');\n\n  useEffect(() => {\n    const url = URL.createObjectURL(pageResult.blob);\n    setImageUrl(url);\n\n    return () => {\n      URL.revokeObjectURL(url);\n    };\n  }, [pageResult.blob]);\n\n  const handleLoad = () => {\n    if (imageUrl) {\n      URL.revokeObjectURL(imageUrl);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        pageBreakAfter: 'always',\n        width: '210mm',\n        minHeight: '297mm',\n        margin: '0 auto',\n        background: 'white',\n        position: 'relative',\n      }}\n    >\n      <img\n        src={imageUrl}\n        onLoad={handleLoad}\n        alt={`Page ${pageResult.pageIndex + 1}`}\n        style={{\n          width: '100%',\n          height: 'auto',\n          display: 'block',\n          objectFit: 'contain',\n        }}\n      />\n    </div>\n  );\n};\n\ninterface PrintLayoutProps {\n  pages: PrintPageResult[];\n}\n\nconst PrintLayout = ({ pages }: PrintLayoutProps) => {\n  return (\n    <div\n      style={{\n        fontFamily: 'Arial, sans-serif',\n        fontSize: '12px',\n        lineHeight: '1.4',\n        color: '#000',\n        backgroundColor: '#fff',\n      }}\n    >\n      <style>{`\n        @media print {\n          body { margin: 0; padding: 0; }\n        }\n      `}</style>\n      {pages.map((pageResult) => (\n        <div key={pageResult.pageIndex}>\n          <PrintPage pageResult={pageResult} />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport function PrintProvider({ children }: PrintProviderProps) {\n  const { provides: printCapability } = usePrintCapability();\n  const iframeRef = useRef<HTMLIFrameElement>(null);\n  const [progress, setProgress] = useState<PrintProgress | null>(null);\n  const [isReady, setIsReady] = useState(false);\n  const [isPrinting, setIsPrinting] = useState(false);\n  const [pages, setPages] = useState<PrintPageResult[]>([]);\n\n  const executePrint = async (options: PrintOptions): Promise<void> => {\n    if (!printCapability) {\n      throw new Error('Print capability not available');\n    }\n\n    if (!iframeRef.current?.contentWindow) {\n      throw new Error('Print iframe not ready');\n    }\n\n    setIsPrinting(true);\n    setProgress(null);\n    setPages([]);\n    setIsReady(false);\n\n    try {\n      const collectedPages: PrintPageResult[] = [];\n\n      // Prepare print with progress tracking\n      await printCapability.preparePrint(\n        options,\n        // Progress callback\n        (progressUpdate: PrintProgress) => {\n          setProgress(progressUpdate);\n        },\n        // Page ready callback\n        (pageResult: PrintPageResult) => {\n          collectedPages.push(pageResult);\n          setPages([...collectedPages]); // Update pages as they come in\n        },\n      );\n\n      // Wait a bit for all content to load\n      await new Promise((resolve) => setTimeout(resolve, 500));\n\n      // Execute print\n      const printWindow = iframeRef.current.contentWindow!;\n      printWindow.focus();\n      printWindow.print();\n\n      setProgress({\n        current: progress?.total || 0,\n        total: progress?.total || 0,\n        status: 'complete',\n        message: 'Print dialog opened',\n      });\n    } catch (error) {\n      setProgress({\n        current: 0,\n        total: 0,\n        status: 'error',\n        message: `Print failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      });\n      throw error;\n    } finally {\n      setIsPrinting(false);\n    }\n  };\n\n  // Render the print layout into the iframe when pages change\n  useEffect(() => {\n    const iframe = iframeRef.current;\n    const mountNode = iframe?.contentWindow?.document?.body;\n\n    if (mountNode && pages.length > 0) {\n      render(<PrintLayout pages={pages} />, mountNode);\n      setIsReady(true);\n\n      return () => {\n        if (mountNode) {\n          render(null, mountNode);\n        }\n      };\n    }\n  }, [pages]);\n\n  const contextValue: PrintContextValue = {\n    parsePageRange: printCapability?.parsePageRange || (() => ({ pages: [], isValid: false })),\n    executePrint,\n    progress,\n    isReady,\n    isPrinting,\n  };\n\n  return (\n    <PrintContext.Provider value={contextValue}>\n      {children}\n      <iframe\n        ref={iframeRef}\n        style={{\n          display: 'none',\n          width: '210mm',\n          height: '297mm',\n        }}\n        title=\"Print Preview\"\n      />\n    </PrintContext.Provider>\n  );\n}\n\nexport function usePrintContext(): PrintContextValue {\n  const context = useContext(PrintContext);\n  if (!context) {\n    throw new Error('usePrintContext must be used within a PrintProvider');\n  }\n  return context;\n}\n","import { PrintOptions } from '@embedpdf/plugin-print';\nimport { usePrintContext } from '../components';\n\nexport const usePrintAction = () => {\n  const { executePrint, progress, isReady, isPrinting, parsePageRange } = usePrintContext();\n\n  return {\n    executePrint,\n    progress,\n    isReady,\n    isPrinting,\n    parsePageRange,\n  };\n};\n"],"mappings":"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","names":["import_preact"]}